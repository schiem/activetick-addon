// Generated by IcedCoffeeScript 1.8.0-e
(function() {
  var ATConstituentRequestTypes, ATStreamRequestTypes, ActiveTick, NodeActiveTick, ProtoBuf, async, config, iced, main, noisy, path, standard_timeout, stripNull, _, __iced_k, __iced_k_noop,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  NodeActiveTick = require('./build/Debug/NodeActiveTickAddon').NodeActiveTick;

  async = require('async');

  _ = require('underscore');

  config = require('./config');

  ProtoBuf = require('protobufjs');

  path = require('path');

  noisy = true;

  ATConstituentRequestTypes = ['ATConstituentListIndex', 'ATConstituentListSector', 'ATConstituentListOptionChain'];

  ATStreamRequestTypes = ['StreamRequestSubscribe', 'StreamRequestUnsubscribe', 'StreamRequestSubscribeQuotesOnly', 'StreamRequestUnsubscribeQuotesOnly', 'StreamRequestSubscribeTradesOnly', 'StreamRequestUnsubscribeTradesOnly'];

  standard_timeout = 3000;

  ActiveTick = (function() {
    function ActiveTick(readyCb) {
      this.handleProtoMsg = __bind(this.handleProtoMsg, this);
      this.connect = __bind(this.connect, this);
      this.beginQuoteStream = __bind(this.beginQuoteStream, this);
      ProtoBuf.loadProtoFile(path.join(__dirname, "protobuf", "messages.proto"), (function(_this) {
        return function(err, builder) {
          if (err) {
            return console.error(err);
          }
          _this.api = new NodeActiveTick(_this.handleProtoMsg);
          _this.callbacks = {};
          _this.messages_builder = builder;
          _this.ATLoginResponse = _this.messages_builder.build("NodeActiveTickProto.ATLoginResponse");
          _this.ATConstituentResponse = _this.messages_builder.build("NodeActiveTickProto.ATConstituentResponse");
          _this.ATQuote = _this.messages_builder.build("NodeActiveTickProto.ATQuote");
          _this.ATQuoteStreamResponse = _this.messages_builder.build("NodeActiveTickProto.ATQuoteStreamResponse");
          return readyCb();
        };
      })(this));
    }

    ActiveTick.prototype.beginQuoteStream = function(symbols, ATStreamRequestTypeIndex, quoteCb, requestCb) {
      var request_id, symbolCount, symbolParam, _quoteDecode;
      this.quoteCb = quoteCb;
      _quoteDecode = (function(_this) {
        return function(quote_buffer) {
          var quote;
          console.log('hurro');
          console.log(quote_buffer);
          quote = _this.ATQuote.decode(quote_buffer);
          return _this.quoteCb(quote);
        };
      })(this);
      if (typeof symbols === 'object') {
        symbolParam = symbols.join(',');
        symbolCount = symbols.length;
      } else if (typeof symbols === 'string') {
        symbolParam = symbols;
        symbolCount = 1;
      }
      request_id = this.api.beginQuoteStream(symbolParam, symbolCount, ATStreamRequestTypes[ATStreamRequestTypeIndex], _quoteDecode);
      if (requestCb != null) {
        return this.callbacks[request_id] = requestCb;
      }
    };

    ActiveTick.prototype.listRequest = function(listType, key, cb) {
      var request_id;
      request_id = this.api.listRequest(listType, key);
      return this.callbacks[request_id] = cb;
    };

    ActiveTick.prototype.connect = function(url, port, apiKey, username, password, cb) {
      var request_id;
      request_id = this.api.connect(url, port, apiKey, username, password);
      return this.callbacks[request_id] = cb;
    };

    ActiveTick.prototype.handleProtoMsg = function(msgType, msgID, msgData) {
      var c, msg;
      if (msgType === 'ATLoginResponse') {
        msg = this.ATLoginResponse.decode(msgData);
        if (msg.loginResponseString !== 'Success') {
          return console.error(msg);
        }
      } else if (msgType === 'ATConstituentResponse') {
        msg = this.ATConstituentResponse.decode(msgData);
      } else if (msgType === 'ATQuoteStreamResponse') {
        msg = this.ATQuoteStreamResponse.decode(msgData);
      }
      if ((c = this.callbacks[msgID]) != null) {
        return c(msg);
      }
    };

    return ActiveTick;

  })();

  stripNull = function(string) {
    return string.replace(/\0/g, '');
  };

  main = function() {
    var a, getQuote, result, yang, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/sheldonthomas/Documents/Resplendent/activetick-addon/addon/activetick/ActiveTick.iced"
        });
        a = new ActiveTick(__iced_deferrals.defer({
          lineno: 77
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/sheldonthomas/Documents/Resplendent/activetick-addon/addon/activetick/ActiveTick.iced"
          });
          a.connect(config.url, config.port, config.api_key, config.username, config.password, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return result = arguments[0];
              };
            })(),
            lineno: 78
          }));
          __iced_deferrals._fulfill();
        })(function() {
          (function(__iced_k) {
            __iced_deferrals = new iced.Deferrals(__iced_k, {
              parent: ___iced_passed_deferral,
              filename: "/Users/sheldonthomas/Documents/Resplendent/activetick-addon/addon/activetick/ActiveTick.iced"
            });
            a.listRequest(ATConstituentRequestTypes[2], 'YANG', __iced_deferrals.defer({
              assign_fn: (function() {
                return function() {
                  return yang = arguments[0];
                };
              })(),
              lineno: 79
            }));
            __iced_deferrals._fulfill();
          })(function() {
            console.log(yang.symbols.length + ' YANG options.');
            getQuote = function(quote) {
              console.log('getQuote');
              return console.log(quote);
            };
            return a.beginQuoteStream(['WFM'], ATStreamRequestTypes[0], getQuote, function(result) {
              return console.log(result);
            });
          });
        });
      };
    })(this));
  };

  if (!module.parent) {
    main();
  }

}).call(this);
