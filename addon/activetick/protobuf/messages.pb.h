// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef PROTOBUF_messages_2eproto__INCLUDED
#define PROTOBUF_messages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace NodeActiveTickProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_messages_2eproto();
void protobuf_AssignDesc_messages_2eproto();
void protobuf_ShutdownFile_messages_2eproto();

class ATLoginResponse;
class ATConstituentResponse;
class ATQuoteStreamResponse;
class ATQuoteStreamResponseItem;
class ATTime;
class ATQuoteStreamTradeUpdate;
class ATQuoteStreamQuoteUpdate;
class ATQuoteStreamRefreshUpdate;
class ATSymbol;
class ATPrice;
class ATQuote;

// ===================================================================

class ATLoginResponse : public ::google::protobuf::Message {
 public:
  ATLoginResponse();
  virtual ~ATLoginResponse();

  ATLoginResponse(const ATLoginResponse& from);

  inline ATLoginResponse& operator=(const ATLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ATLoginResponse& default_instance();

  void Swap(ATLoginResponse* other);

  // implements Message ----------------------------------------------

  ATLoginResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ATLoginResponse& from);
  void MergeFrom(const ATLoginResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 loginResponseType = 1;
  inline bool has_loginresponsetype() const;
  inline void clear_loginresponsetype();
  static const int kLoginResponseTypeFieldNumber = 1;
  inline ::google::protobuf::int32 loginresponsetype() const;
  inline void set_loginresponsetype(::google::protobuf::int32 value);

  // required string loginResponseString = 2;
  inline bool has_loginresponsestring() const;
  inline void clear_loginresponsestring();
  static const int kLoginResponseStringFieldNumber = 2;
  inline const ::std::string& loginresponsestring() const;
  inline void set_loginresponsestring(const ::std::string& value);
  inline void set_loginresponsestring(const char* value);
  inline void set_loginresponsestring(const char* value, size_t size);
  inline ::std::string* mutable_loginresponsestring();
  inline ::std::string* release_loginresponsestring();
  inline void set_allocated_loginresponsestring(::std::string* loginresponsestring);

  // @@protoc_insertion_point(class_scope:NodeActiveTickProto.ATLoginResponse)
 private:
  inline void set_has_loginresponsetype();
  inline void clear_has_loginresponsetype();
  inline void set_has_loginresponsestring();
  inline void clear_has_loginresponsestring();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* loginresponsestring_;
  ::google::protobuf::int32 loginresponsetype_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ATLoginResponse* default_instance_;
};
// -------------------------------------------------------------------

class ATConstituentResponse : public ::google::protobuf::Message {
 public:
  ATConstituentResponse();
  virtual ~ATConstituentResponse();

  ATConstituentResponse(const ATConstituentResponse& from);

  inline ATConstituentResponse& operator=(const ATConstituentResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ATConstituentResponse& default_instance();

  void Swap(ATConstituentResponse* other);

  // implements Message ----------------------------------------------

  ATConstituentResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ATConstituentResponse& from);
  void MergeFrom(const ATConstituentResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NodeActiveTickProto.ATSymbol symbols = 1;
  inline int symbols_size() const;
  inline void clear_symbols();
  static const int kSymbolsFieldNumber = 1;
  inline const ::NodeActiveTickProto::ATSymbol& symbols(int index) const;
  inline ::NodeActiveTickProto::ATSymbol* mutable_symbols(int index);
  inline ::NodeActiveTickProto::ATSymbol* add_symbols();
  inline const ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATSymbol >&
      symbols() const;
  inline ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATSymbol >*
      mutable_symbols();

  // @@protoc_insertion_point(class_scope:NodeActiveTickProto.ATConstituentResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATSymbol > symbols_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ATConstituentResponse* default_instance_;
};
// -------------------------------------------------------------------

class ATQuoteStreamResponse : public ::google::protobuf::Message {
 public:
  ATQuoteStreamResponse();
  virtual ~ATQuoteStreamResponse();

  ATQuoteStreamResponse(const ATQuoteStreamResponse& from);

  inline ATQuoteStreamResponse& operator=(const ATQuoteStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ATQuoteStreamResponse& default_instance();

  void Swap(ATQuoteStreamResponse* other);

  // implements Message ----------------------------------------------

  ATQuoteStreamResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ATQuoteStreamResponse& from);
  void MergeFrom(const ATQuoteStreamResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string quoteStreamResponseType = 1;
  inline bool has_quotestreamresponsetype() const;
  inline void clear_quotestreamresponsetype();
  static const int kQuoteStreamResponseTypeFieldNumber = 1;
  inline const ::std::string& quotestreamresponsetype() const;
  inline void set_quotestreamresponsetype(const ::std::string& value);
  inline void set_quotestreamresponsetype(const char* value);
  inline void set_quotestreamresponsetype(const char* value, size_t size);
  inline ::std::string* mutable_quotestreamresponsetype();
  inline ::std::string* release_quotestreamresponsetype();
  inline void set_allocated_quotestreamresponsetype(::std::string* quotestreamresponsetype);

  // optional int32 quoteResponseCount = 2;
  inline bool has_quoteresponsecount() const;
  inline void clear_quoteresponsecount();
  static const int kQuoteResponseCountFieldNumber = 2;
  inline ::google::protobuf::int32 quoteresponsecount() const;
  inline void set_quoteresponsecount(::google::protobuf::int32 value);

  // repeated .NodeActiveTickProto.ATQuoteStreamResponseItem quoteStreamItems = 3;
  inline int quotestreamitems_size() const;
  inline void clear_quotestreamitems();
  static const int kQuoteStreamItemsFieldNumber = 3;
  inline const ::NodeActiveTickProto::ATQuoteStreamResponseItem& quotestreamitems(int index) const;
  inline ::NodeActiveTickProto::ATQuoteStreamResponseItem* mutable_quotestreamitems(int index);
  inline ::NodeActiveTickProto::ATQuoteStreamResponseItem* add_quotestreamitems();
  inline const ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATQuoteStreamResponseItem >&
      quotestreamitems() const;
  inline ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATQuoteStreamResponseItem >*
      mutable_quotestreamitems();

  // @@protoc_insertion_point(class_scope:NodeActiveTickProto.ATQuoteStreamResponse)
 private:
  inline void set_has_quotestreamresponsetype();
  inline void clear_has_quotestreamresponsetype();
  inline void set_has_quoteresponsecount();
  inline void clear_has_quoteresponsecount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* quotestreamresponsetype_;
  ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATQuoteStreamResponseItem > quotestreamitems_;
  ::google::protobuf::int32 quoteresponsecount_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ATQuoteStreamResponse* default_instance_;
};
// -------------------------------------------------------------------

class ATQuoteStreamResponseItem : public ::google::protobuf::Message {
 public:
  ATQuoteStreamResponseItem();
  virtual ~ATQuoteStreamResponseItem();

  ATQuoteStreamResponseItem(const ATQuoteStreamResponseItem& from);

  inline ATQuoteStreamResponseItem& operator=(const ATQuoteStreamResponseItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ATQuoteStreamResponseItem& default_instance();

  void Swap(ATQuoteStreamResponseItem* other);

  // implements Message ----------------------------------------------

  ATQuoteStreamResponseItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ATQuoteStreamResponseItem& from);
  void MergeFrom(const ATQuoteStreamResponseItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string responseType = 1;
  inline bool has_responsetype() const;
  inline void clear_responsetype();
  static const int kResponseTypeFieldNumber = 1;
  inline const ::std::string& responsetype() const;
  inline void set_responsetype(const ::std::string& value);
  inline void set_responsetype(const char* value);
  inline void set_responsetype(const char* value, size_t size);
  inline ::std::string* mutable_responsetype();
  inline ::std::string* release_responsetype();
  inline void set_allocated_responsetype(::std::string* responsetype);

  // optional .NodeActiveTickProto.ATSymbol symbol = 2;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 2;
  inline const ::NodeActiveTickProto::ATSymbol& symbol() const;
  inline ::NodeActiveTickProto::ATSymbol* mutable_symbol();
  inline ::NodeActiveTickProto::ATSymbol* release_symbol();
  inline void set_allocated_symbol(::NodeActiveTickProto::ATSymbol* symbol);

  // optional string symbolStatus = 3;
  inline bool has_symbolstatus() const;
  inline void clear_symbolstatus();
  static const int kSymbolStatusFieldNumber = 3;
  inline const ::std::string& symbolstatus() const;
  inline void set_symbolstatus(const ::std::string& value);
  inline void set_symbolstatus(const char* value);
  inline void set_symbolstatus(const char* value, size_t size);
  inline ::std::string* mutable_symbolstatus();
  inline ::std::string* release_symbolstatus();
  inline void set_allocated_symbolstatus(::std::string* symbolstatus);

  // @@protoc_insertion_point(class_scope:NodeActiveTickProto.ATQuoteStreamResponseItem)
 private:
  inline void set_has_responsetype();
  inline void clear_has_responsetype();
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_symbolstatus();
  inline void clear_has_symbolstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* responsetype_;
  ::NodeActiveTickProto::ATSymbol* symbol_;
  ::std::string* symbolstatus_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ATQuoteStreamResponseItem* default_instance_;
};
// -------------------------------------------------------------------

class ATTime : public ::google::protobuf::Message {
 public:
  ATTime();
  virtual ~ATTime();

  ATTime(const ATTime& from);

  inline ATTime& operator=(const ATTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ATTime& default_instance();

  void Swap(ATTime* other);

  // implements Message ----------------------------------------------

  ATTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ATTime& from);
  void MergeFrom(const ATTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 year = 1;
  inline bool has_year() const;
  inline void clear_year();
  static const int kYearFieldNumber = 1;
  inline ::google::protobuf::int32 year() const;
  inline void set_year(::google::protobuf::int32 value);

  // optional int32 month = 2;
  inline bool has_month() const;
  inline void clear_month();
  static const int kMonthFieldNumber = 2;
  inline ::google::protobuf::int32 month() const;
  inline void set_month(::google::protobuf::int32 value);

  // optional int32 dayOfWeek = 3;
  inline bool has_dayofweek() const;
  inline void clear_dayofweek();
  static const int kDayOfWeekFieldNumber = 3;
  inline ::google::protobuf::int32 dayofweek() const;
  inline void set_dayofweek(::google::protobuf::int32 value);

  // optional int32 day = 4;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 4;
  inline ::google::protobuf::int32 day() const;
  inline void set_day(::google::protobuf::int32 value);

  // optional int32 hour = 5;
  inline bool has_hour() const;
  inline void clear_hour();
  static const int kHourFieldNumber = 5;
  inline ::google::protobuf::int32 hour() const;
  inline void set_hour(::google::protobuf::int32 value);

  // optional int32 minute = 6;
  inline bool has_minute() const;
  inline void clear_minute();
  static const int kMinuteFieldNumber = 6;
  inline ::google::protobuf::int32 minute() const;
  inline void set_minute(::google::protobuf::int32 value);

  // optional int32 second = 7;
  inline bool has_second() const;
  inline void clear_second();
  static const int kSecondFieldNumber = 7;
  inline ::google::protobuf::int32 second() const;
  inline void set_second(::google::protobuf::int32 value);

  // optional int32 millisecond = 8;
  inline bool has_millisecond() const;
  inline void clear_millisecond();
  static const int kMillisecondFieldNumber = 8;
  inline ::google::protobuf::int32 millisecond() const;
  inline void set_millisecond(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NodeActiveTickProto.ATTime)
 private:
  inline void set_has_year();
  inline void clear_has_year();
  inline void set_has_month();
  inline void clear_has_month();
  inline void set_has_dayofweek();
  inline void clear_has_dayofweek();
  inline void set_has_day();
  inline void clear_has_day();
  inline void set_has_hour();
  inline void clear_has_hour();
  inline void set_has_minute();
  inline void clear_has_minute();
  inline void set_has_second();
  inline void clear_has_second();
  inline void set_has_millisecond();
  inline void clear_has_millisecond();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 year_;
  ::google::protobuf::int32 month_;
  ::google::protobuf::int32 dayofweek_;
  ::google::protobuf::int32 day_;
  ::google::protobuf::int32 hour_;
  ::google::protobuf::int32 minute_;
  ::google::protobuf::int32 second_;
  ::google::protobuf::int32 millisecond_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ATTime* default_instance_;
};
// -------------------------------------------------------------------

class ATQuoteStreamTradeUpdate : public ::google::protobuf::Message {
 public:
  ATQuoteStreamTradeUpdate();
  virtual ~ATQuoteStreamTradeUpdate();

  ATQuoteStreamTradeUpdate(const ATQuoteStreamTradeUpdate& from);

  inline ATQuoteStreamTradeUpdate& operator=(const ATQuoteStreamTradeUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ATQuoteStreamTradeUpdate& default_instance();

  void Swap(ATQuoteStreamTradeUpdate* other);

  // implements Message ----------------------------------------------

  ATQuoteStreamTradeUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ATQuoteStreamTradeUpdate& from);
  void MergeFrom(const ATQuoteStreamTradeUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .NodeActiveTickProto.ATSymbol tradeSymbol = 1;
  inline bool has_tradesymbol() const;
  inline void clear_tradesymbol();
  static const int kTradeSymbolFieldNumber = 1;
  inline const ::NodeActiveTickProto::ATSymbol& tradesymbol() const;
  inline ::NodeActiveTickProto::ATSymbol* mutable_tradesymbol();
  inline ::NodeActiveTickProto::ATSymbol* release_tradesymbol();
  inline void set_allocated_tradesymbol(::NodeActiveTickProto::ATSymbol* tradesymbol);

  // optional int32 tradeMessageFlags = 2;
  inline bool has_trademessageflags() const;
  inline void clear_trademessageflags();
  static const int kTradeMessageFlagsFieldNumber = 2;
  inline ::google::protobuf::int32 trademessageflags() const;
  inline void set_trademessageflags(::google::protobuf::int32 value);

  // repeated string tradeConditionType = 3;
  inline int tradeconditiontype_size() const;
  inline void clear_tradeconditiontype();
  static const int kTradeConditionTypeFieldNumber = 3;
  inline const ::std::string& tradeconditiontype(int index) const;
  inline ::std::string* mutable_tradeconditiontype(int index);
  inline void set_tradeconditiontype(int index, const ::std::string& value);
  inline void set_tradeconditiontype(int index, const char* value);
  inline void set_tradeconditiontype(int index, const char* value, size_t size);
  inline ::std::string* add_tradeconditiontype();
  inline void add_tradeconditiontype(const ::std::string& value);
  inline void add_tradeconditiontype(const char* value);
  inline void add_tradeconditiontype(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& tradeconditiontype() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tradeconditiontype();

  // optional string tradeExchange = 4;
  inline bool has_tradeexchange() const;
  inline void clear_tradeexchange();
  static const int kTradeExchangeFieldNumber = 4;
  inline const ::std::string& tradeexchange() const;
  inline void set_tradeexchange(const ::std::string& value);
  inline void set_tradeexchange(const char* value);
  inline void set_tradeexchange(const char* value, size_t size);
  inline ::std::string* mutable_tradeexchange();
  inline ::std::string* release_tradeexchange();
  inline void set_allocated_tradeexchange(::std::string* tradeexchange);

  // optional .NodeActiveTickProto.ATPrice tradePrice = 5;
  inline bool has_tradeprice() const;
  inline void clear_tradeprice();
  static const int kTradePriceFieldNumber = 5;
  inline const ::NodeActiveTickProto::ATPrice& tradeprice() const;
  inline ::NodeActiveTickProto::ATPrice* mutable_tradeprice();
  inline ::NodeActiveTickProto::ATPrice* release_tradeprice();
  inline void set_allocated_tradeprice(::NodeActiveTickProto::ATPrice* tradeprice);

  // optional int32 tradeSize = 6;
  inline bool has_tradesize() const;
  inline void clear_tradesize();
  static const int kTradeSizeFieldNumber = 6;
  inline ::google::protobuf::int32 tradesize() const;
  inline void set_tradesize(::google::protobuf::int32 value);

  // optional .NodeActiveTickProto.ATTime tradeTime = 7;
  inline bool has_tradetime() const;
  inline void clear_tradetime();
  static const int kTradeTimeFieldNumber = 7;
  inline const ::NodeActiveTickProto::ATTime& tradetime() const;
  inline ::NodeActiveTickProto::ATTime* mutable_tradetime();
  inline ::NodeActiveTickProto::ATTime* release_tradetime();
  inline void set_allocated_tradetime(::NodeActiveTickProto::ATTime* tradetime);

  // @@protoc_insertion_point(class_scope:NodeActiveTickProto.ATQuoteStreamTradeUpdate)
 private:
  inline void set_has_tradesymbol();
  inline void clear_has_tradesymbol();
  inline void set_has_trademessageflags();
  inline void clear_has_trademessageflags();
  inline void set_has_tradeexchange();
  inline void clear_has_tradeexchange();
  inline void set_has_tradeprice();
  inline void clear_has_tradeprice();
  inline void set_has_tradesize();
  inline void clear_has_tradesize();
  inline void set_has_tradetime();
  inline void clear_has_tradetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::NodeActiveTickProto::ATSymbol* tradesymbol_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tradeconditiontype_;
  ::std::string* tradeexchange_;
  ::google::protobuf::int32 trademessageflags_;
  ::google::protobuf::int32 tradesize_;
  ::NodeActiveTickProto::ATPrice* tradeprice_;
  ::NodeActiveTickProto::ATTime* tradetime_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ATQuoteStreamTradeUpdate* default_instance_;
};
// -------------------------------------------------------------------

class ATQuoteStreamQuoteUpdate : public ::google::protobuf::Message {
 public:
  ATQuoteStreamQuoteUpdate();
  virtual ~ATQuoteStreamQuoteUpdate();

  ATQuoteStreamQuoteUpdate(const ATQuoteStreamQuoteUpdate& from);

  inline ATQuoteStreamQuoteUpdate& operator=(const ATQuoteStreamQuoteUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ATQuoteStreamQuoteUpdate& default_instance();

  void Swap(ATQuoteStreamQuoteUpdate* other);

  // implements Message ----------------------------------------------

  ATQuoteStreamQuoteUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ATQuoteStreamQuoteUpdate& from);
  void MergeFrom(const ATQuoteStreamQuoteUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .NodeActiveTickProto.ATSymbol quoteSymbol = 1;
  inline bool has_quotesymbol() const;
  inline void clear_quotesymbol();
  static const int kQuoteSymbolFieldNumber = 1;
  inline const ::NodeActiveTickProto::ATSymbol& quotesymbol() const;
  inline ::NodeActiveTickProto::ATSymbol* mutable_quotesymbol();
  inline ::NodeActiveTickProto::ATSymbol* release_quotesymbol();
  inline void set_allocated_quotesymbol(::NodeActiveTickProto::ATSymbol* quotesymbol);

  // optional int32 quoteCondition = 2;
  inline bool has_quotecondition() const;
  inline void clear_quotecondition();
  static const int kQuoteConditionFieldNumber = 2;
  inline ::google::protobuf::int32 quotecondition() const;
  inline void set_quotecondition(::google::protobuf::int32 value);

  // optional string quoteBidExchange = 3;
  inline bool has_quotebidexchange() const;
  inline void clear_quotebidexchange();
  static const int kQuoteBidExchangeFieldNumber = 3;
  inline const ::std::string& quotebidexchange() const;
  inline void set_quotebidexchange(const ::std::string& value);
  inline void set_quotebidexchange(const char* value);
  inline void set_quotebidexchange(const char* value, size_t size);
  inline ::std::string* mutable_quotebidexchange();
  inline ::std::string* release_quotebidexchange();
  inline void set_allocated_quotebidexchange(::std::string* quotebidexchange);

  // optional string quoteAskExchange = 4;
  inline bool has_quoteaskexchange() const;
  inline void clear_quoteaskexchange();
  static const int kQuoteAskExchangeFieldNumber = 4;
  inline const ::std::string& quoteaskexchange() const;
  inline void set_quoteaskexchange(const ::std::string& value);
  inline void set_quoteaskexchange(const char* value);
  inline void set_quoteaskexchange(const char* value, size_t size);
  inline ::std::string* mutable_quoteaskexchange();
  inline ::std::string* release_quoteaskexchange();
  inline void set_allocated_quoteaskexchange(::std::string* quoteaskexchange);

  // optional .NodeActiveTickProto.ATPrice quoteBidPrice = 5;
  inline bool has_quotebidprice() const;
  inline void clear_quotebidprice();
  static const int kQuoteBidPriceFieldNumber = 5;
  inline const ::NodeActiveTickProto::ATPrice& quotebidprice() const;
  inline ::NodeActiveTickProto::ATPrice* mutable_quotebidprice();
  inline ::NodeActiveTickProto::ATPrice* release_quotebidprice();
  inline void set_allocated_quotebidprice(::NodeActiveTickProto::ATPrice* quotebidprice);

  // optional .NodeActiveTickProto.ATPrice quoteAskPrice = 6;
  inline bool has_quoteaskprice() const;
  inline void clear_quoteaskprice();
  static const int kQuoteAskPriceFieldNumber = 6;
  inline const ::NodeActiveTickProto::ATPrice& quoteaskprice() const;
  inline ::NodeActiveTickProto::ATPrice* mutable_quoteaskprice();
  inline ::NodeActiveTickProto::ATPrice* release_quoteaskprice();
  inline void set_allocated_quoteaskprice(::NodeActiveTickProto::ATPrice* quoteaskprice);

  // optional int32 quoteBidSize = 7;
  inline bool has_quotebidsize() const;
  inline void clear_quotebidsize();
  static const int kQuoteBidSizeFieldNumber = 7;
  inline ::google::protobuf::int32 quotebidsize() const;
  inline void set_quotebidsize(::google::protobuf::int32 value);

  // optional int32 quoteAskSize = 8;
  inline bool has_quoteasksize() const;
  inline void clear_quoteasksize();
  static const int kQuoteAskSizeFieldNumber = 8;
  inline ::google::protobuf::int32 quoteasksize() const;
  inline void set_quoteasksize(::google::protobuf::int32 value);

  // optional .NodeActiveTickProto.ATTime quoteTime = 9;
  inline bool has_quotetime() const;
  inline void clear_quotetime();
  static const int kQuoteTimeFieldNumber = 9;
  inline const ::NodeActiveTickProto::ATTime& quotetime() const;
  inline ::NodeActiveTickProto::ATTime* mutable_quotetime();
  inline ::NodeActiveTickProto::ATTime* release_quotetime();
  inline void set_allocated_quotetime(::NodeActiveTickProto::ATTime* quotetime);

  // @@protoc_insertion_point(class_scope:NodeActiveTickProto.ATQuoteStreamQuoteUpdate)
 private:
  inline void set_has_quotesymbol();
  inline void clear_has_quotesymbol();
  inline void set_has_quotecondition();
  inline void clear_has_quotecondition();
  inline void set_has_quotebidexchange();
  inline void clear_has_quotebidexchange();
  inline void set_has_quoteaskexchange();
  inline void clear_has_quoteaskexchange();
  inline void set_has_quotebidprice();
  inline void clear_has_quotebidprice();
  inline void set_has_quoteaskprice();
  inline void clear_has_quoteaskprice();
  inline void set_has_quotebidsize();
  inline void clear_has_quotebidsize();
  inline void set_has_quoteasksize();
  inline void clear_has_quoteasksize();
  inline void set_has_quotetime();
  inline void clear_has_quotetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::NodeActiveTickProto::ATSymbol* quotesymbol_;
  ::std::string* quotebidexchange_;
  ::std::string* quoteaskexchange_;
  ::google::protobuf::int32 quotecondition_;
  ::google::protobuf::int32 quotebidsize_;
  ::NodeActiveTickProto::ATPrice* quotebidprice_;
  ::NodeActiveTickProto::ATPrice* quoteaskprice_;
  ::NodeActiveTickProto::ATTime* quotetime_;
  ::google::protobuf::int32 quoteasksize_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ATQuoteStreamQuoteUpdate* default_instance_;
};
// -------------------------------------------------------------------

class ATQuoteStreamRefreshUpdate : public ::google::protobuf::Message {
 public:
  ATQuoteStreamRefreshUpdate();
  virtual ~ATQuoteStreamRefreshUpdate();

  ATQuoteStreamRefreshUpdate(const ATQuoteStreamRefreshUpdate& from);

  inline ATQuoteStreamRefreshUpdate& operator=(const ATQuoteStreamRefreshUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ATQuoteStreamRefreshUpdate& default_instance();

  void Swap(ATQuoteStreamRefreshUpdate* other);

  // implements Message ----------------------------------------------

  ATQuoteStreamRefreshUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ATQuoteStreamRefreshUpdate& from);
  void MergeFrom(const ATQuoteStreamRefreshUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .NodeActiveTickProto.ATSymbol refreshSymbol = 1;
  inline bool has_refreshsymbol() const;
  inline void clear_refreshsymbol();
  static const int kRefreshSymbolFieldNumber = 1;
  inline const ::NodeActiveTickProto::ATSymbol& refreshsymbol() const;
  inline ::NodeActiveTickProto::ATSymbol* mutable_refreshsymbol();
  inline ::NodeActiveTickProto::ATSymbol* release_refreshsymbol();
  inline void set_allocated_refreshsymbol(::NodeActiveTickProto::ATSymbol* refreshsymbol);

  // optional .NodeActiveTickProto.ATPrice refreshLastPrice = 2;
  inline bool has_refreshlastprice() const;
  inline void clear_refreshlastprice();
  static const int kRefreshLastPriceFieldNumber = 2;
  inline const ::NodeActiveTickProto::ATPrice& refreshlastprice() const;
  inline ::NodeActiveTickProto::ATPrice* mutable_refreshlastprice();
  inline ::NodeActiveTickProto::ATPrice* release_refreshlastprice();
  inline void set_allocated_refreshlastprice(::NodeActiveTickProto::ATPrice* refreshlastprice);

  // optional .NodeActiveTickProto.ATPrice refreshOpenPrice = 3;
  inline bool has_refreshopenprice() const;
  inline void clear_refreshopenprice();
  static const int kRefreshOpenPriceFieldNumber = 3;
  inline const ::NodeActiveTickProto::ATPrice& refreshopenprice() const;
  inline ::NodeActiveTickProto::ATPrice* mutable_refreshopenprice();
  inline ::NodeActiveTickProto::ATPrice* release_refreshopenprice();
  inline void set_allocated_refreshopenprice(::NodeActiveTickProto::ATPrice* refreshopenprice);

  // optional .NodeActiveTickProto.ATPrice refreshHighPrice = 4;
  inline bool has_refreshhighprice() const;
  inline void clear_refreshhighprice();
  static const int kRefreshHighPriceFieldNumber = 4;
  inline const ::NodeActiveTickProto::ATPrice& refreshhighprice() const;
  inline ::NodeActiveTickProto::ATPrice* mutable_refreshhighprice();
  inline ::NodeActiveTickProto::ATPrice* release_refreshhighprice();
  inline void set_allocated_refreshhighprice(::NodeActiveTickProto::ATPrice* refreshhighprice);

  // optional .NodeActiveTickProto.ATPrice refreshLowPrice = 5;
  inline bool has_refreshlowprice() const;
  inline void clear_refreshlowprice();
  static const int kRefreshLowPriceFieldNumber = 5;
  inline const ::NodeActiveTickProto::ATPrice& refreshlowprice() const;
  inline ::NodeActiveTickProto::ATPrice* mutable_refreshlowprice();
  inline ::NodeActiveTickProto::ATPrice* release_refreshlowprice();
  inline void set_allocated_refreshlowprice(::NodeActiveTickProto::ATPrice* refreshlowprice);

  // @@protoc_insertion_point(class_scope:NodeActiveTickProto.ATQuoteStreamRefreshUpdate)
 private:
  inline void set_has_refreshsymbol();
  inline void clear_has_refreshsymbol();
  inline void set_has_refreshlastprice();
  inline void clear_has_refreshlastprice();
  inline void set_has_refreshopenprice();
  inline void clear_has_refreshopenprice();
  inline void set_has_refreshhighprice();
  inline void clear_has_refreshhighprice();
  inline void set_has_refreshlowprice();
  inline void clear_has_refreshlowprice();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::NodeActiveTickProto::ATSymbol* refreshsymbol_;
  ::NodeActiveTickProto::ATPrice* refreshlastprice_;
  ::NodeActiveTickProto::ATPrice* refreshopenprice_;
  ::NodeActiveTickProto::ATPrice* refreshhighprice_;
  ::NodeActiveTickProto::ATPrice* refreshlowprice_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ATQuoteStreamRefreshUpdate* default_instance_;
};
// -------------------------------------------------------------------

class ATSymbol : public ::google::protobuf::Message {
 public:
  ATSymbol();
  virtual ~ATSymbol();

  ATSymbol(const ATSymbol& from);

  inline ATSymbol& operator=(const ATSymbol& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ATSymbol& default_instance();

  void Swap(ATSymbol* other);

  // implements Message ----------------------------------------------

  ATSymbol* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ATSymbol& from);
  void MergeFrom(const ATSymbol& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string symbol = 1;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // optional string symbol_long = 2;
  inline bool has_symbol_long() const;
  inline void clear_symbol_long();
  static const int kSymbolLongFieldNumber = 2;
  inline const ::std::string& symbol_long() const;
  inline void set_symbol_long(const ::std::string& value);
  inline void set_symbol_long(const char* value);
  inline void set_symbol_long(const char* value, size_t size);
  inline ::std::string* mutable_symbol_long();
  inline ::std::string* release_symbol_long();
  inline void set_allocated_symbol_long(::std::string* symbol_long);

  // optional int32 symbolType = 3;
  inline bool has_symboltype() const;
  inline void clear_symboltype();
  static const int kSymbolTypeFieldNumber = 3;
  inline ::google::protobuf::int32 symboltype() const;
  inline void set_symboltype(::google::protobuf::int32 value);

  // optional int32 exchangeType = 4;
  inline bool has_exchangetype() const;
  inline void clear_exchangetype();
  static const int kExchangeTypeFieldNumber = 4;
  inline ::google::protobuf::int32 exchangetype() const;
  inline void set_exchangetype(::google::protobuf::int32 value);

  // optional int32 countryType = 5;
  inline bool has_countrytype() const;
  inline void clear_countrytype();
  static const int kCountryTypeFieldNumber = 5;
  inline ::google::protobuf::int32 countrytype() const;
  inline void set_countrytype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NodeActiveTickProto.ATSymbol)
 private:
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_symbol_long();
  inline void clear_has_symbol_long();
  inline void set_has_symboltype();
  inline void clear_has_symboltype();
  inline void set_has_exchangetype();
  inline void clear_has_exchangetype();
  inline void set_has_countrytype();
  inline void clear_has_countrytype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* symbol_;
  ::std::string* symbol_long_;
  ::google::protobuf::int32 symboltype_;
  ::google::protobuf::int32 exchangetype_;
  ::google::protobuf::int32 countrytype_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ATSymbol* default_instance_;
};
// -------------------------------------------------------------------

class ATPrice : public ::google::protobuf::Message {
 public:
  ATPrice();
  virtual ~ATPrice();

  ATPrice(const ATPrice& from);

  inline ATPrice& operator=(const ATPrice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ATPrice& default_instance();

  void Swap(ATPrice* other);

  // implements Message ----------------------------------------------

  ATPrice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ATPrice& from);
  void MergeFrom(const ATPrice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double price = 1;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 1;
  inline double price() const;
  inline void set_price(double value);

  // required int32 precision = 2;
  inline bool has_precision() const;
  inline void clear_precision();
  static const int kPrecisionFieldNumber = 2;
  inline ::google::protobuf::int32 precision() const;
  inline void set_precision(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NodeActiveTickProto.ATPrice)
 private:
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_precision();
  inline void clear_has_precision();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double price_;
  ::google::protobuf::int32 precision_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ATPrice* default_instance_;
};
// -------------------------------------------------------------------

class ATQuote : public ::google::protobuf::Message {
 public:
  ATQuote();
  virtual ~ATQuote();

  ATQuote(const ATQuote& from);

  inline ATQuote& operator=(const ATQuote& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ATQuote& default_instance();

  void Swap(ATQuote* other);

  // implements Message ----------------------------------------------

  ATQuote* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ATQuote& from);
  void MergeFrom(const ATQuote& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .NodeActiveTickProto.ATSymbol symbol = 1;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  inline const ::NodeActiveTickProto::ATSymbol& symbol() const;
  inline ::NodeActiveTickProto::ATSymbol* mutable_symbol();
  inline ::NodeActiveTickProto::ATSymbol* release_symbol();
  inline void set_allocated_symbol(::NodeActiveTickProto::ATSymbol* symbol);

  // required .NodeActiveTickProto.ATPrice bidPrice = 2;
  inline bool has_bidprice() const;
  inline void clear_bidprice();
  static const int kBidPriceFieldNumber = 2;
  inline const ::NodeActiveTickProto::ATPrice& bidprice() const;
  inline ::NodeActiveTickProto::ATPrice* mutable_bidprice();
  inline ::NodeActiveTickProto::ATPrice* release_bidprice();
  inline void set_allocated_bidprice(::NodeActiveTickProto::ATPrice* bidprice);

  // required .NodeActiveTickProto.ATPrice askPrice = 3;
  inline bool has_askprice() const;
  inline void clear_askprice();
  static const int kAskPriceFieldNumber = 3;
  inline const ::NodeActiveTickProto::ATPrice& askprice() const;
  inline ::NodeActiveTickProto::ATPrice* mutable_askprice();
  inline ::NodeActiveTickProto::ATPrice* release_askprice();
  inline void set_allocated_askprice(::NodeActiveTickProto::ATPrice* askprice);

  // optional int32 bidSize = 4;
  inline bool has_bidsize() const;
  inline void clear_bidsize();
  static const int kBidSizeFieldNumber = 4;
  inline ::google::protobuf::int32 bidsize() const;
  inline void set_bidsize(::google::protobuf::int32 value);

  // optional int32 askSize = 5;
  inline bool has_asksize() const;
  inline void clear_asksize();
  static const int kAskSizeFieldNumber = 5;
  inline ::google::protobuf::int32 asksize() const;
  inline void set_asksize(::google::protobuf::int32 value);

  // optional int32 quoteConditionId = 6;
  inline bool has_quoteconditionid() const;
  inline void clear_quoteconditionid();
  static const int kQuoteConditionIdFieldNumber = 6;
  inline ::google::protobuf::int32 quoteconditionid() const;
  inline void set_quoteconditionid(::google::protobuf::int32 value);

  // optional .NodeActiveTickProto.ATTime serverTime = 7;
  inline bool has_servertime() const;
  inline void clear_servertime();
  static const int kServerTimeFieldNumber = 7;
  inline const ::NodeActiveTickProto::ATTime& servertime() const;
  inline ::NodeActiveTickProto::ATTime* mutable_servertime();
  inline ::NodeActiveTickProto::ATTime* release_servertime();
  inline void set_allocated_servertime(::NodeActiveTickProto::ATTime* servertime);

  // optional int32 bidExchangeId = 8;
  inline bool has_bidexchangeid() const;
  inline void clear_bidexchangeid();
  static const int kBidExchangeIdFieldNumber = 8;
  inline ::google::protobuf::int32 bidexchangeid() const;
  inline void set_bidexchangeid(::google::protobuf::int32 value);

  // optional int32 askExchangeId = 9;
  inline bool has_askexchangeid() const;
  inline void clear_askexchangeid();
  static const int kAskExchangeIdFieldNumber = 9;
  inline ::google::protobuf::int32 askexchangeid() const;
  inline void set_askexchangeid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NodeActiveTickProto.ATQuote)
 private:
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_bidprice();
  inline void clear_has_bidprice();
  inline void set_has_askprice();
  inline void clear_has_askprice();
  inline void set_has_bidsize();
  inline void clear_has_bidsize();
  inline void set_has_asksize();
  inline void clear_has_asksize();
  inline void set_has_quoteconditionid();
  inline void clear_has_quoteconditionid();
  inline void set_has_servertime();
  inline void clear_has_servertime();
  inline void set_has_bidexchangeid();
  inline void clear_has_bidexchangeid();
  inline void set_has_askexchangeid();
  inline void clear_has_askexchangeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::NodeActiveTickProto::ATSymbol* symbol_;
  ::NodeActiveTickProto::ATPrice* bidprice_;
  ::NodeActiveTickProto::ATPrice* askprice_;
  ::google::protobuf::int32 bidsize_;
  ::google::protobuf::int32 asksize_;
  ::NodeActiveTickProto::ATTime* servertime_;
  ::google::protobuf::int32 quoteconditionid_;
  ::google::protobuf::int32 bidexchangeid_;
  ::google::protobuf::int32 askexchangeid_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ATQuote* default_instance_;
};
// ===================================================================


// ===================================================================

// ATLoginResponse

// required int32 loginResponseType = 1;
inline bool ATLoginResponse::has_loginresponsetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ATLoginResponse::set_has_loginresponsetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ATLoginResponse::clear_has_loginresponsetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ATLoginResponse::clear_loginresponsetype() {
  loginresponsetype_ = 0;
  clear_has_loginresponsetype();
}
inline ::google::protobuf::int32 ATLoginResponse::loginresponsetype() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATLoginResponse.loginResponseType)
  return loginresponsetype_;
}
inline void ATLoginResponse::set_loginresponsetype(::google::protobuf::int32 value) {
  set_has_loginresponsetype();
  loginresponsetype_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATLoginResponse.loginResponseType)
}

// required string loginResponseString = 2;
inline bool ATLoginResponse::has_loginresponsestring() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ATLoginResponse::set_has_loginresponsestring() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ATLoginResponse::clear_has_loginresponsestring() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ATLoginResponse::clear_loginresponsestring() {
  if (loginresponsestring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginresponsestring_->clear();
  }
  clear_has_loginresponsestring();
}
inline const ::std::string& ATLoginResponse::loginresponsestring() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATLoginResponse.loginResponseString)
  return *loginresponsestring_;
}
inline void ATLoginResponse::set_loginresponsestring(const ::std::string& value) {
  set_has_loginresponsestring();
  if (loginresponsestring_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginresponsestring_ = new ::std::string;
  }
  loginresponsestring_->assign(value);
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATLoginResponse.loginResponseString)
}
inline void ATLoginResponse::set_loginresponsestring(const char* value) {
  set_has_loginresponsestring();
  if (loginresponsestring_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginresponsestring_ = new ::std::string;
  }
  loginresponsestring_->assign(value);
  // @@protoc_insertion_point(field_set_char:NodeActiveTickProto.ATLoginResponse.loginResponseString)
}
inline void ATLoginResponse::set_loginresponsestring(const char* value, size_t size) {
  set_has_loginresponsestring();
  if (loginresponsestring_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginresponsestring_ = new ::std::string;
  }
  loginresponsestring_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NodeActiveTickProto.ATLoginResponse.loginResponseString)
}
inline ::std::string* ATLoginResponse::mutable_loginresponsestring() {
  set_has_loginresponsestring();
  if (loginresponsestring_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginresponsestring_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATLoginResponse.loginResponseString)
  return loginresponsestring_;
}
inline ::std::string* ATLoginResponse::release_loginresponsestring() {
  clear_has_loginresponsestring();
  if (loginresponsestring_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = loginresponsestring_;
    loginresponsestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ATLoginResponse::set_allocated_loginresponsestring(::std::string* loginresponsestring) {
  if (loginresponsestring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loginresponsestring_;
  }
  if (loginresponsestring) {
    set_has_loginresponsestring();
    loginresponsestring_ = loginresponsestring;
  } else {
    clear_has_loginresponsestring();
    loginresponsestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATLoginResponse.loginResponseString)
}

// -------------------------------------------------------------------

// ATConstituentResponse

// repeated .NodeActiveTickProto.ATSymbol symbols = 1;
inline int ATConstituentResponse::symbols_size() const {
  return symbols_.size();
}
inline void ATConstituentResponse::clear_symbols() {
  symbols_.Clear();
}
inline const ::NodeActiveTickProto::ATSymbol& ATConstituentResponse::symbols(int index) const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATConstituentResponse.symbols)
  return symbols_.Get(index);
}
inline ::NodeActiveTickProto::ATSymbol* ATConstituentResponse::mutable_symbols(int index) {
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATConstituentResponse.symbols)
  return symbols_.Mutable(index);
}
inline ::NodeActiveTickProto::ATSymbol* ATConstituentResponse::add_symbols() {
  // @@protoc_insertion_point(field_add:NodeActiveTickProto.ATConstituentResponse.symbols)
  return symbols_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATSymbol >&
ATConstituentResponse::symbols() const {
  // @@protoc_insertion_point(field_list:NodeActiveTickProto.ATConstituentResponse.symbols)
  return symbols_;
}
inline ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATSymbol >*
ATConstituentResponse::mutable_symbols() {
  // @@protoc_insertion_point(field_mutable_list:NodeActiveTickProto.ATConstituentResponse.symbols)
  return &symbols_;
}

// -------------------------------------------------------------------

// ATQuoteStreamResponse

// optional string quoteStreamResponseType = 1;
inline bool ATQuoteStreamResponse::has_quotestreamresponsetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ATQuoteStreamResponse::set_has_quotestreamresponsetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ATQuoteStreamResponse::clear_has_quotestreamresponsetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ATQuoteStreamResponse::clear_quotestreamresponsetype() {
  if (quotestreamresponsetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quotestreamresponsetype_->clear();
  }
  clear_has_quotestreamresponsetype();
}
inline const ::std::string& ATQuoteStreamResponse::quotestreamresponsetype() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamResponse.quoteStreamResponseType)
  return *quotestreamresponsetype_;
}
inline void ATQuoteStreamResponse::set_quotestreamresponsetype(const ::std::string& value) {
  set_has_quotestreamresponsetype();
  if (quotestreamresponsetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quotestreamresponsetype_ = new ::std::string;
  }
  quotestreamresponsetype_->assign(value);
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamResponse.quoteStreamResponseType)
}
inline void ATQuoteStreamResponse::set_quotestreamresponsetype(const char* value) {
  set_has_quotestreamresponsetype();
  if (quotestreamresponsetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quotestreamresponsetype_ = new ::std::string;
  }
  quotestreamresponsetype_->assign(value);
  // @@protoc_insertion_point(field_set_char:NodeActiveTickProto.ATQuoteStreamResponse.quoteStreamResponseType)
}
inline void ATQuoteStreamResponse::set_quotestreamresponsetype(const char* value, size_t size) {
  set_has_quotestreamresponsetype();
  if (quotestreamresponsetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quotestreamresponsetype_ = new ::std::string;
  }
  quotestreamresponsetype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NodeActiveTickProto.ATQuoteStreamResponse.quoteStreamResponseType)
}
inline ::std::string* ATQuoteStreamResponse::mutable_quotestreamresponsetype() {
  set_has_quotestreamresponsetype();
  if (quotestreamresponsetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quotestreamresponsetype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamResponse.quoteStreamResponseType)
  return quotestreamresponsetype_;
}
inline ::std::string* ATQuoteStreamResponse::release_quotestreamresponsetype() {
  clear_has_quotestreamresponsetype();
  if (quotestreamresponsetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = quotestreamresponsetype_;
    quotestreamresponsetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ATQuoteStreamResponse::set_allocated_quotestreamresponsetype(::std::string* quotestreamresponsetype) {
  if (quotestreamresponsetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete quotestreamresponsetype_;
  }
  if (quotestreamresponsetype) {
    set_has_quotestreamresponsetype();
    quotestreamresponsetype_ = quotestreamresponsetype;
  } else {
    clear_has_quotestreamresponsetype();
    quotestreamresponsetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamResponse.quoteStreamResponseType)
}

// optional int32 quoteResponseCount = 2;
inline bool ATQuoteStreamResponse::has_quoteresponsecount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ATQuoteStreamResponse::set_has_quoteresponsecount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ATQuoteStreamResponse::clear_has_quoteresponsecount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ATQuoteStreamResponse::clear_quoteresponsecount() {
  quoteresponsecount_ = 0;
  clear_has_quoteresponsecount();
}
inline ::google::protobuf::int32 ATQuoteStreamResponse::quoteresponsecount() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamResponse.quoteResponseCount)
  return quoteresponsecount_;
}
inline void ATQuoteStreamResponse::set_quoteresponsecount(::google::protobuf::int32 value) {
  set_has_quoteresponsecount();
  quoteresponsecount_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamResponse.quoteResponseCount)
}

// repeated .NodeActiveTickProto.ATQuoteStreamResponseItem quoteStreamItems = 3;
inline int ATQuoteStreamResponse::quotestreamitems_size() const {
  return quotestreamitems_.size();
}
inline void ATQuoteStreamResponse::clear_quotestreamitems() {
  quotestreamitems_.Clear();
}
inline const ::NodeActiveTickProto::ATQuoteStreamResponseItem& ATQuoteStreamResponse::quotestreamitems(int index) const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamResponse.quoteStreamItems)
  return quotestreamitems_.Get(index);
}
inline ::NodeActiveTickProto::ATQuoteStreamResponseItem* ATQuoteStreamResponse::mutable_quotestreamitems(int index) {
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamResponse.quoteStreamItems)
  return quotestreamitems_.Mutable(index);
}
inline ::NodeActiveTickProto::ATQuoteStreamResponseItem* ATQuoteStreamResponse::add_quotestreamitems() {
  // @@protoc_insertion_point(field_add:NodeActiveTickProto.ATQuoteStreamResponse.quoteStreamItems)
  return quotestreamitems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATQuoteStreamResponseItem >&
ATQuoteStreamResponse::quotestreamitems() const {
  // @@protoc_insertion_point(field_list:NodeActiveTickProto.ATQuoteStreamResponse.quoteStreamItems)
  return quotestreamitems_;
}
inline ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATQuoteStreamResponseItem >*
ATQuoteStreamResponse::mutable_quotestreamitems() {
  // @@protoc_insertion_point(field_mutable_list:NodeActiveTickProto.ATQuoteStreamResponse.quoteStreamItems)
  return &quotestreamitems_;
}

// -------------------------------------------------------------------

// ATQuoteStreamResponseItem

// optional string responseType = 1;
inline bool ATQuoteStreamResponseItem::has_responsetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ATQuoteStreamResponseItem::set_has_responsetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ATQuoteStreamResponseItem::clear_has_responsetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ATQuoteStreamResponseItem::clear_responsetype() {
  if (responsetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    responsetype_->clear();
  }
  clear_has_responsetype();
}
inline const ::std::string& ATQuoteStreamResponseItem::responsetype() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamResponseItem.responseType)
  return *responsetype_;
}
inline void ATQuoteStreamResponseItem::set_responsetype(const ::std::string& value) {
  set_has_responsetype();
  if (responsetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    responsetype_ = new ::std::string;
  }
  responsetype_->assign(value);
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamResponseItem.responseType)
}
inline void ATQuoteStreamResponseItem::set_responsetype(const char* value) {
  set_has_responsetype();
  if (responsetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    responsetype_ = new ::std::string;
  }
  responsetype_->assign(value);
  // @@protoc_insertion_point(field_set_char:NodeActiveTickProto.ATQuoteStreamResponseItem.responseType)
}
inline void ATQuoteStreamResponseItem::set_responsetype(const char* value, size_t size) {
  set_has_responsetype();
  if (responsetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    responsetype_ = new ::std::string;
  }
  responsetype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NodeActiveTickProto.ATQuoteStreamResponseItem.responseType)
}
inline ::std::string* ATQuoteStreamResponseItem::mutable_responsetype() {
  set_has_responsetype();
  if (responsetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    responsetype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamResponseItem.responseType)
  return responsetype_;
}
inline ::std::string* ATQuoteStreamResponseItem::release_responsetype() {
  clear_has_responsetype();
  if (responsetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = responsetype_;
    responsetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ATQuoteStreamResponseItem::set_allocated_responsetype(::std::string* responsetype) {
  if (responsetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete responsetype_;
  }
  if (responsetype) {
    set_has_responsetype();
    responsetype_ = responsetype;
  } else {
    clear_has_responsetype();
    responsetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamResponseItem.responseType)
}

// optional .NodeActiveTickProto.ATSymbol symbol = 2;
inline bool ATQuoteStreamResponseItem::has_symbol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ATQuoteStreamResponseItem::set_has_symbol() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ATQuoteStreamResponseItem::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ATQuoteStreamResponseItem::clear_symbol() {
  if (symbol_ != NULL) symbol_->::NodeActiveTickProto::ATSymbol::Clear();
  clear_has_symbol();
}
inline const ::NodeActiveTickProto::ATSymbol& ATQuoteStreamResponseItem::symbol() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamResponseItem.symbol)
  return symbol_ != NULL ? *symbol_ : *default_instance_->symbol_;
}
inline ::NodeActiveTickProto::ATSymbol* ATQuoteStreamResponseItem::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == NULL) symbol_ = new ::NodeActiveTickProto::ATSymbol;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamResponseItem.symbol)
  return symbol_;
}
inline ::NodeActiveTickProto::ATSymbol* ATQuoteStreamResponseItem::release_symbol() {
  clear_has_symbol();
  ::NodeActiveTickProto::ATSymbol* temp = symbol_;
  symbol_ = NULL;
  return temp;
}
inline void ATQuoteStreamResponseItem::set_allocated_symbol(::NodeActiveTickProto::ATSymbol* symbol) {
  delete symbol_;
  symbol_ = symbol;
  if (symbol) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamResponseItem.symbol)
}

// optional string symbolStatus = 3;
inline bool ATQuoteStreamResponseItem::has_symbolstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ATQuoteStreamResponseItem::set_has_symbolstatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ATQuoteStreamResponseItem::clear_has_symbolstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ATQuoteStreamResponseItem::clear_symbolstatus() {
  if (symbolstatus_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbolstatus_->clear();
  }
  clear_has_symbolstatus();
}
inline const ::std::string& ATQuoteStreamResponseItem::symbolstatus() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamResponseItem.symbolStatus)
  return *symbolstatus_;
}
inline void ATQuoteStreamResponseItem::set_symbolstatus(const ::std::string& value) {
  set_has_symbolstatus();
  if (symbolstatus_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbolstatus_ = new ::std::string;
  }
  symbolstatus_->assign(value);
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamResponseItem.symbolStatus)
}
inline void ATQuoteStreamResponseItem::set_symbolstatus(const char* value) {
  set_has_symbolstatus();
  if (symbolstatus_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbolstatus_ = new ::std::string;
  }
  symbolstatus_->assign(value);
  // @@protoc_insertion_point(field_set_char:NodeActiveTickProto.ATQuoteStreamResponseItem.symbolStatus)
}
inline void ATQuoteStreamResponseItem::set_symbolstatus(const char* value, size_t size) {
  set_has_symbolstatus();
  if (symbolstatus_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbolstatus_ = new ::std::string;
  }
  symbolstatus_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NodeActiveTickProto.ATQuoteStreamResponseItem.symbolStatus)
}
inline ::std::string* ATQuoteStreamResponseItem::mutable_symbolstatus() {
  set_has_symbolstatus();
  if (symbolstatus_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbolstatus_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamResponseItem.symbolStatus)
  return symbolstatus_;
}
inline ::std::string* ATQuoteStreamResponseItem::release_symbolstatus() {
  clear_has_symbolstatus();
  if (symbolstatus_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = symbolstatus_;
    symbolstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ATQuoteStreamResponseItem::set_allocated_symbolstatus(::std::string* symbolstatus) {
  if (symbolstatus_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbolstatus_;
  }
  if (symbolstatus) {
    set_has_symbolstatus();
    symbolstatus_ = symbolstatus;
  } else {
    clear_has_symbolstatus();
    symbolstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamResponseItem.symbolStatus)
}

// -------------------------------------------------------------------

// ATTime

// optional int32 year = 1;
inline bool ATTime::has_year() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ATTime::set_has_year() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ATTime::clear_has_year() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ATTime::clear_year() {
  year_ = 0;
  clear_has_year();
}
inline ::google::protobuf::int32 ATTime::year() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATTime.year)
  return year_;
}
inline void ATTime::set_year(::google::protobuf::int32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATTime.year)
}

// optional int32 month = 2;
inline bool ATTime::has_month() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ATTime::set_has_month() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ATTime::clear_has_month() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ATTime::clear_month() {
  month_ = 0;
  clear_has_month();
}
inline ::google::protobuf::int32 ATTime::month() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATTime.month)
  return month_;
}
inline void ATTime::set_month(::google::protobuf::int32 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATTime.month)
}

// optional int32 dayOfWeek = 3;
inline bool ATTime::has_dayofweek() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ATTime::set_has_dayofweek() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ATTime::clear_has_dayofweek() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ATTime::clear_dayofweek() {
  dayofweek_ = 0;
  clear_has_dayofweek();
}
inline ::google::protobuf::int32 ATTime::dayofweek() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATTime.dayOfWeek)
  return dayofweek_;
}
inline void ATTime::set_dayofweek(::google::protobuf::int32 value) {
  set_has_dayofweek();
  dayofweek_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATTime.dayOfWeek)
}

// optional int32 day = 4;
inline bool ATTime::has_day() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ATTime::set_has_day() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ATTime::clear_has_day() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ATTime::clear_day() {
  day_ = 0;
  clear_has_day();
}
inline ::google::protobuf::int32 ATTime::day() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATTime.day)
  return day_;
}
inline void ATTime::set_day(::google::protobuf::int32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATTime.day)
}

// optional int32 hour = 5;
inline bool ATTime::has_hour() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ATTime::set_has_hour() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ATTime::clear_has_hour() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ATTime::clear_hour() {
  hour_ = 0;
  clear_has_hour();
}
inline ::google::protobuf::int32 ATTime::hour() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATTime.hour)
  return hour_;
}
inline void ATTime::set_hour(::google::protobuf::int32 value) {
  set_has_hour();
  hour_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATTime.hour)
}

// optional int32 minute = 6;
inline bool ATTime::has_minute() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ATTime::set_has_minute() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ATTime::clear_has_minute() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ATTime::clear_minute() {
  minute_ = 0;
  clear_has_minute();
}
inline ::google::protobuf::int32 ATTime::minute() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATTime.minute)
  return minute_;
}
inline void ATTime::set_minute(::google::protobuf::int32 value) {
  set_has_minute();
  minute_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATTime.minute)
}

// optional int32 second = 7;
inline bool ATTime::has_second() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ATTime::set_has_second() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ATTime::clear_has_second() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ATTime::clear_second() {
  second_ = 0;
  clear_has_second();
}
inline ::google::protobuf::int32 ATTime::second() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATTime.second)
  return second_;
}
inline void ATTime::set_second(::google::protobuf::int32 value) {
  set_has_second();
  second_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATTime.second)
}

// optional int32 millisecond = 8;
inline bool ATTime::has_millisecond() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ATTime::set_has_millisecond() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ATTime::clear_has_millisecond() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ATTime::clear_millisecond() {
  millisecond_ = 0;
  clear_has_millisecond();
}
inline ::google::protobuf::int32 ATTime::millisecond() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATTime.millisecond)
  return millisecond_;
}
inline void ATTime::set_millisecond(::google::protobuf::int32 value) {
  set_has_millisecond();
  millisecond_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATTime.millisecond)
}

// -------------------------------------------------------------------

// ATQuoteStreamTradeUpdate

// optional .NodeActiveTickProto.ATSymbol tradeSymbol = 1;
inline bool ATQuoteStreamTradeUpdate::has_tradesymbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ATQuoteStreamTradeUpdate::set_has_tradesymbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ATQuoteStreamTradeUpdate::clear_has_tradesymbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ATQuoteStreamTradeUpdate::clear_tradesymbol() {
  if (tradesymbol_ != NULL) tradesymbol_->::NodeActiveTickProto::ATSymbol::Clear();
  clear_has_tradesymbol();
}
inline const ::NodeActiveTickProto::ATSymbol& ATQuoteStreamTradeUpdate::tradesymbol() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeSymbol)
  return tradesymbol_ != NULL ? *tradesymbol_ : *default_instance_->tradesymbol_;
}
inline ::NodeActiveTickProto::ATSymbol* ATQuoteStreamTradeUpdate::mutable_tradesymbol() {
  set_has_tradesymbol();
  if (tradesymbol_ == NULL) tradesymbol_ = new ::NodeActiveTickProto::ATSymbol;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeSymbol)
  return tradesymbol_;
}
inline ::NodeActiveTickProto::ATSymbol* ATQuoteStreamTradeUpdate::release_tradesymbol() {
  clear_has_tradesymbol();
  ::NodeActiveTickProto::ATSymbol* temp = tradesymbol_;
  tradesymbol_ = NULL;
  return temp;
}
inline void ATQuoteStreamTradeUpdate::set_allocated_tradesymbol(::NodeActiveTickProto::ATSymbol* tradesymbol) {
  delete tradesymbol_;
  tradesymbol_ = tradesymbol;
  if (tradesymbol) {
    set_has_tradesymbol();
  } else {
    clear_has_tradesymbol();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeSymbol)
}

// optional int32 tradeMessageFlags = 2;
inline bool ATQuoteStreamTradeUpdate::has_trademessageflags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ATQuoteStreamTradeUpdate::set_has_trademessageflags() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ATQuoteStreamTradeUpdate::clear_has_trademessageflags() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ATQuoteStreamTradeUpdate::clear_trademessageflags() {
  trademessageflags_ = 0;
  clear_has_trademessageflags();
}
inline ::google::protobuf::int32 ATQuoteStreamTradeUpdate::trademessageflags() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeMessageFlags)
  return trademessageflags_;
}
inline void ATQuoteStreamTradeUpdate::set_trademessageflags(::google::protobuf::int32 value) {
  set_has_trademessageflags();
  trademessageflags_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeMessageFlags)
}

// repeated string tradeConditionType = 3;
inline int ATQuoteStreamTradeUpdate::tradeconditiontype_size() const {
  return tradeconditiontype_.size();
}
inline void ATQuoteStreamTradeUpdate::clear_tradeconditiontype() {
  tradeconditiontype_.Clear();
}
inline const ::std::string& ATQuoteStreamTradeUpdate::tradeconditiontype(int index) const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeConditionType)
  return tradeconditiontype_.Get(index);
}
inline ::std::string* ATQuoteStreamTradeUpdate::mutable_tradeconditiontype(int index) {
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeConditionType)
  return tradeconditiontype_.Mutable(index);
}
inline void ATQuoteStreamTradeUpdate::set_tradeconditiontype(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeConditionType)
  tradeconditiontype_.Mutable(index)->assign(value);
}
inline void ATQuoteStreamTradeUpdate::set_tradeconditiontype(int index, const char* value) {
  tradeconditiontype_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeConditionType)
}
inline void ATQuoteStreamTradeUpdate::set_tradeconditiontype(int index, const char* value, size_t size) {
  tradeconditiontype_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeConditionType)
}
inline ::std::string* ATQuoteStreamTradeUpdate::add_tradeconditiontype() {
  return tradeconditiontype_.Add();
}
inline void ATQuoteStreamTradeUpdate::add_tradeconditiontype(const ::std::string& value) {
  tradeconditiontype_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeConditionType)
}
inline void ATQuoteStreamTradeUpdate::add_tradeconditiontype(const char* value) {
  tradeconditiontype_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeConditionType)
}
inline void ATQuoteStreamTradeUpdate::add_tradeconditiontype(const char* value, size_t size) {
  tradeconditiontype_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeConditionType)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ATQuoteStreamTradeUpdate::tradeconditiontype() const {
  // @@protoc_insertion_point(field_list:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeConditionType)
  return tradeconditiontype_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ATQuoteStreamTradeUpdate::mutable_tradeconditiontype() {
  // @@protoc_insertion_point(field_mutable_list:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeConditionType)
  return &tradeconditiontype_;
}

// optional string tradeExchange = 4;
inline bool ATQuoteStreamTradeUpdate::has_tradeexchange() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ATQuoteStreamTradeUpdate::set_has_tradeexchange() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ATQuoteStreamTradeUpdate::clear_has_tradeexchange() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ATQuoteStreamTradeUpdate::clear_tradeexchange() {
  if (tradeexchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tradeexchange_->clear();
  }
  clear_has_tradeexchange();
}
inline const ::std::string& ATQuoteStreamTradeUpdate::tradeexchange() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeExchange)
  return *tradeexchange_;
}
inline void ATQuoteStreamTradeUpdate::set_tradeexchange(const ::std::string& value) {
  set_has_tradeexchange();
  if (tradeexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tradeexchange_ = new ::std::string;
  }
  tradeexchange_->assign(value);
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeExchange)
}
inline void ATQuoteStreamTradeUpdate::set_tradeexchange(const char* value) {
  set_has_tradeexchange();
  if (tradeexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tradeexchange_ = new ::std::string;
  }
  tradeexchange_->assign(value);
  // @@protoc_insertion_point(field_set_char:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeExchange)
}
inline void ATQuoteStreamTradeUpdate::set_tradeexchange(const char* value, size_t size) {
  set_has_tradeexchange();
  if (tradeexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tradeexchange_ = new ::std::string;
  }
  tradeexchange_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeExchange)
}
inline ::std::string* ATQuoteStreamTradeUpdate::mutable_tradeexchange() {
  set_has_tradeexchange();
  if (tradeexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tradeexchange_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeExchange)
  return tradeexchange_;
}
inline ::std::string* ATQuoteStreamTradeUpdate::release_tradeexchange() {
  clear_has_tradeexchange();
  if (tradeexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tradeexchange_;
    tradeexchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ATQuoteStreamTradeUpdate::set_allocated_tradeexchange(::std::string* tradeexchange) {
  if (tradeexchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tradeexchange_;
  }
  if (tradeexchange) {
    set_has_tradeexchange();
    tradeexchange_ = tradeexchange;
  } else {
    clear_has_tradeexchange();
    tradeexchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeExchange)
}

// optional .NodeActiveTickProto.ATPrice tradePrice = 5;
inline bool ATQuoteStreamTradeUpdate::has_tradeprice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ATQuoteStreamTradeUpdate::set_has_tradeprice() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ATQuoteStreamTradeUpdate::clear_has_tradeprice() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ATQuoteStreamTradeUpdate::clear_tradeprice() {
  if (tradeprice_ != NULL) tradeprice_->::NodeActiveTickProto::ATPrice::Clear();
  clear_has_tradeprice();
}
inline const ::NodeActiveTickProto::ATPrice& ATQuoteStreamTradeUpdate::tradeprice() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradePrice)
  return tradeprice_ != NULL ? *tradeprice_ : *default_instance_->tradeprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamTradeUpdate::mutable_tradeprice() {
  set_has_tradeprice();
  if (tradeprice_ == NULL) tradeprice_ = new ::NodeActiveTickProto::ATPrice;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradePrice)
  return tradeprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamTradeUpdate::release_tradeprice() {
  clear_has_tradeprice();
  ::NodeActiveTickProto::ATPrice* temp = tradeprice_;
  tradeprice_ = NULL;
  return temp;
}
inline void ATQuoteStreamTradeUpdate::set_allocated_tradeprice(::NodeActiveTickProto::ATPrice* tradeprice) {
  delete tradeprice_;
  tradeprice_ = tradeprice;
  if (tradeprice) {
    set_has_tradeprice();
  } else {
    clear_has_tradeprice();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradePrice)
}

// optional int32 tradeSize = 6;
inline bool ATQuoteStreamTradeUpdate::has_tradesize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ATQuoteStreamTradeUpdate::set_has_tradesize() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ATQuoteStreamTradeUpdate::clear_has_tradesize() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ATQuoteStreamTradeUpdate::clear_tradesize() {
  tradesize_ = 0;
  clear_has_tradesize();
}
inline ::google::protobuf::int32 ATQuoteStreamTradeUpdate::tradesize() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeSize)
  return tradesize_;
}
inline void ATQuoteStreamTradeUpdate::set_tradesize(::google::protobuf::int32 value) {
  set_has_tradesize();
  tradesize_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeSize)
}

// optional .NodeActiveTickProto.ATTime tradeTime = 7;
inline bool ATQuoteStreamTradeUpdate::has_tradetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ATQuoteStreamTradeUpdate::set_has_tradetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ATQuoteStreamTradeUpdate::clear_has_tradetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ATQuoteStreamTradeUpdate::clear_tradetime() {
  if (tradetime_ != NULL) tradetime_->::NodeActiveTickProto::ATTime::Clear();
  clear_has_tradetime();
}
inline const ::NodeActiveTickProto::ATTime& ATQuoteStreamTradeUpdate::tradetime() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeTime)
  return tradetime_ != NULL ? *tradetime_ : *default_instance_->tradetime_;
}
inline ::NodeActiveTickProto::ATTime* ATQuoteStreamTradeUpdate::mutable_tradetime() {
  set_has_tradetime();
  if (tradetime_ == NULL) tradetime_ = new ::NodeActiveTickProto::ATTime;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeTime)
  return tradetime_;
}
inline ::NodeActiveTickProto::ATTime* ATQuoteStreamTradeUpdate::release_tradetime() {
  clear_has_tradetime();
  ::NodeActiveTickProto::ATTime* temp = tradetime_;
  tradetime_ = NULL;
  return temp;
}
inline void ATQuoteStreamTradeUpdate::set_allocated_tradetime(::NodeActiveTickProto::ATTime* tradetime) {
  delete tradetime_;
  tradetime_ = tradetime;
  if (tradetime) {
    set_has_tradetime();
  } else {
    clear_has_tradetime();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeTime)
}

// -------------------------------------------------------------------

// ATQuoteStreamQuoteUpdate

// optional .NodeActiveTickProto.ATSymbol quoteSymbol = 1;
inline bool ATQuoteStreamQuoteUpdate::has_quotesymbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ATQuoteStreamQuoteUpdate::set_has_quotesymbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ATQuoteStreamQuoteUpdate::clear_has_quotesymbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ATQuoteStreamQuoteUpdate::clear_quotesymbol() {
  if (quotesymbol_ != NULL) quotesymbol_->::NodeActiveTickProto::ATSymbol::Clear();
  clear_has_quotesymbol();
}
inline const ::NodeActiveTickProto::ATSymbol& ATQuoteStreamQuoteUpdate::quotesymbol() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteSymbol)
  return quotesymbol_ != NULL ? *quotesymbol_ : *default_instance_->quotesymbol_;
}
inline ::NodeActiveTickProto::ATSymbol* ATQuoteStreamQuoteUpdate::mutable_quotesymbol() {
  set_has_quotesymbol();
  if (quotesymbol_ == NULL) quotesymbol_ = new ::NodeActiveTickProto::ATSymbol;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteSymbol)
  return quotesymbol_;
}
inline ::NodeActiveTickProto::ATSymbol* ATQuoteStreamQuoteUpdate::release_quotesymbol() {
  clear_has_quotesymbol();
  ::NodeActiveTickProto::ATSymbol* temp = quotesymbol_;
  quotesymbol_ = NULL;
  return temp;
}
inline void ATQuoteStreamQuoteUpdate::set_allocated_quotesymbol(::NodeActiveTickProto::ATSymbol* quotesymbol) {
  delete quotesymbol_;
  quotesymbol_ = quotesymbol;
  if (quotesymbol) {
    set_has_quotesymbol();
  } else {
    clear_has_quotesymbol();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteSymbol)
}

// optional int32 quoteCondition = 2;
inline bool ATQuoteStreamQuoteUpdate::has_quotecondition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ATQuoteStreamQuoteUpdate::set_has_quotecondition() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ATQuoteStreamQuoteUpdate::clear_has_quotecondition() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ATQuoteStreamQuoteUpdate::clear_quotecondition() {
  quotecondition_ = 0;
  clear_has_quotecondition();
}
inline ::google::protobuf::int32 ATQuoteStreamQuoteUpdate::quotecondition() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteCondition)
  return quotecondition_;
}
inline void ATQuoteStreamQuoteUpdate::set_quotecondition(::google::protobuf::int32 value) {
  set_has_quotecondition();
  quotecondition_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteCondition)
}

// optional string quoteBidExchange = 3;
inline bool ATQuoteStreamQuoteUpdate::has_quotebidexchange() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ATQuoteStreamQuoteUpdate::set_has_quotebidexchange() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ATQuoteStreamQuoteUpdate::clear_has_quotebidexchange() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ATQuoteStreamQuoteUpdate::clear_quotebidexchange() {
  if (quotebidexchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quotebidexchange_->clear();
  }
  clear_has_quotebidexchange();
}
inline const ::std::string& ATQuoteStreamQuoteUpdate::quotebidexchange() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteBidExchange)
  return *quotebidexchange_;
}
inline void ATQuoteStreamQuoteUpdate::set_quotebidexchange(const ::std::string& value) {
  set_has_quotebidexchange();
  if (quotebidexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quotebidexchange_ = new ::std::string;
  }
  quotebidexchange_->assign(value);
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteBidExchange)
}
inline void ATQuoteStreamQuoteUpdate::set_quotebidexchange(const char* value) {
  set_has_quotebidexchange();
  if (quotebidexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quotebidexchange_ = new ::std::string;
  }
  quotebidexchange_->assign(value);
  // @@protoc_insertion_point(field_set_char:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteBidExchange)
}
inline void ATQuoteStreamQuoteUpdate::set_quotebidexchange(const char* value, size_t size) {
  set_has_quotebidexchange();
  if (quotebidexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quotebidexchange_ = new ::std::string;
  }
  quotebidexchange_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteBidExchange)
}
inline ::std::string* ATQuoteStreamQuoteUpdate::mutable_quotebidexchange() {
  set_has_quotebidexchange();
  if (quotebidexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quotebidexchange_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteBidExchange)
  return quotebidexchange_;
}
inline ::std::string* ATQuoteStreamQuoteUpdate::release_quotebidexchange() {
  clear_has_quotebidexchange();
  if (quotebidexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = quotebidexchange_;
    quotebidexchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ATQuoteStreamQuoteUpdate::set_allocated_quotebidexchange(::std::string* quotebidexchange) {
  if (quotebidexchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete quotebidexchange_;
  }
  if (quotebidexchange) {
    set_has_quotebidexchange();
    quotebidexchange_ = quotebidexchange;
  } else {
    clear_has_quotebidexchange();
    quotebidexchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteBidExchange)
}

// optional string quoteAskExchange = 4;
inline bool ATQuoteStreamQuoteUpdate::has_quoteaskexchange() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ATQuoteStreamQuoteUpdate::set_has_quoteaskexchange() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ATQuoteStreamQuoteUpdate::clear_has_quoteaskexchange() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ATQuoteStreamQuoteUpdate::clear_quoteaskexchange() {
  if (quoteaskexchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quoteaskexchange_->clear();
  }
  clear_has_quoteaskexchange();
}
inline const ::std::string& ATQuoteStreamQuoteUpdate::quoteaskexchange() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteAskExchange)
  return *quoteaskexchange_;
}
inline void ATQuoteStreamQuoteUpdate::set_quoteaskexchange(const ::std::string& value) {
  set_has_quoteaskexchange();
  if (quoteaskexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quoteaskexchange_ = new ::std::string;
  }
  quoteaskexchange_->assign(value);
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteAskExchange)
}
inline void ATQuoteStreamQuoteUpdate::set_quoteaskexchange(const char* value) {
  set_has_quoteaskexchange();
  if (quoteaskexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quoteaskexchange_ = new ::std::string;
  }
  quoteaskexchange_->assign(value);
  // @@protoc_insertion_point(field_set_char:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteAskExchange)
}
inline void ATQuoteStreamQuoteUpdate::set_quoteaskexchange(const char* value, size_t size) {
  set_has_quoteaskexchange();
  if (quoteaskexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quoteaskexchange_ = new ::std::string;
  }
  quoteaskexchange_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteAskExchange)
}
inline ::std::string* ATQuoteStreamQuoteUpdate::mutable_quoteaskexchange() {
  set_has_quoteaskexchange();
  if (quoteaskexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quoteaskexchange_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteAskExchange)
  return quoteaskexchange_;
}
inline ::std::string* ATQuoteStreamQuoteUpdate::release_quoteaskexchange() {
  clear_has_quoteaskexchange();
  if (quoteaskexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = quoteaskexchange_;
    quoteaskexchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ATQuoteStreamQuoteUpdate::set_allocated_quoteaskexchange(::std::string* quoteaskexchange) {
  if (quoteaskexchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete quoteaskexchange_;
  }
  if (quoteaskexchange) {
    set_has_quoteaskexchange();
    quoteaskexchange_ = quoteaskexchange;
  } else {
    clear_has_quoteaskexchange();
    quoteaskexchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteAskExchange)
}

// optional .NodeActiveTickProto.ATPrice quoteBidPrice = 5;
inline bool ATQuoteStreamQuoteUpdate::has_quotebidprice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ATQuoteStreamQuoteUpdate::set_has_quotebidprice() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ATQuoteStreamQuoteUpdate::clear_has_quotebidprice() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ATQuoteStreamQuoteUpdate::clear_quotebidprice() {
  if (quotebidprice_ != NULL) quotebidprice_->::NodeActiveTickProto::ATPrice::Clear();
  clear_has_quotebidprice();
}
inline const ::NodeActiveTickProto::ATPrice& ATQuoteStreamQuoteUpdate::quotebidprice() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteBidPrice)
  return quotebidprice_ != NULL ? *quotebidprice_ : *default_instance_->quotebidprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamQuoteUpdate::mutable_quotebidprice() {
  set_has_quotebidprice();
  if (quotebidprice_ == NULL) quotebidprice_ = new ::NodeActiveTickProto::ATPrice;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteBidPrice)
  return quotebidprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamQuoteUpdate::release_quotebidprice() {
  clear_has_quotebidprice();
  ::NodeActiveTickProto::ATPrice* temp = quotebidprice_;
  quotebidprice_ = NULL;
  return temp;
}
inline void ATQuoteStreamQuoteUpdate::set_allocated_quotebidprice(::NodeActiveTickProto::ATPrice* quotebidprice) {
  delete quotebidprice_;
  quotebidprice_ = quotebidprice;
  if (quotebidprice) {
    set_has_quotebidprice();
  } else {
    clear_has_quotebidprice();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteBidPrice)
}

// optional .NodeActiveTickProto.ATPrice quoteAskPrice = 6;
inline bool ATQuoteStreamQuoteUpdate::has_quoteaskprice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ATQuoteStreamQuoteUpdate::set_has_quoteaskprice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ATQuoteStreamQuoteUpdate::clear_has_quoteaskprice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ATQuoteStreamQuoteUpdate::clear_quoteaskprice() {
  if (quoteaskprice_ != NULL) quoteaskprice_->::NodeActiveTickProto::ATPrice::Clear();
  clear_has_quoteaskprice();
}
inline const ::NodeActiveTickProto::ATPrice& ATQuoteStreamQuoteUpdate::quoteaskprice() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteAskPrice)
  return quoteaskprice_ != NULL ? *quoteaskprice_ : *default_instance_->quoteaskprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamQuoteUpdate::mutable_quoteaskprice() {
  set_has_quoteaskprice();
  if (quoteaskprice_ == NULL) quoteaskprice_ = new ::NodeActiveTickProto::ATPrice;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteAskPrice)
  return quoteaskprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamQuoteUpdate::release_quoteaskprice() {
  clear_has_quoteaskprice();
  ::NodeActiveTickProto::ATPrice* temp = quoteaskprice_;
  quoteaskprice_ = NULL;
  return temp;
}
inline void ATQuoteStreamQuoteUpdate::set_allocated_quoteaskprice(::NodeActiveTickProto::ATPrice* quoteaskprice) {
  delete quoteaskprice_;
  quoteaskprice_ = quoteaskprice;
  if (quoteaskprice) {
    set_has_quoteaskprice();
  } else {
    clear_has_quoteaskprice();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteAskPrice)
}

// optional int32 quoteBidSize = 7;
inline bool ATQuoteStreamQuoteUpdate::has_quotebidsize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ATQuoteStreamQuoteUpdate::set_has_quotebidsize() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ATQuoteStreamQuoteUpdate::clear_has_quotebidsize() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ATQuoteStreamQuoteUpdate::clear_quotebidsize() {
  quotebidsize_ = 0;
  clear_has_quotebidsize();
}
inline ::google::protobuf::int32 ATQuoteStreamQuoteUpdate::quotebidsize() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteBidSize)
  return quotebidsize_;
}
inline void ATQuoteStreamQuoteUpdate::set_quotebidsize(::google::protobuf::int32 value) {
  set_has_quotebidsize();
  quotebidsize_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteBidSize)
}

// optional int32 quoteAskSize = 8;
inline bool ATQuoteStreamQuoteUpdate::has_quoteasksize() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ATQuoteStreamQuoteUpdate::set_has_quoteasksize() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ATQuoteStreamQuoteUpdate::clear_has_quoteasksize() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ATQuoteStreamQuoteUpdate::clear_quoteasksize() {
  quoteasksize_ = 0;
  clear_has_quoteasksize();
}
inline ::google::protobuf::int32 ATQuoteStreamQuoteUpdate::quoteasksize() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteAskSize)
  return quoteasksize_;
}
inline void ATQuoteStreamQuoteUpdate::set_quoteasksize(::google::protobuf::int32 value) {
  set_has_quoteasksize();
  quoteasksize_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteAskSize)
}

// optional .NodeActiveTickProto.ATTime quoteTime = 9;
inline bool ATQuoteStreamQuoteUpdate::has_quotetime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ATQuoteStreamQuoteUpdate::set_has_quotetime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ATQuoteStreamQuoteUpdate::clear_has_quotetime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ATQuoteStreamQuoteUpdate::clear_quotetime() {
  if (quotetime_ != NULL) quotetime_->::NodeActiveTickProto::ATTime::Clear();
  clear_has_quotetime();
}
inline const ::NodeActiveTickProto::ATTime& ATQuoteStreamQuoteUpdate::quotetime() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteTime)
  return quotetime_ != NULL ? *quotetime_ : *default_instance_->quotetime_;
}
inline ::NodeActiveTickProto::ATTime* ATQuoteStreamQuoteUpdate::mutable_quotetime() {
  set_has_quotetime();
  if (quotetime_ == NULL) quotetime_ = new ::NodeActiveTickProto::ATTime;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteTime)
  return quotetime_;
}
inline ::NodeActiveTickProto::ATTime* ATQuoteStreamQuoteUpdate::release_quotetime() {
  clear_has_quotetime();
  ::NodeActiveTickProto::ATTime* temp = quotetime_;
  quotetime_ = NULL;
  return temp;
}
inline void ATQuoteStreamQuoteUpdate::set_allocated_quotetime(::NodeActiveTickProto::ATTime* quotetime) {
  delete quotetime_;
  quotetime_ = quotetime;
  if (quotetime) {
    set_has_quotetime();
  } else {
    clear_has_quotetime();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteTime)
}

// -------------------------------------------------------------------

// ATQuoteStreamRefreshUpdate

// optional .NodeActiveTickProto.ATSymbol refreshSymbol = 1;
inline bool ATQuoteStreamRefreshUpdate::has_refreshsymbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ATQuoteStreamRefreshUpdate::set_has_refreshsymbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ATQuoteStreamRefreshUpdate::clear_has_refreshsymbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ATQuoteStreamRefreshUpdate::clear_refreshsymbol() {
  if (refreshsymbol_ != NULL) refreshsymbol_->::NodeActiveTickProto::ATSymbol::Clear();
  clear_has_refreshsymbol();
}
inline const ::NodeActiveTickProto::ATSymbol& ATQuoteStreamRefreshUpdate::refreshsymbol() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.refreshSymbol)
  return refreshsymbol_ != NULL ? *refreshsymbol_ : *default_instance_->refreshsymbol_;
}
inline ::NodeActiveTickProto::ATSymbol* ATQuoteStreamRefreshUpdate::mutable_refreshsymbol() {
  set_has_refreshsymbol();
  if (refreshsymbol_ == NULL) refreshsymbol_ = new ::NodeActiveTickProto::ATSymbol;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.refreshSymbol)
  return refreshsymbol_;
}
inline ::NodeActiveTickProto::ATSymbol* ATQuoteStreamRefreshUpdate::release_refreshsymbol() {
  clear_has_refreshsymbol();
  ::NodeActiveTickProto::ATSymbol* temp = refreshsymbol_;
  refreshsymbol_ = NULL;
  return temp;
}
inline void ATQuoteStreamRefreshUpdate::set_allocated_refreshsymbol(::NodeActiveTickProto::ATSymbol* refreshsymbol) {
  delete refreshsymbol_;
  refreshsymbol_ = refreshsymbol;
  if (refreshsymbol) {
    set_has_refreshsymbol();
  } else {
    clear_has_refreshsymbol();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.refreshSymbol)
}

// optional .NodeActiveTickProto.ATPrice refreshLastPrice = 2;
inline bool ATQuoteStreamRefreshUpdate::has_refreshlastprice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ATQuoteStreamRefreshUpdate::set_has_refreshlastprice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ATQuoteStreamRefreshUpdate::clear_has_refreshlastprice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ATQuoteStreamRefreshUpdate::clear_refreshlastprice() {
  if (refreshlastprice_ != NULL) refreshlastprice_->::NodeActiveTickProto::ATPrice::Clear();
  clear_has_refreshlastprice();
}
inline const ::NodeActiveTickProto::ATPrice& ATQuoteStreamRefreshUpdate::refreshlastprice() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.refreshLastPrice)
  return refreshlastprice_ != NULL ? *refreshlastprice_ : *default_instance_->refreshlastprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamRefreshUpdate::mutable_refreshlastprice() {
  set_has_refreshlastprice();
  if (refreshlastprice_ == NULL) refreshlastprice_ = new ::NodeActiveTickProto::ATPrice;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.refreshLastPrice)
  return refreshlastprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamRefreshUpdate::release_refreshlastprice() {
  clear_has_refreshlastprice();
  ::NodeActiveTickProto::ATPrice* temp = refreshlastprice_;
  refreshlastprice_ = NULL;
  return temp;
}
inline void ATQuoteStreamRefreshUpdate::set_allocated_refreshlastprice(::NodeActiveTickProto::ATPrice* refreshlastprice) {
  delete refreshlastprice_;
  refreshlastprice_ = refreshlastprice;
  if (refreshlastprice) {
    set_has_refreshlastprice();
  } else {
    clear_has_refreshlastprice();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.refreshLastPrice)
}

// optional .NodeActiveTickProto.ATPrice refreshOpenPrice = 3;
inline bool ATQuoteStreamRefreshUpdate::has_refreshopenprice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ATQuoteStreamRefreshUpdate::set_has_refreshopenprice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ATQuoteStreamRefreshUpdate::clear_has_refreshopenprice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ATQuoteStreamRefreshUpdate::clear_refreshopenprice() {
  if (refreshopenprice_ != NULL) refreshopenprice_->::NodeActiveTickProto::ATPrice::Clear();
  clear_has_refreshopenprice();
}
inline const ::NodeActiveTickProto::ATPrice& ATQuoteStreamRefreshUpdate::refreshopenprice() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.refreshOpenPrice)
  return refreshopenprice_ != NULL ? *refreshopenprice_ : *default_instance_->refreshopenprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamRefreshUpdate::mutable_refreshopenprice() {
  set_has_refreshopenprice();
  if (refreshopenprice_ == NULL) refreshopenprice_ = new ::NodeActiveTickProto::ATPrice;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.refreshOpenPrice)
  return refreshopenprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamRefreshUpdate::release_refreshopenprice() {
  clear_has_refreshopenprice();
  ::NodeActiveTickProto::ATPrice* temp = refreshopenprice_;
  refreshopenprice_ = NULL;
  return temp;
}
inline void ATQuoteStreamRefreshUpdate::set_allocated_refreshopenprice(::NodeActiveTickProto::ATPrice* refreshopenprice) {
  delete refreshopenprice_;
  refreshopenprice_ = refreshopenprice;
  if (refreshopenprice) {
    set_has_refreshopenprice();
  } else {
    clear_has_refreshopenprice();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.refreshOpenPrice)
}

// optional .NodeActiveTickProto.ATPrice refreshHighPrice = 4;
inline bool ATQuoteStreamRefreshUpdate::has_refreshhighprice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ATQuoteStreamRefreshUpdate::set_has_refreshhighprice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ATQuoteStreamRefreshUpdate::clear_has_refreshhighprice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ATQuoteStreamRefreshUpdate::clear_refreshhighprice() {
  if (refreshhighprice_ != NULL) refreshhighprice_->::NodeActiveTickProto::ATPrice::Clear();
  clear_has_refreshhighprice();
}
inline const ::NodeActiveTickProto::ATPrice& ATQuoteStreamRefreshUpdate::refreshhighprice() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.refreshHighPrice)
  return refreshhighprice_ != NULL ? *refreshhighprice_ : *default_instance_->refreshhighprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamRefreshUpdate::mutable_refreshhighprice() {
  set_has_refreshhighprice();
  if (refreshhighprice_ == NULL) refreshhighprice_ = new ::NodeActiveTickProto::ATPrice;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.refreshHighPrice)
  return refreshhighprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamRefreshUpdate::release_refreshhighprice() {
  clear_has_refreshhighprice();
  ::NodeActiveTickProto::ATPrice* temp = refreshhighprice_;
  refreshhighprice_ = NULL;
  return temp;
}
inline void ATQuoteStreamRefreshUpdate::set_allocated_refreshhighprice(::NodeActiveTickProto::ATPrice* refreshhighprice) {
  delete refreshhighprice_;
  refreshhighprice_ = refreshhighprice;
  if (refreshhighprice) {
    set_has_refreshhighprice();
  } else {
    clear_has_refreshhighprice();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.refreshHighPrice)
}

// optional .NodeActiveTickProto.ATPrice refreshLowPrice = 5;
inline bool ATQuoteStreamRefreshUpdate::has_refreshlowprice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ATQuoteStreamRefreshUpdate::set_has_refreshlowprice() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ATQuoteStreamRefreshUpdate::clear_has_refreshlowprice() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ATQuoteStreamRefreshUpdate::clear_refreshlowprice() {
  if (refreshlowprice_ != NULL) refreshlowprice_->::NodeActiveTickProto::ATPrice::Clear();
  clear_has_refreshlowprice();
}
inline const ::NodeActiveTickProto::ATPrice& ATQuoteStreamRefreshUpdate::refreshlowprice() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.refreshLowPrice)
  return refreshlowprice_ != NULL ? *refreshlowprice_ : *default_instance_->refreshlowprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamRefreshUpdate::mutable_refreshlowprice() {
  set_has_refreshlowprice();
  if (refreshlowprice_ == NULL) refreshlowprice_ = new ::NodeActiveTickProto::ATPrice;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.refreshLowPrice)
  return refreshlowprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamRefreshUpdate::release_refreshlowprice() {
  clear_has_refreshlowprice();
  ::NodeActiveTickProto::ATPrice* temp = refreshlowprice_;
  refreshlowprice_ = NULL;
  return temp;
}
inline void ATQuoteStreamRefreshUpdate::set_allocated_refreshlowprice(::NodeActiveTickProto::ATPrice* refreshlowprice) {
  delete refreshlowprice_;
  refreshlowprice_ = refreshlowprice;
  if (refreshlowprice) {
    set_has_refreshlowprice();
  } else {
    clear_has_refreshlowprice();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.refreshLowPrice)
}

// -------------------------------------------------------------------

// ATSymbol

// optional string symbol = 1;
inline bool ATSymbol::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ATSymbol::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ATSymbol::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ATSymbol::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& ATSymbol::symbol() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATSymbol.symbol)
  return *symbol_;
}
inline void ATSymbol::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATSymbol.symbol)
}
inline void ATSymbol::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
  // @@protoc_insertion_point(field_set_char:NodeActiveTickProto.ATSymbol.symbol)
}
inline void ATSymbol::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NodeActiveTickProto.ATSymbol.symbol)
}
inline ::std::string* ATSymbol::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATSymbol.symbol)
  return symbol_;
}
inline ::std::string* ATSymbol::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ATSymbol::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATSymbol.symbol)
}

// optional string symbol_long = 2;
inline bool ATSymbol::has_symbol_long() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ATSymbol::set_has_symbol_long() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ATSymbol::clear_has_symbol_long() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ATSymbol::clear_symbol_long() {
  if (symbol_long_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_long_->clear();
  }
  clear_has_symbol_long();
}
inline const ::std::string& ATSymbol::symbol_long() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATSymbol.symbol_long)
  return *symbol_long_;
}
inline void ATSymbol::set_symbol_long(const ::std::string& value) {
  set_has_symbol_long();
  if (symbol_long_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_long_ = new ::std::string;
  }
  symbol_long_->assign(value);
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATSymbol.symbol_long)
}
inline void ATSymbol::set_symbol_long(const char* value) {
  set_has_symbol_long();
  if (symbol_long_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_long_ = new ::std::string;
  }
  symbol_long_->assign(value);
  // @@protoc_insertion_point(field_set_char:NodeActiveTickProto.ATSymbol.symbol_long)
}
inline void ATSymbol::set_symbol_long(const char* value, size_t size) {
  set_has_symbol_long();
  if (symbol_long_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_long_ = new ::std::string;
  }
  symbol_long_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NodeActiveTickProto.ATSymbol.symbol_long)
}
inline ::std::string* ATSymbol::mutable_symbol_long() {
  set_has_symbol_long();
  if (symbol_long_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_long_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATSymbol.symbol_long)
  return symbol_long_;
}
inline ::std::string* ATSymbol::release_symbol_long() {
  clear_has_symbol_long();
  if (symbol_long_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = symbol_long_;
    symbol_long_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ATSymbol::set_allocated_symbol_long(::std::string* symbol_long) {
  if (symbol_long_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_long_;
  }
  if (symbol_long) {
    set_has_symbol_long();
    symbol_long_ = symbol_long;
  } else {
    clear_has_symbol_long();
    symbol_long_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATSymbol.symbol_long)
}

// optional int32 symbolType = 3;
inline bool ATSymbol::has_symboltype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ATSymbol::set_has_symboltype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ATSymbol::clear_has_symboltype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ATSymbol::clear_symboltype() {
  symboltype_ = 0;
  clear_has_symboltype();
}
inline ::google::protobuf::int32 ATSymbol::symboltype() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATSymbol.symbolType)
  return symboltype_;
}
inline void ATSymbol::set_symboltype(::google::protobuf::int32 value) {
  set_has_symboltype();
  symboltype_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATSymbol.symbolType)
}

// optional int32 exchangeType = 4;
inline bool ATSymbol::has_exchangetype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ATSymbol::set_has_exchangetype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ATSymbol::clear_has_exchangetype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ATSymbol::clear_exchangetype() {
  exchangetype_ = 0;
  clear_has_exchangetype();
}
inline ::google::protobuf::int32 ATSymbol::exchangetype() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATSymbol.exchangeType)
  return exchangetype_;
}
inline void ATSymbol::set_exchangetype(::google::protobuf::int32 value) {
  set_has_exchangetype();
  exchangetype_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATSymbol.exchangeType)
}

// optional int32 countryType = 5;
inline bool ATSymbol::has_countrytype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ATSymbol::set_has_countrytype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ATSymbol::clear_has_countrytype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ATSymbol::clear_countrytype() {
  countrytype_ = 0;
  clear_has_countrytype();
}
inline ::google::protobuf::int32 ATSymbol::countrytype() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATSymbol.countryType)
  return countrytype_;
}
inline void ATSymbol::set_countrytype(::google::protobuf::int32 value) {
  set_has_countrytype();
  countrytype_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATSymbol.countryType)
}

// -------------------------------------------------------------------

// ATPrice

// required double price = 1;
inline bool ATPrice::has_price() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ATPrice::set_has_price() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ATPrice::clear_has_price() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ATPrice::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double ATPrice::price() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATPrice.price)
  return price_;
}
inline void ATPrice::set_price(double value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATPrice.price)
}

// required int32 precision = 2;
inline bool ATPrice::has_precision() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ATPrice::set_has_precision() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ATPrice::clear_has_precision() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ATPrice::clear_precision() {
  precision_ = 0;
  clear_has_precision();
}
inline ::google::protobuf::int32 ATPrice::precision() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATPrice.precision)
  return precision_;
}
inline void ATPrice::set_precision(::google::protobuf::int32 value) {
  set_has_precision();
  precision_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATPrice.precision)
}

// -------------------------------------------------------------------

// ATQuote

// required .NodeActiveTickProto.ATSymbol symbol = 1;
inline bool ATQuote::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ATQuote::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ATQuote::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ATQuote::clear_symbol() {
  if (symbol_ != NULL) symbol_->::NodeActiveTickProto::ATSymbol::Clear();
  clear_has_symbol();
}
inline const ::NodeActiveTickProto::ATSymbol& ATQuote::symbol() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuote.symbol)
  return symbol_ != NULL ? *symbol_ : *default_instance_->symbol_;
}
inline ::NodeActiveTickProto::ATSymbol* ATQuote::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == NULL) symbol_ = new ::NodeActiveTickProto::ATSymbol;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuote.symbol)
  return symbol_;
}
inline ::NodeActiveTickProto::ATSymbol* ATQuote::release_symbol() {
  clear_has_symbol();
  ::NodeActiveTickProto::ATSymbol* temp = symbol_;
  symbol_ = NULL;
  return temp;
}
inline void ATQuote::set_allocated_symbol(::NodeActiveTickProto::ATSymbol* symbol) {
  delete symbol_;
  symbol_ = symbol;
  if (symbol) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuote.symbol)
}

// required .NodeActiveTickProto.ATPrice bidPrice = 2;
inline bool ATQuote::has_bidprice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ATQuote::set_has_bidprice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ATQuote::clear_has_bidprice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ATQuote::clear_bidprice() {
  if (bidprice_ != NULL) bidprice_->::NodeActiveTickProto::ATPrice::Clear();
  clear_has_bidprice();
}
inline const ::NodeActiveTickProto::ATPrice& ATQuote::bidprice() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuote.bidPrice)
  return bidprice_ != NULL ? *bidprice_ : *default_instance_->bidprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuote::mutable_bidprice() {
  set_has_bidprice();
  if (bidprice_ == NULL) bidprice_ = new ::NodeActiveTickProto::ATPrice;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuote.bidPrice)
  return bidprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuote::release_bidprice() {
  clear_has_bidprice();
  ::NodeActiveTickProto::ATPrice* temp = bidprice_;
  bidprice_ = NULL;
  return temp;
}
inline void ATQuote::set_allocated_bidprice(::NodeActiveTickProto::ATPrice* bidprice) {
  delete bidprice_;
  bidprice_ = bidprice;
  if (bidprice) {
    set_has_bidprice();
  } else {
    clear_has_bidprice();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuote.bidPrice)
}

// required .NodeActiveTickProto.ATPrice askPrice = 3;
inline bool ATQuote::has_askprice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ATQuote::set_has_askprice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ATQuote::clear_has_askprice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ATQuote::clear_askprice() {
  if (askprice_ != NULL) askprice_->::NodeActiveTickProto::ATPrice::Clear();
  clear_has_askprice();
}
inline const ::NodeActiveTickProto::ATPrice& ATQuote::askprice() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuote.askPrice)
  return askprice_ != NULL ? *askprice_ : *default_instance_->askprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuote::mutable_askprice() {
  set_has_askprice();
  if (askprice_ == NULL) askprice_ = new ::NodeActiveTickProto::ATPrice;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuote.askPrice)
  return askprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuote::release_askprice() {
  clear_has_askprice();
  ::NodeActiveTickProto::ATPrice* temp = askprice_;
  askprice_ = NULL;
  return temp;
}
inline void ATQuote::set_allocated_askprice(::NodeActiveTickProto::ATPrice* askprice) {
  delete askprice_;
  askprice_ = askprice;
  if (askprice) {
    set_has_askprice();
  } else {
    clear_has_askprice();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuote.askPrice)
}

// optional int32 bidSize = 4;
inline bool ATQuote::has_bidsize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ATQuote::set_has_bidsize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ATQuote::clear_has_bidsize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ATQuote::clear_bidsize() {
  bidsize_ = 0;
  clear_has_bidsize();
}
inline ::google::protobuf::int32 ATQuote::bidsize() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuote.bidSize)
  return bidsize_;
}
inline void ATQuote::set_bidsize(::google::protobuf::int32 value) {
  set_has_bidsize();
  bidsize_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuote.bidSize)
}

// optional int32 askSize = 5;
inline bool ATQuote::has_asksize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ATQuote::set_has_asksize() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ATQuote::clear_has_asksize() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ATQuote::clear_asksize() {
  asksize_ = 0;
  clear_has_asksize();
}
inline ::google::protobuf::int32 ATQuote::asksize() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuote.askSize)
  return asksize_;
}
inline void ATQuote::set_asksize(::google::protobuf::int32 value) {
  set_has_asksize();
  asksize_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuote.askSize)
}

// optional int32 quoteConditionId = 6;
inline bool ATQuote::has_quoteconditionid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ATQuote::set_has_quoteconditionid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ATQuote::clear_has_quoteconditionid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ATQuote::clear_quoteconditionid() {
  quoteconditionid_ = 0;
  clear_has_quoteconditionid();
}
inline ::google::protobuf::int32 ATQuote::quoteconditionid() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuote.quoteConditionId)
  return quoteconditionid_;
}
inline void ATQuote::set_quoteconditionid(::google::protobuf::int32 value) {
  set_has_quoteconditionid();
  quoteconditionid_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuote.quoteConditionId)
}

// optional .NodeActiveTickProto.ATTime serverTime = 7;
inline bool ATQuote::has_servertime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ATQuote::set_has_servertime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ATQuote::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ATQuote::clear_servertime() {
  if (servertime_ != NULL) servertime_->::NodeActiveTickProto::ATTime::Clear();
  clear_has_servertime();
}
inline const ::NodeActiveTickProto::ATTime& ATQuote::servertime() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuote.serverTime)
  return servertime_ != NULL ? *servertime_ : *default_instance_->servertime_;
}
inline ::NodeActiveTickProto::ATTime* ATQuote::mutable_servertime() {
  set_has_servertime();
  if (servertime_ == NULL) servertime_ = new ::NodeActiveTickProto::ATTime;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuote.serverTime)
  return servertime_;
}
inline ::NodeActiveTickProto::ATTime* ATQuote::release_servertime() {
  clear_has_servertime();
  ::NodeActiveTickProto::ATTime* temp = servertime_;
  servertime_ = NULL;
  return temp;
}
inline void ATQuote::set_allocated_servertime(::NodeActiveTickProto::ATTime* servertime) {
  delete servertime_;
  servertime_ = servertime;
  if (servertime) {
    set_has_servertime();
  } else {
    clear_has_servertime();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuote.serverTime)
}

// optional int32 bidExchangeId = 8;
inline bool ATQuote::has_bidexchangeid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ATQuote::set_has_bidexchangeid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ATQuote::clear_has_bidexchangeid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ATQuote::clear_bidexchangeid() {
  bidexchangeid_ = 0;
  clear_has_bidexchangeid();
}
inline ::google::protobuf::int32 ATQuote::bidexchangeid() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuote.bidExchangeId)
  return bidexchangeid_;
}
inline void ATQuote::set_bidexchangeid(::google::protobuf::int32 value) {
  set_has_bidexchangeid();
  bidexchangeid_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuote.bidExchangeId)
}

// optional int32 askExchangeId = 9;
inline bool ATQuote::has_askexchangeid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ATQuote::set_has_askexchangeid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ATQuote::clear_has_askexchangeid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ATQuote::clear_askexchangeid() {
  askexchangeid_ = 0;
  clear_has_askexchangeid();
}
inline ::google::protobuf::int32 ATQuote::askexchangeid() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuote.askExchangeId)
  return askexchangeid_;
}
inline void ATQuote::set_askexchangeid(::google::protobuf::int32 value) {
  set_has_askexchangeid();
  askexchangeid_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuote.askExchangeId)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NodeActiveTickProto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_2eproto__INCLUDED
