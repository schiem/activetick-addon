// Generated by IcedCoffeeScript 108.0.8
(function() {
  var ActiveTick, config, fs, iced, log, main, __iced_k, __iced_k_noop;

  iced = require('iced-runtime');
  __iced_k = __iced_k_noop = function() {};

  ActiveTick = require('..').ActiveTick;

  log = require('single-line-log').stdout;

  fs = require('fs');

  config = require('./config.js');

  main = function() {
    var a, alibaba, apple, att, facebook, result, shake_shack, updateLogStatement, virgin_america, ___iced_passed_deferral, __iced_deferrals, __iced_k;
    __iced_k = __iced_k_noop;
    ___iced_passed_deferral = iced.findDeferral(arguments);
    (function(_this) {
      return (function(__iced_k) {
        __iced_deferrals = new iced.Deferrals(__iced_k, {
          parent: ___iced_passed_deferral,
          filename: "/Users/sthomas/Documents/activetick-addon/example/example.iced"
        });
        a = new ActiveTick(__iced_deferrals.defer({
          lineno: 10
        }));
        __iced_deferrals._fulfill();
      });
    })(this)((function(_this) {
      return function() {
        (function(__iced_k) {
          __iced_deferrals = new iced.Deferrals(__iced_k, {
            parent: ___iced_passed_deferral,
            filename: "/Users/sthomas/Documents/activetick-addon/example/example.iced"
          });
          a.connect(config.api_key, config.username, config.password, __iced_deferrals.defer({
            assign_fn: (function() {
              return function() {
                return result = arguments[0];
              };
            })(),
            lineno: 11
          }));
          __iced_deferrals._fulfill();
        })(function() {
          _this.last_trade = null;
          _this.last_quote = null;
          updateLogStatement = function() {
            var logstring;
            if ((_this.last_trade != null) && (_this.last_quote != null)) {
              logstring = last_trade.tradeSize + ' @ ' + last_trade.tradePrice.price + '\n' + ' Bid: ' + last_quote.quoteBidPrice.price + ' Ask: ' + last_quote.quoteAskPrice.price;
              return log(logstring);
            }
          };
          a.on('trade', function(trade) {
            _this.last_trade = trade;
            return updateLogStatement();
          });
          a.on('quote', function(quote) {
            _this.last_quote = quote;
            return updateLogStatement();
          });
          virgin_america = 'VA';
          att = 'T';
          facebook = 'FB';
          apple = 'AAPL';
          alibaba = 'BABA';
          shake_shack = 'SHAK';
          return a.beginQuoteStream([virgin_america], 'StreamRequestSubscribe', function(result) {
            var i, _i, _len, _ref, _results;
            _ref = result.quoteStreamItems;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              i = _ref[_i];
              _results.push(log('Logging Quote Stream:', i.symbol.symbol));
            }
            return _results;
          });
        });
      };
    })(this));
  };

  if (!module.parent) {
    main();
  }

}).call(this);
