// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef PROTOBUF_messages_2eproto__INCLUDED
#define PROTOBUF_messages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace NodeActiveTickProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_messages_2eproto();
void protobuf_AssignDesc_messages_2eproto();
void protobuf_ShutdownFile_messages_2eproto();

class ATLoginResponse;
class ATConstituentResponse;
class ATQuoteStreamResponse;
class ATQuoteStreamResponseItem;
class ATTime;
class ATQuoteStreamTradeUpdate;
class ATQuoteStreamQuoteUpdate;
class ATQuoteStreamRefreshUpdate;
class ATMarketMoversStreamUpdate;
class ATMarketMoversRecord;
class ATMarketMoversItem;
class ATSymbol;
class ATPrice;
class ATQuote;
class ATBarHistoryValue;
class ATBarHistoryDbResponse;

// ===================================================================

class ATLoginResponse : public ::google::protobuf::Message {
 public:
  ATLoginResponse();
  virtual ~ATLoginResponse();

  ATLoginResponse(const ATLoginResponse& from);

  inline ATLoginResponse& operator=(const ATLoginResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ATLoginResponse& default_instance();

  void Swap(ATLoginResponse* other);

  // implements Message ----------------------------------------------

  ATLoginResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ATLoginResponse& from);
  void MergeFrom(const ATLoginResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 loginResponseType = 1;
  inline bool has_loginresponsetype() const;
  inline void clear_loginresponsetype();
  static const int kLoginResponseTypeFieldNumber = 1;
  inline ::google::protobuf::int32 loginresponsetype() const;
  inline void set_loginresponsetype(::google::protobuf::int32 value);

  // required string loginResponseString = 2;
  inline bool has_loginresponsestring() const;
  inline void clear_loginresponsestring();
  static const int kLoginResponseStringFieldNumber = 2;
  inline const ::std::string& loginresponsestring() const;
  inline void set_loginresponsestring(const ::std::string& value);
  inline void set_loginresponsestring(const char* value);
  inline void set_loginresponsestring(const char* value, size_t size);
  inline ::std::string* mutable_loginresponsestring();
  inline ::std::string* release_loginresponsestring();
  inline void set_allocated_loginresponsestring(::std::string* loginresponsestring);

  // @@protoc_insertion_point(class_scope:NodeActiveTickProto.ATLoginResponse)
 private:
  inline void set_has_loginresponsetype();
  inline void clear_has_loginresponsetype();
  inline void set_has_loginresponsestring();
  inline void clear_has_loginresponsestring();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* loginresponsestring_;
  ::google::protobuf::int32 loginresponsetype_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ATLoginResponse* default_instance_;
};
// -------------------------------------------------------------------

class ATConstituentResponse : public ::google::protobuf::Message {
 public:
  ATConstituentResponse();
  virtual ~ATConstituentResponse();

  ATConstituentResponse(const ATConstituentResponse& from);

  inline ATConstituentResponse& operator=(const ATConstituentResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ATConstituentResponse& default_instance();

  void Swap(ATConstituentResponse* other);

  // implements Message ----------------------------------------------

  ATConstituentResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ATConstituentResponse& from);
  void MergeFrom(const ATConstituentResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NodeActiveTickProto.ATSymbol symbols = 1;
  inline int symbols_size() const;
  inline void clear_symbols();
  static const int kSymbolsFieldNumber = 1;
  inline const ::NodeActiveTickProto::ATSymbol& symbols(int index) const;
  inline ::NodeActiveTickProto::ATSymbol* mutable_symbols(int index);
  inline ::NodeActiveTickProto::ATSymbol* add_symbols();
  inline const ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATSymbol >&
      symbols() const;
  inline ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATSymbol >*
      mutable_symbols();

  // @@protoc_insertion_point(class_scope:NodeActiveTickProto.ATConstituentResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATSymbol > symbols_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ATConstituentResponse* default_instance_;
};
// -------------------------------------------------------------------

class ATQuoteStreamResponse : public ::google::protobuf::Message {
 public:
  ATQuoteStreamResponse();
  virtual ~ATQuoteStreamResponse();

  ATQuoteStreamResponse(const ATQuoteStreamResponse& from);

  inline ATQuoteStreamResponse& operator=(const ATQuoteStreamResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ATQuoteStreamResponse& default_instance();

  void Swap(ATQuoteStreamResponse* other);

  // implements Message ----------------------------------------------

  ATQuoteStreamResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ATQuoteStreamResponse& from);
  void MergeFrom(const ATQuoteStreamResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string quoteStreamResponseType = 1;
  inline bool has_quotestreamresponsetype() const;
  inline void clear_quotestreamresponsetype();
  static const int kQuoteStreamResponseTypeFieldNumber = 1;
  inline const ::std::string& quotestreamresponsetype() const;
  inline void set_quotestreamresponsetype(const ::std::string& value);
  inline void set_quotestreamresponsetype(const char* value);
  inline void set_quotestreamresponsetype(const char* value, size_t size);
  inline ::std::string* mutable_quotestreamresponsetype();
  inline ::std::string* release_quotestreamresponsetype();
  inline void set_allocated_quotestreamresponsetype(::std::string* quotestreamresponsetype);

  // optional int32 quoteResponseCount = 2;
  inline bool has_quoteresponsecount() const;
  inline void clear_quoteresponsecount();
  static const int kQuoteResponseCountFieldNumber = 2;
  inline ::google::protobuf::int32 quoteresponsecount() const;
  inline void set_quoteresponsecount(::google::protobuf::int32 value);

  // repeated .NodeActiveTickProto.ATQuoteStreamResponseItem quoteStreamItems = 3;
  inline int quotestreamitems_size() const;
  inline void clear_quotestreamitems();
  static const int kQuoteStreamItemsFieldNumber = 3;
  inline const ::NodeActiveTickProto::ATQuoteStreamResponseItem& quotestreamitems(int index) const;
  inline ::NodeActiveTickProto::ATQuoteStreamResponseItem* mutable_quotestreamitems(int index);
  inline ::NodeActiveTickProto::ATQuoteStreamResponseItem* add_quotestreamitems();
  inline const ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATQuoteStreamResponseItem >&
      quotestreamitems() const;
  inline ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATQuoteStreamResponseItem >*
      mutable_quotestreamitems();

  // @@protoc_insertion_point(class_scope:NodeActiveTickProto.ATQuoteStreamResponse)
 private:
  inline void set_has_quotestreamresponsetype();
  inline void clear_has_quotestreamresponsetype();
  inline void set_has_quoteresponsecount();
  inline void clear_has_quoteresponsecount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* quotestreamresponsetype_;
  ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATQuoteStreamResponseItem > quotestreamitems_;
  ::google::protobuf::int32 quoteresponsecount_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ATQuoteStreamResponse* default_instance_;
};
// -------------------------------------------------------------------

class ATQuoteStreamResponseItem : public ::google::protobuf::Message {
 public:
  ATQuoteStreamResponseItem();
  virtual ~ATQuoteStreamResponseItem();

  ATQuoteStreamResponseItem(const ATQuoteStreamResponseItem& from);

  inline ATQuoteStreamResponseItem& operator=(const ATQuoteStreamResponseItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ATQuoteStreamResponseItem& default_instance();

  void Swap(ATQuoteStreamResponseItem* other);

  // implements Message ----------------------------------------------

  ATQuoteStreamResponseItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ATQuoteStreamResponseItem& from);
  void MergeFrom(const ATQuoteStreamResponseItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string responseType = 1;
  inline bool has_responsetype() const;
  inline void clear_responsetype();
  static const int kResponseTypeFieldNumber = 1;
  inline const ::std::string& responsetype() const;
  inline void set_responsetype(const ::std::string& value);
  inline void set_responsetype(const char* value);
  inline void set_responsetype(const char* value, size_t size);
  inline ::std::string* mutable_responsetype();
  inline ::std::string* release_responsetype();
  inline void set_allocated_responsetype(::std::string* responsetype);

  // optional .NodeActiveTickProto.ATSymbol symbol = 2;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 2;
  inline const ::NodeActiveTickProto::ATSymbol& symbol() const;
  inline ::NodeActiveTickProto::ATSymbol* mutable_symbol();
  inline ::NodeActiveTickProto::ATSymbol* release_symbol();
  inline void set_allocated_symbol(::NodeActiveTickProto::ATSymbol* symbol);

  // optional string symbolStatus = 3;
  inline bool has_symbolstatus() const;
  inline void clear_symbolstatus();
  static const int kSymbolStatusFieldNumber = 3;
  inline const ::std::string& symbolstatus() const;
  inline void set_symbolstatus(const ::std::string& value);
  inline void set_symbolstatus(const char* value);
  inline void set_symbolstatus(const char* value, size_t size);
  inline ::std::string* mutable_symbolstatus();
  inline ::std::string* release_symbolstatus();
  inline void set_allocated_symbolstatus(::std::string* symbolstatus);

  // @@protoc_insertion_point(class_scope:NodeActiveTickProto.ATQuoteStreamResponseItem)
 private:
  inline void set_has_responsetype();
  inline void clear_has_responsetype();
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_symbolstatus();
  inline void clear_has_symbolstatus();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* responsetype_;
  ::NodeActiveTickProto::ATSymbol* symbol_;
  ::std::string* symbolstatus_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ATQuoteStreamResponseItem* default_instance_;
};
// -------------------------------------------------------------------

class ATTime : public ::google::protobuf::Message {
 public:
  ATTime();
  virtual ~ATTime();

  ATTime(const ATTime& from);

  inline ATTime& operator=(const ATTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ATTime& default_instance();

  void Swap(ATTime* other);

  // implements Message ----------------------------------------------

  ATTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ATTime& from);
  void MergeFrom(const ATTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 year = 1;
  inline bool has_year() const;
  inline void clear_year();
  static const int kYearFieldNumber = 1;
  inline ::google::protobuf::int32 year() const;
  inline void set_year(::google::protobuf::int32 value);

  // optional int32 month = 2;
  inline bool has_month() const;
  inline void clear_month();
  static const int kMonthFieldNumber = 2;
  inline ::google::protobuf::int32 month() const;
  inline void set_month(::google::protobuf::int32 value);

  // optional int32 dayOfWeek = 3;
  inline bool has_dayofweek() const;
  inline void clear_dayofweek();
  static const int kDayOfWeekFieldNumber = 3;
  inline ::google::protobuf::int32 dayofweek() const;
  inline void set_dayofweek(::google::protobuf::int32 value);

  // optional int32 day = 4;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 4;
  inline ::google::protobuf::int32 day() const;
  inline void set_day(::google::protobuf::int32 value);

  // optional int32 hour = 5;
  inline bool has_hour() const;
  inline void clear_hour();
  static const int kHourFieldNumber = 5;
  inline ::google::protobuf::int32 hour() const;
  inline void set_hour(::google::protobuf::int32 value);

  // optional int32 minute = 6;
  inline bool has_minute() const;
  inline void clear_minute();
  static const int kMinuteFieldNumber = 6;
  inline ::google::protobuf::int32 minute() const;
  inline void set_minute(::google::protobuf::int32 value);

  // optional int32 second = 7;
  inline bool has_second() const;
  inline void clear_second();
  static const int kSecondFieldNumber = 7;
  inline ::google::protobuf::int32 second() const;
  inline void set_second(::google::protobuf::int32 value);

  // optional int32 milliseconds = 8;
  inline bool has_milliseconds() const;
  inline void clear_milliseconds();
  static const int kMillisecondsFieldNumber = 8;
  inline ::google::protobuf::int32 milliseconds() const;
  inline void set_milliseconds(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NodeActiveTickProto.ATTime)
 private:
  inline void set_has_year();
  inline void clear_has_year();
  inline void set_has_month();
  inline void clear_has_month();
  inline void set_has_dayofweek();
  inline void clear_has_dayofweek();
  inline void set_has_day();
  inline void clear_has_day();
  inline void set_has_hour();
  inline void clear_has_hour();
  inline void set_has_minute();
  inline void clear_has_minute();
  inline void set_has_second();
  inline void clear_has_second();
  inline void set_has_milliseconds();
  inline void clear_has_milliseconds();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 year_;
  ::google::protobuf::int32 month_;
  ::google::protobuf::int32 dayofweek_;
  ::google::protobuf::int32 day_;
  ::google::protobuf::int32 hour_;
  ::google::protobuf::int32 minute_;
  ::google::protobuf::int32 second_;
  ::google::protobuf::int32 milliseconds_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ATTime* default_instance_;
};
// -------------------------------------------------------------------

class ATQuoteStreamTradeUpdate : public ::google::protobuf::Message {
 public:
  ATQuoteStreamTradeUpdate();
  virtual ~ATQuoteStreamTradeUpdate();

  ATQuoteStreamTradeUpdate(const ATQuoteStreamTradeUpdate& from);

  inline ATQuoteStreamTradeUpdate& operator=(const ATQuoteStreamTradeUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ATQuoteStreamTradeUpdate& default_instance();

  void Swap(ATQuoteStreamTradeUpdate* other);

  // implements Message ----------------------------------------------

  ATQuoteStreamTradeUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ATQuoteStreamTradeUpdate& from);
  void MergeFrom(const ATQuoteStreamTradeUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .NodeActiveTickProto.ATSymbol tradeSymbol = 1;
  inline bool has_tradesymbol() const;
  inline void clear_tradesymbol();
  static const int kTradeSymbolFieldNumber = 1;
  inline const ::NodeActiveTickProto::ATSymbol& tradesymbol() const;
  inline ::NodeActiveTickProto::ATSymbol* mutable_tradesymbol();
  inline ::NodeActiveTickProto::ATSymbol* release_tradesymbol();
  inline void set_allocated_tradesymbol(::NodeActiveTickProto::ATSymbol* tradesymbol);

  // optional int32 tradeMessageFlags = 2;
  inline bool has_trademessageflags() const;
  inline void clear_trademessageflags();
  static const int kTradeMessageFlagsFieldNumber = 2;
  inline ::google::protobuf::int32 trademessageflags() const;
  inline void set_trademessageflags(::google::protobuf::int32 value);

  // repeated string tradeConditionType = 3;
  inline int tradeconditiontype_size() const;
  inline void clear_tradeconditiontype();
  static const int kTradeConditionTypeFieldNumber = 3;
  inline const ::std::string& tradeconditiontype(int index) const;
  inline ::std::string* mutable_tradeconditiontype(int index);
  inline void set_tradeconditiontype(int index, const ::std::string& value);
  inline void set_tradeconditiontype(int index, const char* value);
  inline void set_tradeconditiontype(int index, const char* value, size_t size);
  inline ::std::string* add_tradeconditiontype();
  inline void add_tradeconditiontype(const ::std::string& value);
  inline void add_tradeconditiontype(const char* value);
  inline void add_tradeconditiontype(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& tradeconditiontype() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tradeconditiontype();

  // optional string tradeExchange = 4;
  inline bool has_tradeexchange() const;
  inline void clear_tradeexchange();
  static const int kTradeExchangeFieldNumber = 4;
  inline const ::std::string& tradeexchange() const;
  inline void set_tradeexchange(const ::std::string& value);
  inline void set_tradeexchange(const char* value);
  inline void set_tradeexchange(const char* value, size_t size);
  inline ::std::string* mutable_tradeexchange();
  inline ::std::string* release_tradeexchange();
  inline void set_allocated_tradeexchange(::std::string* tradeexchange);

  // optional .NodeActiveTickProto.ATPrice tradePrice = 5;
  inline bool has_tradeprice() const;
  inline void clear_tradeprice();
  static const int kTradePriceFieldNumber = 5;
  inline const ::NodeActiveTickProto::ATPrice& tradeprice() const;
  inline ::NodeActiveTickProto::ATPrice* mutable_tradeprice();
  inline ::NodeActiveTickProto::ATPrice* release_tradeprice();
  inline void set_allocated_tradeprice(::NodeActiveTickProto::ATPrice* tradeprice);

  // optional int32 tradeSize = 6;
  inline bool has_tradesize() const;
  inline void clear_tradesize();
  static const int kTradeSizeFieldNumber = 6;
  inline ::google::protobuf::int32 tradesize() const;
  inline void set_tradesize(::google::protobuf::int32 value);

  // optional .NodeActiveTickProto.ATTime tradeTime = 7;
  inline bool has_tradetime() const;
  inline void clear_tradetime();
  static const int kTradeTimeFieldNumber = 7;
  inline const ::NodeActiveTickProto::ATTime& tradetime() const;
  inline ::NodeActiveTickProto::ATTime* mutable_tradetime();
  inline ::NodeActiveTickProto::ATTime* release_tradetime();
  inline void set_allocated_tradetime(::NodeActiveTickProto::ATTime* tradetime);

  // @@protoc_insertion_point(class_scope:NodeActiveTickProto.ATQuoteStreamTradeUpdate)
 private:
  inline void set_has_tradesymbol();
  inline void clear_has_tradesymbol();
  inline void set_has_trademessageflags();
  inline void clear_has_trademessageflags();
  inline void set_has_tradeexchange();
  inline void clear_has_tradeexchange();
  inline void set_has_tradeprice();
  inline void clear_has_tradeprice();
  inline void set_has_tradesize();
  inline void clear_has_tradesize();
  inline void set_has_tradetime();
  inline void clear_has_tradetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::NodeActiveTickProto::ATSymbol* tradesymbol_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tradeconditiontype_;
  ::std::string* tradeexchange_;
  ::google::protobuf::int32 trademessageflags_;
  ::google::protobuf::int32 tradesize_;
  ::NodeActiveTickProto::ATPrice* tradeprice_;
  ::NodeActiveTickProto::ATTime* tradetime_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ATQuoteStreamTradeUpdate* default_instance_;
};
// -------------------------------------------------------------------

class ATQuoteStreamQuoteUpdate : public ::google::protobuf::Message {
 public:
  ATQuoteStreamQuoteUpdate();
  virtual ~ATQuoteStreamQuoteUpdate();

  ATQuoteStreamQuoteUpdate(const ATQuoteStreamQuoteUpdate& from);

  inline ATQuoteStreamQuoteUpdate& operator=(const ATQuoteStreamQuoteUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ATQuoteStreamQuoteUpdate& default_instance();

  void Swap(ATQuoteStreamQuoteUpdate* other);

  // implements Message ----------------------------------------------

  ATQuoteStreamQuoteUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ATQuoteStreamQuoteUpdate& from);
  void MergeFrom(const ATQuoteStreamQuoteUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .NodeActiveTickProto.ATSymbol quoteSymbol = 1;
  inline bool has_quotesymbol() const;
  inline void clear_quotesymbol();
  static const int kQuoteSymbolFieldNumber = 1;
  inline const ::NodeActiveTickProto::ATSymbol& quotesymbol() const;
  inline ::NodeActiveTickProto::ATSymbol* mutable_quotesymbol();
  inline ::NodeActiveTickProto::ATSymbol* release_quotesymbol();
  inline void set_allocated_quotesymbol(::NodeActiveTickProto::ATSymbol* quotesymbol);

  // optional string quoteCondition = 2;
  inline bool has_quotecondition() const;
  inline void clear_quotecondition();
  static const int kQuoteConditionFieldNumber = 2;
  inline const ::std::string& quotecondition() const;
  inline void set_quotecondition(const ::std::string& value);
  inline void set_quotecondition(const char* value);
  inline void set_quotecondition(const char* value, size_t size);
  inline ::std::string* mutable_quotecondition();
  inline ::std::string* release_quotecondition();
  inline void set_allocated_quotecondition(::std::string* quotecondition);

  // optional string quoteBidExchange = 3;
  inline bool has_quotebidexchange() const;
  inline void clear_quotebidexchange();
  static const int kQuoteBidExchangeFieldNumber = 3;
  inline const ::std::string& quotebidexchange() const;
  inline void set_quotebidexchange(const ::std::string& value);
  inline void set_quotebidexchange(const char* value);
  inline void set_quotebidexchange(const char* value, size_t size);
  inline ::std::string* mutable_quotebidexchange();
  inline ::std::string* release_quotebidexchange();
  inline void set_allocated_quotebidexchange(::std::string* quotebidexchange);

  // optional string quoteAskExchange = 4;
  inline bool has_quoteaskexchange() const;
  inline void clear_quoteaskexchange();
  static const int kQuoteAskExchangeFieldNumber = 4;
  inline const ::std::string& quoteaskexchange() const;
  inline void set_quoteaskexchange(const ::std::string& value);
  inline void set_quoteaskexchange(const char* value);
  inline void set_quoteaskexchange(const char* value, size_t size);
  inline ::std::string* mutable_quoteaskexchange();
  inline ::std::string* release_quoteaskexchange();
  inline void set_allocated_quoteaskexchange(::std::string* quoteaskexchange);

  // optional .NodeActiveTickProto.ATPrice quoteBidPrice = 5;
  inline bool has_quotebidprice() const;
  inline void clear_quotebidprice();
  static const int kQuoteBidPriceFieldNumber = 5;
  inline const ::NodeActiveTickProto::ATPrice& quotebidprice() const;
  inline ::NodeActiveTickProto::ATPrice* mutable_quotebidprice();
  inline ::NodeActiveTickProto::ATPrice* release_quotebidprice();
  inline void set_allocated_quotebidprice(::NodeActiveTickProto::ATPrice* quotebidprice);

  // optional .NodeActiveTickProto.ATPrice quoteAskPrice = 6;
  inline bool has_quoteaskprice() const;
  inline void clear_quoteaskprice();
  static const int kQuoteAskPriceFieldNumber = 6;
  inline const ::NodeActiveTickProto::ATPrice& quoteaskprice() const;
  inline ::NodeActiveTickProto::ATPrice* mutable_quoteaskprice();
  inline ::NodeActiveTickProto::ATPrice* release_quoteaskprice();
  inline void set_allocated_quoteaskprice(::NodeActiveTickProto::ATPrice* quoteaskprice);

  // optional int32 quoteBidSize = 7;
  inline bool has_quotebidsize() const;
  inline void clear_quotebidsize();
  static const int kQuoteBidSizeFieldNumber = 7;
  inline ::google::protobuf::int32 quotebidsize() const;
  inline void set_quotebidsize(::google::protobuf::int32 value);

  // optional int32 quoteAskSize = 8;
  inline bool has_quoteasksize() const;
  inline void clear_quoteasksize();
  static const int kQuoteAskSizeFieldNumber = 8;
  inline ::google::protobuf::int32 quoteasksize() const;
  inline void set_quoteasksize(::google::protobuf::int32 value);

  // optional .NodeActiveTickProto.ATTime quoteTime = 9;
  inline bool has_quotetime() const;
  inline void clear_quotetime();
  static const int kQuoteTimeFieldNumber = 9;
  inline const ::NodeActiveTickProto::ATTime& quotetime() const;
  inline ::NodeActiveTickProto::ATTime* mutable_quotetime();
  inline ::NodeActiveTickProto::ATTime* release_quotetime();
  inline void set_allocated_quotetime(::NodeActiveTickProto::ATTime* quotetime);

  // @@protoc_insertion_point(class_scope:NodeActiveTickProto.ATQuoteStreamQuoteUpdate)
 private:
  inline void set_has_quotesymbol();
  inline void clear_has_quotesymbol();
  inline void set_has_quotecondition();
  inline void clear_has_quotecondition();
  inline void set_has_quotebidexchange();
  inline void clear_has_quotebidexchange();
  inline void set_has_quoteaskexchange();
  inline void clear_has_quoteaskexchange();
  inline void set_has_quotebidprice();
  inline void clear_has_quotebidprice();
  inline void set_has_quoteaskprice();
  inline void clear_has_quoteaskprice();
  inline void set_has_quotebidsize();
  inline void clear_has_quotebidsize();
  inline void set_has_quoteasksize();
  inline void clear_has_quoteasksize();
  inline void set_has_quotetime();
  inline void clear_has_quotetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::NodeActiveTickProto::ATSymbol* quotesymbol_;
  ::std::string* quotecondition_;
  ::std::string* quotebidexchange_;
  ::std::string* quoteaskexchange_;
  ::NodeActiveTickProto::ATPrice* quotebidprice_;
  ::NodeActiveTickProto::ATPrice* quoteaskprice_;
  ::google::protobuf::int32 quotebidsize_;
  ::google::protobuf::int32 quoteasksize_;
  ::NodeActiveTickProto::ATTime* quotetime_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ATQuoteStreamQuoteUpdate* default_instance_;
};
// -------------------------------------------------------------------

class ATQuoteStreamRefreshUpdate : public ::google::protobuf::Message {
 public:
  ATQuoteStreamRefreshUpdate();
  virtual ~ATQuoteStreamRefreshUpdate();

  ATQuoteStreamRefreshUpdate(const ATQuoteStreamRefreshUpdate& from);

  inline ATQuoteStreamRefreshUpdate& operator=(const ATQuoteStreamRefreshUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ATQuoteStreamRefreshUpdate& default_instance();

  void Swap(ATQuoteStreamRefreshUpdate* other);

  // implements Message ----------------------------------------------

  ATQuoteStreamRefreshUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ATQuoteStreamRefreshUpdate& from);
  void MergeFrom(const ATQuoteStreamRefreshUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .NodeActiveTickProto.ATSymbol symbol = 1;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  inline const ::NodeActiveTickProto::ATSymbol& symbol() const;
  inline ::NodeActiveTickProto::ATSymbol* mutable_symbol();
  inline ::NodeActiveTickProto::ATSymbol* release_symbol();
  inline void set_allocated_symbol(::NodeActiveTickProto::ATSymbol* symbol);

  // optional .NodeActiveTickProto.ATPrice lastPrice = 2;
  inline bool has_lastprice() const;
  inline void clear_lastprice();
  static const int kLastPriceFieldNumber = 2;
  inline const ::NodeActiveTickProto::ATPrice& lastprice() const;
  inline ::NodeActiveTickProto::ATPrice* mutable_lastprice();
  inline ::NodeActiveTickProto::ATPrice* release_lastprice();
  inline void set_allocated_lastprice(::NodeActiveTickProto::ATPrice* lastprice);

  // optional .NodeActiveTickProto.ATPrice openPrice = 3;
  inline bool has_openprice() const;
  inline void clear_openprice();
  static const int kOpenPriceFieldNumber = 3;
  inline const ::NodeActiveTickProto::ATPrice& openprice() const;
  inline ::NodeActiveTickProto::ATPrice* mutable_openprice();
  inline ::NodeActiveTickProto::ATPrice* release_openprice();
  inline void set_allocated_openprice(::NodeActiveTickProto::ATPrice* openprice);

  // optional .NodeActiveTickProto.ATPrice highPrice = 4;
  inline bool has_highprice() const;
  inline void clear_highprice();
  static const int kHighPriceFieldNumber = 4;
  inline const ::NodeActiveTickProto::ATPrice& highprice() const;
  inline ::NodeActiveTickProto::ATPrice* mutable_highprice();
  inline ::NodeActiveTickProto::ATPrice* release_highprice();
  inline void set_allocated_highprice(::NodeActiveTickProto::ATPrice* highprice);

  // optional .NodeActiveTickProto.ATPrice lowPrice = 5;
  inline bool has_lowprice() const;
  inline void clear_lowprice();
  static const int kLowPriceFieldNumber = 5;
  inline const ::NodeActiveTickProto::ATPrice& lowprice() const;
  inline ::NodeActiveTickProto::ATPrice* mutable_lowprice();
  inline ::NodeActiveTickProto::ATPrice* release_lowprice();
  inline void set_allocated_lowprice(::NodeActiveTickProto::ATPrice* lowprice);

  // optional .NodeActiveTickProto.ATPrice closePrice = 6;
  inline bool has_closeprice() const;
  inline void clear_closeprice();
  static const int kClosePriceFieldNumber = 6;
  inline const ::NodeActiveTickProto::ATPrice& closeprice() const;
  inline ::NodeActiveTickProto::ATPrice* mutable_closeprice();
  inline ::NodeActiveTickProto::ATPrice* release_closeprice();
  inline void set_allocated_closeprice(::NodeActiveTickProto::ATPrice* closeprice);

  // optional .NodeActiveTickProto.ATPrice prevClosePrice = 7;
  inline bool has_prevcloseprice() const;
  inline void clear_prevcloseprice();
  static const int kPrevClosePriceFieldNumber = 7;
  inline const ::NodeActiveTickProto::ATPrice& prevcloseprice() const;
  inline ::NodeActiveTickProto::ATPrice* mutable_prevcloseprice();
  inline ::NodeActiveTickProto::ATPrice* release_prevcloseprice();
  inline void set_allocated_prevcloseprice(::NodeActiveTickProto::ATPrice* prevcloseprice);

  // optional .NodeActiveTickProto.ATPrice afterMarketClosePrice = 8;
  inline bool has_aftermarketcloseprice() const;
  inline void clear_aftermarketcloseprice();
  static const int kAfterMarketClosePriceFieldNumber = 8;
  inline const ::NodeActiveTickProto::ATPrice& aftermarketcloseprice() const;
  inline ::NodeActiveTickProto::ATPrice* mutable_aftermarketcloseprice();
  inline ::NodeActiveTickProto::ATPrice* release_aftermarketcloseprice();
  inline void set_allocated_aftermarketcloseprice(::NodeActiveTickProto::ATPrice* aftermarketcloseprice);

  // optional .NodeActiveTickProto.ATPrice bidPrice = 9;
  inline bool has_bidprice() const;
  inline void clear_bidprice();
  static const int kBidPriceFieldNumber = 9;
  inline const ::NodeActiveTickProto::ATPrice& bidprice() const;
  inline ::NodeActiveTickProto::ATPrice* mutable_bidprice();
  inline ::NodeActiveTickProto::ATPrice* release_bidprice();
  inline void set_allocated_bidprice(::NodeActiveTickProto::ATPrice* bidprice);

  // optional .NodeActiveTickProto.ATPrice askPrice = 10;
  inline bool has_askprice() const;
  inline void clear_askprice();
  static const int kAskPriceFieldNumber = 10;
  inline const ::NodeActiveTickProto::ATPrice& askprice() const;
  inline ::NodeActiveTickProto::ATPrice* mutable_askprice();
  inline ::NodeActiveTickProto::ATPrice* release_askprice();
  inline void set_allocated_askprice(::NodeActiveTickProto::ATPrice* askprice);

  // optional int32 bidSize = 11;
  inline bool has_bidsize() const;
  inline void clear_bidsize();
  static const int kBidSizeFieldNumber = 11;
  inline ::google::protobuf::int32 bidsize() const;
  inline void set_bidsize(::google::protobuf::int32 value);

  // optional int32 askSize = 12;
  inline bool has_asksize() const;
  inline void clear_asksize();
  static const int kAskSizeFieldNumber = 12;
  inline ::google::protobuf::int32 asksize() const;
  inline void set_asksize(::google::protobuf::int32 value);

  // optional int32 lastSize = 13;
  inline bool has_lastsize() const;
  inline void clear_lastsize();
  static const int kLastSizeFieldNumber = 13;
  inline ::google::protobuf::int32 lastsize() const;
  inline void set_lastsize(::google::protobuf::int32 value);

  // optional int64 volume = 14;
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 14;
  inline ::google::protobuf::int64 volume() const;
  inline void set_volume(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:NodeActiveTickProto.ATQuoteStreamRefreshUpdate)
 private:
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_lastprice();
  inline void clear_has_lastprice();
  inline void set_has_openprice();
  inline void clear_has_openprice();
  inline void set_has_highprice();
  inline void clear_has_highprice();
  inline void set_has_lowprice();
  inline void clear_has_lowprice();
  inline void set_has_closeprice();
  inline void clear_has_closeprice();
  inline void set_has_prevcloseprice();
  inline void clear_has_prevcloseprice();
  inline void set_has_aftermarketcloseprice();
  inline void clear_has_aftermarketcloseprice();
  inline void set_has_bidprice();
  inline void clear_has_bidprice();
  inline void set_has_askprice();
  inline void clear_has_askprice();
  inline void set_has_bidsize();
  inline void clear_has_bidsize();
  inline void set_has_asksize();
  inline void clear_has_asksize();
  inline void set_has_lastsize();
  inline void clear_has_lastsize();
  inline void set_has_volume();
  inline void clear_has_volume();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::NodeActiveTickProto::ATSymbol* symbol_;
  ::NodeActiveTickProto::ATPrice* lastprice_;
  ::NodeActiveTickProto::ATPrice* openprice_;
  ::NodeActiveTickProto::ATPrice* highprice_;
  ::NodeActiveTickProto::ATPrice* lowprice_;
  ::NodeActiveTickProto::ATPrice* closeprice_;
  ::NodeActiveTickProto::ATPrice* prevcloseprice_;
  ::NodeActiveTickProto::ATPrice* aftermarketcloseprice_;
  ::NodeActiveTickProto::ATPrice* bidprice_;
  ::NodeActiveTickProto::ATPrice* askprice_;
  ::google::protobuf::int32 bidsize_;
  ::google::protobuf::int32 asksize_;
  ::google::protobuf::int64 volume_;
  ::google::protobuf::int32 lastsize_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ATQuoteStreamRefreshUpdate* default_instance_;
};
// -------------------------------------------------------------------

class ATMarketMoversStreamUpdate : public ::google::protobuf::Message {
 public:
  ATMarketMoversStreamUpdate();
  virtual ~ATMarketMoversStreamUpdate();

  ATMarketMoversStreamUpdate(const ATMarketMoversStreamUpdate& from);

  inline ATMarketMoversStreamUpdate& operator=(const ATMarketMoversStreamUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ATMarketMoversStreamUpdate& default_instance();

  void Swap(ATMarketMoversStreamUpdate* other);

  // implements Message ----------------------------------------------

  ATMarketMoversStreamUpdate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ATMarketMoversStreamUpdate& from);
  void MergeFrom(const ATMarketMoversStreamUpdate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .NodeActiveTickProto.ATMarketMoversRecord marketMovers = 1;
  inline bool has_marketmovers() const;
  inline void clear_marketmovers();
  static const int kMarketMoversFieldNumber = 1;
  inline const ::NodeActiveTickProto::ATMarketMoversRecord& marketmovers() const;
  inline ::NodeActiveTickProto::ATMarketMoversRecord* mutable_marketmovers();
  inline ::NodeActiveTickProto::ATMarketMoversRecord* release_marketmovers();
  inline void set_allocated_marketmovers(::NodeActiveTickProto::ATMarketMoversRecord* marketmovers);

  // optional .NodeActiveTickProto.ATTime lastUpdatedTime = 2;
  inline bool has_lastupdatedtime() const;
  inline void clear_lastupdatedtime();
  static const int kLastUpdatedTimeFieldNumber = 2;
  inline const ::NodeActiveTickProto::ATTime& lastupdatedtime() const;
  inline ::NodeActiveTickProto::ATTime* mutable_lastupdatedtime();
  inline ::NodeActiveTickProto::ATTime* release_lastupdatedtime();
  inline void set_allocated_lastupdatedtime(::NodeActiveTickProto::ATTime* lastupdatedtime);

  // @@protoc_insertion_point(class_scope:NodeActiveTickProto.ATMarketMoversStreamUpdate)
 private:
  inline void set_has_marketmovers();
  inline void clear_has_marketmovers();
  inline void set_has_lastupdatedtime();
  inline void clear_has_lastupdatedtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::NodeActiveTickProto::ATMarketMoversRecord* marketmovers_;
  ::NodeActiveTickProto::ATTime* lastupdatedtime_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ATMarketMoversStreamUpdate* default_instance_;
};
// -------------------------------------------------------------------

class ATMarketMoversRecord : public ::google::protobuf::Message {
 public:
  ATMarketMoversRecord();
  virtual ~ATMarketMoversRecord();

  ATMarketMoversRecord(const ATMarketMoversRecord& from);

  inline ATMarketMoversRecord& operator=(const ATMarketMoversRecord& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ATMarketMoversRecord& default_instance();

  void Swap(ATMarketMoversRecord* other);

  // implements Message ----------------------------------------------

  ATMarketMoversRecord* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ATMarketMoversRecord& from);
  void MergeFrom(const ATMarketMoversRecord& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .NodeActiveTickProto.ATSymbol symbol = 1;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  inline const ::NodeActiveTickProto::ATSymbol& symbol() const;
  inline ::NodeActiveTickProto::ATSymbol* mutable_symbol();
  inline ::NodeActiveTickProto::ATSymbol* release_symbol();
  inline void set_allocated_symbol(::NodeActiveTickProto::ATSymbol* symbol);

  // optional string status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  inline ::std::string* release_status();
  inline void set_allocated_status(::std::string* status);

  // repeated .NodeActiveTickProto.ATMarketMoversItem item = 3;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 3;
  inline const ::NodeActiveTickProto::ATMarketMoversItem& item(int index) const;
  inline ::NodeActiveTickProto::ATMarketMoversItem* mutable_item(int index);
  inline ::NodeActiveTickProto::ATMarketMoversItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATMarketMoversItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATMarketMoversItem >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:NodeActiveTickProto.ATMarketMoversRecord)
 private:
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::NodeActiveTickProto::ATSymbol* symbol_;
  ::std::string* status_;
  ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATMarketMoversItem > item_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ATMarketMoversRecord* default_instance_;
};
// -------------------------------------------------------------------

class ATMarketMoversItem : public ::google::protobuf::Message {
 public:
  ATMarketMoversItem();
  virtual ~ATMarketMoversItem();

  ATMarketMoversItem(const ATMarketMoversItem& from);

  inline ATMarketMoversItem& operator=(const ATMarketMoversItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ATMarketMoversItem& default_instance();

  void Swap(ATMarketMoversItem* other);

  // implements Message ----------------------------------------------

  ATMarketMoversItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ATMarketMoversItem& from);
  void MergeFrom(const ATMarketMoversItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .NodeActiveTickProto.ATSymbol symbol = 1;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  inline const ::NodeActiveTickProto::ATSymbol& symbol() const;
  inline ::NodeActiveTickProto::ATSymbol* mutable_symbol();
  inline ::NodeActiveTickProto::ATSymbol* release_symbol();
  inline void set_allocated_symbol(::NodeActiveTickProto::ATSymbol* symbol);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional .NodeActiveTickProto.ATPrice lastPrice = 3;
  inline bool has_lastprice() const;
  inline void clear_lastprice();
  static const int kLastPriceFieldNumber = 3;
  inline const ::NodeActiveTickProto::ATPrice& lastprice() const;
  inline ::NodeActiveTickProto::ATPrice* mutable_lastprice();
  inline ::NodeActiveTickProto::ATPrice* release_lastprice();
  inline void set_allocated_lastprice(::NodeActiveTickProto::ATPrice* lastprice);

  // optional .NodeActiveTickProto.ATPrice closePrice = 4;
  inline bool has_closeprice() const;
  inline void clear_closeprice();
  static const int kClosePriceFieldNumber = 4;
  inline const ::NodeActiveTickProto::ATPrice& closeprice() const;
  inline ::NodeActiveTickProto::ATPrice* mutable_closeprice();
  inline ::NodeActiveTickProto::ATPrice* release_closeprice();
  inline void set_allocated_closeprice(::NodeActiveTickProto::ATPrice* closeprice);

  // optional .NodeActiveTickProto.ATTime lastDateTime = 5;
  inline bool has_lastdatetime() const;
  inline void clear_lastdatetime();
  static const int kLastDateTimeFieldNumber = 5;
  inline const ::NodeActiveTickProto::ATTime& lastdatetime() const;
  inline ::NodeActiveTickProto::ATTime* mutable_lastdatetime();
  inline ::NodeActiveTickProto::ATTime* release_lastdatetime();
  inline void set_allocated_lastdatetime(::NodeActiveTickProto::ATTime* lastdatetime);

  // @@protoc_insertion_point(class_scope:NodeActiveTickProto.ATMarketMoversItem)
 private:
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_lastprice();
  inline void clear_has_lastprice();
  inline void set_has_closeprice();
  inline void clear_has_closeprice();
  inline void set_has_lastdatetime();
  inline void clear_has_lastdatetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::NodeActiveTickProto::ATSymbol* symbol_;
  ::std::string* name_;
  ::NodeActiveTickProto::ATPrice* lastprice_;
  ::NodeActiveTickProto::ATPrice* closeprice_;
  ::NodeActiveTickProto::ATTime* lastdatetime_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ATMarketMoversItem* default_instance_;
};
// -------------------------------------------------------------------

class ATSymbol : public ::google::protobuf::Message {
 public:
  ATSymbol();
  virtual ~ATSymbol();

  ATSymbol(const ATSymbol& from);

  inline ATSymbol& operator=(const ATSymbol& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ATSymbol& default_instance();

  void Swap(ATSymbol* other);

  // implements Message ----------------------------------------------

  ATSymbol* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ATSymbol& from);
  void MergeFrom(const ATSymbol& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string symbol = 1;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  inline const ::std::string& symbol() const;
  inline void set_symbol(const ::std::string& value);
  inline void set_symbol(const char* value);
  inline void set_symbol(const char* value, size_t size);
  inline ::std::string* mutable_symbol();
  inline ::std::string* release_symbol();
  inline void set_allocated_symbol(::std::string* symbol);

  // optional int32 symbolType = 2;
  inline bool has_symboltype() const;
  inline void clear_symboltype();
  static const int kSymbolTypeFieldNumber = 2;
  inline ::google::protobuf::int32 symboltype() const;
  inline void set_symboltype(::google::protobuf::int32 value);

  // optional int32 exchangeType = 3;
  inline bool has_exchangetype() const;
  inline void clear_exchangetype();
  static const int kExchangeTypeFieldNumber = 3;
  inline ::google::protobuf::int32 exchangetype() const;
  inline void set_exchangetype(::google::protobuf::int32 value);

  // optional int32 countryType = 4;
  inline bool has_countrytype() const;
  inline void clear_countrytype();
  static const int kCountryTypeFieldNumber = 4;
  inline ::google::protobuf::int32 countrytype() const;
  inline void set_countrytype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NodeActiveTickProto.ATSymbol)
 private:
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_symboltype();
  inline void clear_has_symboltype();
  inline void set_has_exchangetype();
  inline void clear_has_exchangetype();
  inline void set_has_countrytype();
  inline void clear_has_countrytype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* symbol_;
  ::google::protobuf::int32 symboltype_;
  ::google::protobuf::int32 exchangetype_;
  ::google::protobuf::int32 countrytype_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ATSymbol* default_instance_;
};
// -------------------------------------------------------------------

class ATPrice : public ::google::protobuf::Message {
 public:
  ATPrice();
  virtual ~ATPrice();

  ATPrice(const ATPrice& from);

  inline ATPrice& operator=(const ATPrice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ATPrice& default_instance();

  void Swap(ATPrice* other);

  // implements Message ----------------------------------------------

  ATPrice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ATPrice& from);
  void MergeFrom(const ATPrice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double price = 1;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 1;
  inline double price() const;
  inline void set_price(double value);

  // required int32 precision = 2;
  inline bool has_precision() const;
  inline void clear_precision();
  static const int kPrecisionFieldNumber = 2;
  inline ::google::protobuf::int32 precision() const;
  inline void set_precision(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NodeActiveTickProto.ATPrice)
 private:
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_precision();
  inline void clear_has_precision();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double price_;
  ::google::protobuf::int32 precision_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ATPrice* default_instance_;
};
// -------------------------------------------------------------------

class ATQuote : public ::google::protobuf::Message {
 public:
  ATQuote();
  virtual ~ATQuote();

  ATQuote(const ATQuote& from);

  inline ATQuote& operator=(const ATQuote& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ATQuote& default_instance();

  void Swap(ATQuote* other);

  // implements Message ----------------------------------------------

  ATQuote* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ATQuote& from);
  void MergeFrom(const ATQuote& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .NodeActiveTickProto.ATSymbol symbol = 1;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 1;
  inline const ::NodeActiveTickProto::ATSymbol& symbol() const;
  inline ::NodeActiveTickProto::ATSymbol* mutable_symbol();
  inline ::NodeActiveTickProto::ATSymbol* release_symbol();
  inline void set_allocated_symbol(::NodeActiveTickProto::ATSymbol* symbol);

  // required .NodeActiveTickProto.ATPrice bidPrice = 2;
  inline bool has_bidprice() const;
  inline void clear_bidprice();
  static const int kBidPriceFieldNumber = 2;
  inline const ::NodeActiveTickProto::ATPrice& bidprice() const;
  inline ::NodeActiveTickProto::ATPrice* mutable_bidprice();
  inline ::NodeActiveTickProto::ATPrice* release_bidprice();
  inline void set_allocated_bidprice(::NodeActiveTickProto::ATPrice* bidprice);

  // required .NodeActiveTickProto.ATPrice askPrice = 3;
  inline bool has_askprice() const;
  inline void clear_askprice();
  static const int kAskPriceFieldNumber = 3;
  inline const ::NodeActiveTickProto::ATPrice& askprice() const;
  inline ::NodeActiveTickProto::ATPrice* mutable_askprice();
  inline ::NodeActiveTickProto::ATPrice* release_askprice();
  inline void set_allocated_askprice(::NodeActiveTickProto::ATPrice* askprice);

  // optional int32 bidSize = 4;
  inline bool has_bidsize() const;
  inline void clear_bidsize();
  static const int kBidSizeFieldNumber = 4;
  inline ::google::protobuf::int32 bidsize() const;
  inline void set_bidsize(::google::protobuf::int32 value);

  // optional int32 askSize = 5;
  inline bool has_asksize() const;
  inline void clear_asksize();
  static const int kAskSizeFieldNumber = 5;
  inline ::google::protobuf::int32 asksize() const;
  inline void set_asksize(::google::protobuf::int32 value);

  // optional int32 quoteConditionId = 6;
  inline bool has_quoteconditionid() const;
  inline void clear_quoteconditionid();
  static const int kQuoteConditionIdFieldNumber = 6;
  inline ::google::protobuf::int32 quoteconditionid() const;
  inline void set_quoteconditionid(::google::protobuf::int32 value);

  // optional .NodeActiveTickProto.ATTime serverTime = 7;
  inline bool has_servertime() const;
  inline void clear_servertime();
  static const int kServerTimeFieldNumber = 7;
  inline const ::NodeActiveTickProto::ATTime& servertime() const;
  inline ::NodeActiveTickProto::ATTime* mutable_servertime();
  inline ::NodeActiveTickProto::ATTime* release_servertime();
  inline void set_allocated_servertime(::NodeActiveTickProto::ATTime* servertime);

  // optional int32 bidExchangeId = 8;
  inline bool has_bidexchangeid() const;
  inline void clear_bidexchangeid();
  static const int kBidExchangeIdFieldNumber = 8;
  inline ::google::protobuf::int32 bidexchangeid() const;
  inline void set_bidexchangeid(::google::protobuf::int32 value);

  // optional int32 askExchangeId = 9;
  inline bool has_askexchangeid() const;
  inline void clear_askexchangeid();
  static const int kAskExchangeIdFieldNumber = 9;
  inline ::google::protobuf::int32 askexchangeid() const;
  inline void set_askexchangeid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NodeActiveTickProto.ATQuote)
 private:
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_bidprice();
  inline void clear_has_bidprice();
  inline void set_has_askprice();
  inline void clear_has_askprice();
  inline void set_has_bidsize();
  inline void clear_has_bidsize();
  inline void set_has_asksize();
  inline void clear_has_asksize();
  inline void set_has_quoteconditionid();
  inline void clear_has_quoteconditionid();
  inline void set_has_servertime();
  inline void clear_has_servertime();
  inline void set_has_bidexchangeid();
  inline void clear_has_bidexchangeid();
  inline void set_has_askexchangeid();
  inline void clear_has_askexchangeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::NodeActiveTickProto::ATSymbol* symbol_;
  ::NodeActiveTickProto::ATPrice* bidprice_;
  ::NodeActiveTickProto::ATPrice* askprice_;
  ::google::protobuf::int32 bidsize_;
  ::google::protobuf::int32 asksize_;
  ::NodeActiveTickProto::ATTime* servertime_;
  ::google::protobuf::int32 quoteconditionid_;
  ::google::protobuf::int32 bidexchangeid_;
  ::google::protobuf::int32 askexchangeid_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ATQuote* default_instance_;
};
// -------------------------------------------------------------------

class ATBarHistoryValue : public ::google::protobuf::Message {
 public:
  ATBarHistoryValue();
  virtual ~ATBarHistoryValue();

  ATBarHistoryValue(const ATBarHistoryValue& from);

  inline ATBarHistoryValue& operator=(const ATBarHistoryValue& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ATBarHistoryValue& default_instance();

  void Swap(ATBarHistoryValue* other);

  // implements Message ----------------------------------------------

  ATBarHistoryValue* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ATBarHistoryValue& from);
  void MergeFrom(const ATBarHistoryValue& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .NodeActiveTickProto.ATPrice open = 1;
  inline bool has_open() const;
  inline void clear_open();
  static const int kOpenFieldNumber = 1;
  inline const ::NodeActiveTickProto::ATPrice& open() const;
  inline ::NodeActiveTickProto::ATPrice* mutable_open();
  inline ::NodeActiveTickProto::ATPrice* release_open();
  inline void set_allocated_open(::NodeActiveTickProto::ATPrice* open);

  // optional .NodeActiveTickProto.ATPrice high = 2;
  inline bool has_high() const;
  inline void clear_high();
  static const int kHighFieldNumber = 2;
  inline const ::NodeActiveTickProto::ATPrice& high() const;
  inline ::NodeActiveTickProto::ATPrice* mutable_high();
  inline ::NodeActiveTickProto::ATPrice* release_high();
  inline void set_allocated_high(::NodeActiveTickProto::ATPrice* high);

  // optional .NodeActiveTickProto.ATPrice low = 3;
  inline bool has_low() const;
  inline void clear_low();
  static const int kLowFieldNumber = 3;
  inline const ::NodeActiveTickProto::ATPrice& low() const;
  inline ::NodeActiveTickProto::ATPrice* mutable_low();
  inline ::NodeActiveTickProto::ATPrice* release_low();
  inline void set_allocated_low(::NodeActiveTickProto::ATPrice* low);

  // optional .NodeActiveTickProto.ATPrice close = 4;
  inline bool has_close() const;
  inline void clear_close();
  static const int kCloseFieldNumber = 4;
  inline const ::NodeActiveTickProto::ATPrice& close() const;
  inline ::NodeActiveTickProto::ATPrice* mutable_close();
  inline ::NodeActiveTickProto::ATPrice* release_close();
  inline void set_allocated_close(::NodeActiveTickProto::ATPrice* close);

  // optional int64 volume = 5;
  inline bool has_volume() const;
  inline void clear_volume();
  static const int kVolumeFieldNumber = 5;
  inline ::google::protobuf::int64 volume() const;
  inline void set_volume(::google::protobuf::int64 value);

  // optional .NodeActiveTickProto.ATTime time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline const ::NodeActiveTickProto::ATTime& time() const;
  inline ::NodeActiveTickProto::ATTime* mutable_time();
  inline ::NodeActiveTickProto::ATTime* release_time();
  inline void set_allocated_time(::NodeActiveTickProto::ATTime* time);

  // optional .NodeActiveTickProto.ATSymbol symbol = 7;
  inline bool has_symbol() const;
  inline void clear_symbol();
  static const int kSymbolFieldNumber = 7;
  inline const ::NodeActiveTickProto::ATSymbol& symbol() const;
  inline ::NodeActiveTickProto::ATSymbol* mutable_symbol();
  inline ::NodeActiveTickProto::ATSymbol* release_symbol();
  inline void set_allocated_symbol(::NodeActiveTickProto::ATSymbol* symbol);

  // optional string status = 8;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 8;
  inline const ::std::string& status() const;
  inline void set_status(const ::std::string& value);
  inline void set_status(const char* value);
  inline void set_status(const char* value, size_t size);
  inline ::std::string* mutable_status();
  inline ::std::string* release_status();
  inline void set_allocated_status(::std::string* status);

  // @@protoc_insertion_point(class_scope:NodeActiveTickProto.ATBarHistoryValue)
 private:
  inline void set_has_open();
  inline void clear_has_open();
  inline void set_has_high();
  inline void clear_has_high();
  inline void set_has_low();
  inline void clear_has_low();
  inline void set_has_close();
  inline void clear_has_close();
  inline void set_has_volume();
  inline void clear_has_volume();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_symbol();
  inline void clear_has_symbol();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::NodeActiveTickProto::ATPrice* open_;
  ::NodeActiveTickProto::ATPrice* high_;
  ::NodeActiveTickProto::ATPrice* low_;
  ::NodeActiveTickProto::ATPrice* close_;
  ::google::protobuf::int64 volume_;
  ::NodeActiveTickProto::ATTime* time_;
  ::NodeActiveTickProto::ATSymbol* symbol_;
  ::std::string* status_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ATBarHistoryValue* default_instance_;
};
// -------------------------------------------------------------------

class ATBarHistoryDbResponse : public ::google::protobuf::Message {
 public:
  ATBarHistoryDbResponse();
  virtual ~ATBarHistoryDbResponse();

  ATBarHistoryDbResponse(const ATBarHistoryDbResponse& from);

  inline ATBarHistoryDbResponse& operator=(const ATBarHistoryDbResponse& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ATBarHistoryDbResponse& default_instance();

  void Swap(ATBarHistoryDbResponse* other);

  // implements Message ----------------------------------------------

  ATBarHistoryDbResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ATBarHistoryDbResponse& from);
  void MergeFrom(const ATBarHistoryDbResponse& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NodeActiveTickProto.ATBarHistoryValue value = 1;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 1;
  inline const ::NodeActiveTickProto::ATBarHistoryValue& value(int index) const;
  inline ::NodeActiveTickProto::ATBarHistoryValue* mutable_value(int index);
  inline ::NodeActiveTickProto::ATBarHistoryValue* add_value();
  inline const ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATBarHistoryValue >&
      value() const;
  inline ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATBarHistoryValue >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:NodeActiveTickProto.ATBarHistoryDbResponse)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATBarHistoryValue > value_;
  friend void  protobuf_AddDesc_messages_2eproto();
  friend void protobuf_AssignDesc_messages_2eproto();
  friend void protobuf_ShutdownFile_messages_2eproto();

  void InitAsDefaultInstance();
  static ATBarHistoryDbResponse* default_instance_;
};
// ===================================================================


// ===================================================================

// ATLoginResponse

// required int32 loginResponseType = 1;
inline bool ATLoginResponse::has_loginresponsetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ATLoginResponse::set_has_loginresponsetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ATLoginResponse::clear_has_loginresponsetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ATLoginResponse::clear_loginresponsetype() {
  loginresponsetype_ = 0;
  clear_has_loginresponsetype();
}
inline ::google::protobuf::int32 ATLoginResponse::loginresponsetype() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATLoginResponse.loginResponseType)
  return loginresponsetype_;
}
inline void ATLoginResponse::set_loginresponsetype(::google::protobuf::int32 value) {
  set_has_loginresponsetype();
  loginresponsetype_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATLoginResponse.loginResponseType)
}

// required string loginResponseString = 2;
inline bool ATLoginResponse::has_loginresponsestring() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ATLoginResponse::set_has_loginresponsestring() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ATLoginResponse::clear_has_loginresponsestring() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ATLoginResponse::clear_loginresponsestring() {
  if (loginresponsestring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginresponsestring_->clear();
  }
  clear_has_loginresponsestring();
}
inline const ::std::string& ATLoginResponse::loginresponsestring() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATLoginResponse.loginResponseString)
  return *loginresponsestring_;
}
inline void ATLoginResponse::set_loginresponsestring(const ::std::string& value) {
  set_has_loginresponsestring();
  if (loginresponsestring_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginresponsestring_ = new ::std::string;
  }
  loginresponsestring_->assign(value);
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATLoginResponse.loginResponseString)
}
inline void ATLoginResponse::set_loginresponsestring(const char* value) {
  set_has_loginresponsestring();
  if (loginresponsestring_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginresponsestring_ = new ::std::string;
  }
  loginresponsestring_->assign(value);
  // @@protoc_insertion_point(field_set_char:NodeActiveTickProto.ATLoginResponse.loginResponseString)
}
inline void ATLoginResponse::set_loginresponsestring(const char* value, size_t size) {
  set_has_loginresponsestring();
  if (loginresponsestring_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginresponsestring_ = new ::std::string;
  }
  loginresponsestring_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NodeActiveTickProto.ATLoginResponse.loginResponseString)
}
inline ::std::string* ATLoginResponse::mutable_loginresponsestring() {
  set_has_loginresponsestring();
  if (loginresponsestring_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    loginresponsestring_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATLoginResponse.loginResponseString)
  return loginresponsestring_;
}
inline ::std::string* ATLoginResponse::release_loginresponsestring() {
  clear_has_loginresponsestring();
  if (loginresponsestring_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = loginresponsestring_;
    loginresponsestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ATLoginResponse::set_allocated_loginresponsestring(::std::string* loginresponsestring) {
  if (loginresponsestring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loginresponsestring_;
  }
  if (loginresponsestring) {
    set_has_loginresponsestring();
    loginresponsestring_ = loginresponsestring;
  } else {
    clear_has_loginresponsestring();
    loginresponsestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATLoginResponse.loginResponseString)
}

// -------------------------------------------------------------------

// ATConstituentResponse

// repeated .NodeActiveTickProto.ATSymbol symbols = 1;
inline int ATConstituentResponse::symbols_size() const {
  return symbols_.size();
}
inline void ATConstituentResponse::clear_symbols() {
  symbols_.Clear();
}
inline const ::NodeActiveTickProto::ATSymbol& ATConstituentResponse::symbols(int index) const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATConstituentResponse.symbols)
  return symbols_.Get(index);
}
inline ::NodeActiveTickProto::ATSymbol* ATConstituentResponse::mutable_symbols(int index) {
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATConstituentResponse.symbols)
  return symbols_.Mutable(index);
}
inline ::NodeActiveTickProto::ATSymbol* ATConstituentResponse::add_symbols() {
  // @@protoc_insertion_point(field_add:NodeActiveTickProto.ATConstituentResponse.symbols)
  return symbols_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATSymbol >&
ATConstituentResponse::symbols() const {
  // @@protoc_insertion_point(field_list:NodeActiveTickProto.ATConstituentResponse.symbols)
  return symbols_;
}
inline ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATSymbol >*
ATConstituentResponse::mutable_symbols() {
  // @@protoc_insertion_point(field_mutable_list:NodeActiveTickProto.ATConstituentResponse.symbols)
  return &symbols_;
}

// -------------------------------------------------------------------

// ATQuoteStreamResponse

// optional string quoteStreamResponseType = 1;
inline bool ATQuoteStreamResponse::has_quotestreamresponsetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ATQuoteStreamResponse::set_has_quotestreamresponsetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ATQuoteStreamResponse::clear_has_quotestreamresponsetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ATQuoteStreamResponse::clear_quotestreamresponsetype() {
  if (quotestreamresponsetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quotestreamresponsetype_->clear();
  }
  clear_has_quotestreamresponsetype();
}
inline const ::std::string& ATQuoteStreamResponse::quotestreamresponsetype() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamResponse.quoteStreamResponseType)
  return *quotestreamresponsetype_;
}
inline void ATQuoteStreamResponse::set_quotestreamresponsetype(const ::std::string& value) {
  set_has_quotestreamresponsetype();
  if (quotestreamresponsetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quotestreamresponsetype_ = new ::std::string;
  }
  quotestreamresponsetype_->assign(value);
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamResponse.quoteStreamResponseType)
}
inline void ATQuoteStreamResponse::set_quotestreamresponsetype(const char* value) {
  set_has_quotestreamresponsetype();
  if (quotestreamresponsetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quotestreamresponsetype_ = new ::std::string;
  }
  quotestreamresponsetype_->assign(value);
  // @@protoc_insertion_point(field_set_char:NodeActiveTickProto.ATQuoteStreamResponse.quoteStreamResponseType)
}
inline void ATQuoteStreamResponse::set_quotestreamresponsetype(const char* value, size_t size) {
  set_has_quotestreamresponsetype();
  if (quotestreamresponsetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quotestreamresponsetype_ = new ::std::string;
  }
  quotestreamresponsetype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NodeActiveTickProto.ATQuoteStreamResponse.quoteStreamResponseType)
}
inline ::std::string* ATQuoteStreamResponse::mutable_quotestreamresponsetype() {
  set_has_quotestreamresponsetype();
  if (quotestreamresponsetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quotestreamresponsetype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamResponse.quoteStreamResponseType)
  return quotestreamresponsetype_;
}
inline ::std::string* ATQuoteStreamResponse::release_quotestreamresponsetype() {
  clear_has_quotestreamresponsetype();
  if (quotestreamresponsetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = quotestreamresponsetype_;
    quotestreamresponsetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ATQuoteStreamResponse::set_allocated_quotestreamresponsetype(::std::string* quotestreamresponsetype) {
  if (quotestreamresponsetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete quotestreamresponsetype_;
  }
  if (quotestreamresponsetype) {
    set_has_quotestreamresponsetype();
    quotestreamresponsetype_ = quotestreamresponsetype;
  } else {
    clear_has_quotestreamresponsetype();
    quotestreamresponsetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamResponse.quoteStreamResponseType)
}

// optional int32 quoteResponseCount = 2;
inline bool ATQuoteStreamResponse::has_quoteresponsecount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ATQuoteStreamResponse::set_has_quoteresponsecount() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ATQuoteStreamResponse::clear_has_quoteresponsecount() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ATQuoteStreamResponse::clear_quoteresponsecount() {
  quoteresponsecount_ = 0;
  clear_has_quoteresponsecount();
}
inline ::google::protobuf::int32 ATQuoteStreamResponse::quoteresponsecount() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamResponse.quoteResponseCount)
  return quoteresponsecount_;
}
inline void ATQuoteStreamResponse::set_quoteresponsecount(::google::protobuf::int32 value) {
  set_has_quoteresponsecount();
  quoteresponsecount_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamResponse.quoteResponseCount)
}

// repeated .NodeActiveTickProto.ATQuoteStreamResponseItem quoteStreamItems = 3;
inline int ATQuoteStreamResponse::quotestreamitems_size() const {
  return quotestreamitems_.size();
}
inline void ATQuoteStreamResponse::clear_quotestreamitems() {
  quotestreamitems_.Clear();
}
inline const ::NodeActiveTickProto::ATQuoteStreamResponseItem& ATQuoteStreamResponse::quotestreamitems(int index) const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamResponse.quoteStreamItems)
  return quotestreamitems_.Get(index);
}
inline ::NodeActiveTickProto::ATQuoteStreamResponseItem* ATQuoteStreamResponse::mutable_quotestreamitems(int index) {
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamResponse.quoteStreamItems)
  return quotestreamitems_.Mutable(index);
}
inline ::NodeActiveTickProto::ATQuoteStreamResponseItem* ATQuoteStreamResponse::add_quotestreamitems() {
  // @@protoc_insertion_point(field_add:NodeActiveTickProto.ATQuoteStreamResponse.quoteStreamItems)
  return quotestreamitems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATQuoteStreamResponseItem >&
ATQuoteStreamResponse::quotestreamitems() const {
  // @@protoc_insertion_point(field_list:NodeActiveTickProto.ATQuoteStreamResponse.quoteStreamItems)
  return quotestreamitems_;
}
inline ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATQuoteStreamResponseItem >*
ATQuoteStreamResponse::mutable_quotestreamitems() {
  // @@protoc_insertion_point(field_mutable_list:NodeActiveTickProto.ATQuoteStreamResponse.quoteStreamItems)
  return &quotestreamitems_;
}

// -------------------------------------------------------------------

// ATQuoteStreamResponseItem

// optional string responseType = 1;
inline bool ATQuoteStreamResponseItem::has_responsetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ATQuoteStreamResponseItem::set_has_responsetype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ATQuoteStreamResponseItem::clear_has_responsetype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ATQuoteStreamResponseItem::clear_responsetype() {
  if (responsetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    responsetype_->clear();
  }
  clear_has_responsetype();
}
inline const ::std::string& ATQuoteStreamResponseItem::responsetype() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamResponseItem.responseType)
  return *responsetype_;
}
inline void ATQuoteStreamResponseItem::set_responsetype(const ::std::string& value) {
  set_has_responsetype();
  if (responsetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    responsetype_ = new ::std::string;
  }
  responsetype_->assign(value);
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamResponseItem.responseType)
}
inline void ATQuoteStreamResponseItem::set_responsetype(const char* value) {
  set_has_responsetype();
  if (responsetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    responsetype_ = new ::std::string;
  }
  responsetype_->assign(value);
  // @@protoc_insertion_point(field_set_char:NodeActiveTickProto.ATQuoteStreamResponseItem.responseType)
}
inline void ATQuoteStreamResponseItem::set_responsetype(const char* value, size_t size) {
  set_has_responsetype();
  if (responsetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    responsetype_ = new ::std::string;
  }
  responsetype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NodeActiveTickProto.ATQuoteStreamResponseItem.responseType)
}
inline ::std::string* ATQuoteStreamResponseItem::mutable_responsetype() {
  set_has_responsetype();
  if (responsetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    responsetype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamResponseItem.responseType)
  return responsetype_;
}
inline ::std::string* ATQuoteStreamResponseItem::release_responsetype() {
  clear_has_responsetype();
  if (responsetype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = responsetype_;
    responsetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ATQuoteStreamResponseItem::set_allocated_responsetype(::std::string* responsetype) {
  if (responsetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete responsetype_;
  }
  if (responsetype) {
    set_has_responsetype();
    responsetype_ = responsetype;
  } else {
    clear_has_responsetype();
    responsetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamResponseItem.responseType)
}

// optional .NodeActiveTickProto.ATSymbol symbol = 2;
inline bool ATQuoteStreamResponseItem::has_symbol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ATQuoteStreamResponseItem::set_has_symbol() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ATQuoteStreamResponseItem::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ATQuoteStreamResponseItem::clear_symbol() {
  if (symbol_ != NULL) symbol_->::NodeActiveTickProto::ATSymbol::Clear();
  clear_has_symbol();
}
inline const ::NodeActiveTickProto::ATSymbol& ATQuoteStreamResponseItem::symbol() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamResponseItem.symbol)
  return symbol_ != NULL ? *symbol_ : *default_instance_->symbol_;
}
inline ::NodeActiveTickProto::ATSymbol* ATQuoteStreamResponseItem::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == NULL) symbol_ = new ::NodeActiveTickProto::ATSymbol;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamResponseItem.symbol)
  return symbol_;
}
inline ::NodeActiveTickProto::ATSymbol* ATQuoteStreamResponseItem::release_symbol() {
  clear_has_symbol();
  ::NodeActiveTickProto::ATSymbol* temp = symbol_;
  symbol_ = NULL;
  return temp;
}
inline void ATQuoteStreamResponseItem::set_allocated_symbol(::NodeActiveTickProto::ATSymbol* symbol) {
  delete symbol_;
  symbol_ = symbol;
  if (symbol) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamResponseItem.symbol)
}

// optional string symbolStatus = 3;
inline bool ATQuoteStreamResponseItem::has_symbolstatus() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ATQuoteStreamResponseItem::set_has_symbolstatus() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ATQuoteStreamResponseItem::clear_has_symbolstatus() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ATQuoteStreamResponseItem::clear_symbolstatus() {
  if (symbolstatus_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbolstatus_->clear();
  }
  clear_has_symbolstatus();
}
inline const ::std::string& ATQuoteStreamResponseItem::symbolstatus() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamResponseItem.symbolStatus)
  return *symbolstatus_;
}
inline void ATQuoteStreamResponseItem::set_symbolstatus(const ::std::string& value) {
  set_has_symbolstatus();
  if (symbolstatus_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbolstatus_ = new ::std::string;
  }
  symbolstatus_->assign(value);
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamResponseItem.symbolStatus)
}
inline void ATQuoteStreamResponseItem::set_symbolstatus(const char* value) {
  set_has_symbolstatus();
  if (symbolstatus_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbolstatus_ = new ::std::string;
  }
  symbolstatus_->assign(value);
  // @@protoc_insertion_point(field_set_char:NodeActiveTickProto.ATQuoteStreamResponseItem.symbolStatus)
}
inline void ATQuoteStreamResponseItem::set_symbolstatus(const char* value, size_t size) {
  set_has_symbolstatus();
  if (symbolstatus_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbolstatus_ = new ::std::string;
  }
  symbolstatus_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NodeActiveTickProto.ATQuoteStreamResponseItem.symbolStatus)
}
inline ::std::string* ATQuoteStreamResponseItem::mutable_symbolstatus() {
  set_has_symbolstatus();
  if (symbolstatus_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbolstatus_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamResponseItem.symbolStatus)
  return symbolstatus_;
}
inline ::std::string* ATQuoteStreamResponseItem::release_symbolstatus() {
  clear_has_symbolstatus();
  if (symbolstatus_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = symbolstatus_;
    symbolstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ATQuoteStreamResponseItem::set_allocated_symbolstatus(::std::string* symbolstatus) {
  if (symbolstatus_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbolstatus_;
  }
  if (symbolstatus) {
    set_has_symbolstatus();
    symbolstatus_ = symbolstatus;
  } else {
    clear_has_symbolstatus();
    symbolstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamResponseItem.symbolStatus)
}

// -------------------------------------------------------------------

// ATTime

// optional int32 year = 1;
inline bool ATTime::has_year() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ATTime::set_has_year() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ATTime::clear_has_year() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ATTime::clear_year() {
  year_ = 0;
  clear_has_year();
}
inline ::google::protobuf::int32 ATTime::year() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATTime.year)
  return year_;
}
inline void ATTime::set_year(::google::protobuf::int32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATTime.year)
}

// optional int32 month = 2;
inline bool ATTime::has_month() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ATTime::set_has_month() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ATTime::clear_has_month() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ATTime::clear_month() {
  month_ = 0;
  clear_has_month();
}
inline ::google::protobuf::int32 ATTime::month() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATTime.month)
  return month_;
}
inline void ATTime::set_month(::google::protobuf::int32 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATTime.month)
}

// optional int32 dayOfWeek = 3;
inline bool ATTime::has_dayofweek() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ATTime::set_has_dayofweek() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ATTime::clear_has_dayofweek() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ATTime::clear_dayofweek() {
  dayofweek_ = 0;
  clear_has_dayofweek();
}
inline ::google::protobuf::int32 ATTime::dayofweek() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATTime.dayOfWeek)
  return dayofweek_;
}
inline void ATTime::set_dayofweek(::google::protobuf::int32 value) {
  set_has_dayofweek();
  dayofweek_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATTime.dayOfWeek)
}

// optional int32 day = 4;
inline bool ATTime::has_day() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ATTime::set_has_day() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ATTime::clear_has_day() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ATTime::clear_day() {
  day_ = 0;
  clear_has_day();
}
inline ::google::protobuf::int32 ATTime::day() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATTime.day)
  return day_;
}
inline void ATTime::set_day(::google::protobuf::int32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATTime.day)
}

// optional int32 hour = 5;
inline bool ATTime::has_hour() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ATTime::set_has_hour() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ATTime::clear_has_hour() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ATTime::clear_hour() {
  hour_ = 0;
  clear_has_hour();
}
inline ::google::protobuf::int32 ATTime::hour() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATTime.hour)
  return hour_;
}
inline void ATTime::set_hour(::google::protobuf::int32 value) {
  set_has_hour();
  hour_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATTime.hour)
}

// optional int32 minute = 6;
inline bool ATTime::has_minute() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ATTime::set_has_minute() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ATTime::clear_has_minute() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ATTime::clear_minute() {
  minute_ = 0;
  clear_has_minute();
}
inline ::google::protobuf::int32 ATTime::minute() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATTime.minute)
  return minute_;
}
inline void ATTime::set_minute(::google::protobuf::int32 value) {
  set_has_minute();
  minute_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATTime.minute)
}

// optional int32 second = 7;
inline bool ATTime::has_second() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ATTime::set_has_second() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ATTime::clear_has_second() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ATTime::clear_second() {
  second_ = 0;
  clear_has_second();
}
inline ::google::protobuf::int32 ATTime::second() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATTime.second)
  return second_;
}
inline void ATTime::set_second(::google::protobuf::int32 value) {
  set_has_second();
  second_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATTime.second)
}

// optional int32 milliseconds = 8;
inline bool ATTime::has_milliseconds() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ATTime::set_has_milliseconds() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ATTime::clear_has_milliseconds() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ATTime::clear_milliseconds() {
  milliseconds_ = 0;
  clear_has_milliseconds();
}
inline ::google::protobuf::int32 ATTime::milliseconds() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATTime.milliseconds)
  return milliseconds_;
}
inline void ATTime::set_milliseconds(::google::protobuf::int32 value) {
  set_has_milliseconds();
  milliseconds_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATTime.milliseconds)
}

// -------------------------------------------------------------------

// ATQuoteStreamTradeUpdate

// optional .NodeActiveTickProto.ATSymbol tradeSymbol = 1;
inline bool ATQuoteStreamTradeUpdate::has_tradesymbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ATQuoteStreamTradeUpdate::set_has_tradesymbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ATQuoteStreamTradeUpdate::clear_has_tradesymbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ATQuoteStreamTradeUpdate::clear_tradesymbol() {
  if (tradesymbol_ != NULL) tradesymbol_->::NodeActiveTickProto::ATSymbol::Clear();
  clear_has_tradesymbol();
}
inline const ::NodeActiveTickProto::ATSymbol& ATQuoteStreamTradeUpdate::tradesymbol() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeSymbol)
  return tradesymbol_ != NULL ? *tradesymbol_ : *default_instance_->tradesymbol_;
}
inline ::NodeActiveTickProto::ATSymbol* ATQuoteStreamTradeUpdate::mutable_tradesymbol() {
  set_has_tradesymbol();
  if (tradesymbol_ == NULL) tradesymbol_ = new ::NodeActiveTickProto::ATSymbol;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeSymbol)
  return tradesymbol_;
}
inline ::NodeActiveTickProto::ATSymbol* ATQuoteStreamTradeUpdate::release_tradesymbol() {
  clear_has_tradesymbol();
  ::NodeActiveTickProto::ATSymbol* temp = tradesymbol_;
  tradesymbol_ = NULL;
  return temp;
}
inline void ATQuoteStreamTradeUpdate::set_allocated_tradesymbol(::NodeActiveTickProto::ATSymbol* tradesymbol) {
  delete tradesymbol_;
  tradesymbol_ = tradesymbol;
  if (tradesymbol) {
    set_has_tradesymbol();
  } else {
    clear_has_tradesymbol();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeSymbol)
}

// optional int32 tradeMessageFlags = 2;
inline bool ATQuoteStreamTradeUpdate::has_trademessageflags() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ATQuoteStreamTradeUpdate::set_has_trademessageflags() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ATQuoteStreamTradeUpdate::clear_has_trademessageflags() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ATQuoteStreamTradeUpdate::clear_trademessageflags() {
  trademessageflags_ = 0;
  clear_has_trademessageflags();
}
inline ::google::protobuf::int32 ATQuoteStreamTradeUpdate::trademessageflags() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeMessageFlags)
  return trademessageflags_;
}
inline void ATQuoteStreamTradeUpdate::set_trademessageflags(::google::protobuf::int32 value) {
  set_has_trademessageflags();
  trademessageflags_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeMessageFlags)
}

// repeated string tradeConditionType = 3;
inline int ATQuoteStreamTradeUpdate::tradeconditiontype_size() const {
  return tradeconditiontype_.size();
}
inline void ATQuoteStreamTradeUpdate::clear_tradeconditiontype() {
  tradeconditiontype_.Clear();
}
inline const ::std::string& ATQuoteStreamTradeUpdate::tradeconditiontype(int index) const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeConditionType)
  return tradeconditiontype_.Get(index);
}
inline ::std::string* ATQuoteStreamTradeUpdate::mutable_tradeconditiontype(int index) {
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeConditionType)
  return tradeconditiontype_.Mutable(index);
}
inline void ATQuoteStreamTradeUpdate::set_tradeconditiontype(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeConditionType)
  tradeconditiontype_.Mutable(index)->assign(value);
}
inline void ATQuoteStreamTradeUpdate::set_tradeconditiontype(int index, const char* value) {
  tradeconditiontype_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeConditionType)
}
inline void ATQuoteStreamTradeUpdate::set_tradeconditiontype(int index, const char* value, size_t size) {
  tradeconditiontype_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeConditionType)
}
inline ::std::string* ATQuoteStreamTradeUpdate::add_tradeconditiontype() {
  return tradeconditiontype_.Add();
}
inline void ATQuoteStreamTradeUpdate::add_tradeconditiontype(const ::std::string& value) {
  tradeconditiontype_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeConditionType)
}
inline void ATQuoteStreamTradeUpdate::add_tradeconditiontype(const char* value) {
  tradeconditiontype_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeConditionType)
}
inline void ATQuoteStreamTradeUpdate::add_tradeconditiontype(const char* value, size_t size) {
  tradeconditiontype_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeConditionType)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ATQuoteStreamTradeUpdate::tradeconditiontype() const {
  // @@protoc_insertion_point(field_list:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeConditionType)
  return tradeconditiontype_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ATQuoteStreamTradeUpdate::mutable_tradeconditiontype() {
  // @@protoc_insertion_point(field_mutable_list:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeConditionType)
  return &tradeconditiontype_;
}

// optional string tradeExchange = 4;
inline bool ATQuoteStreamTradeUpdate::has_tradeexchange() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ATQuoteStreamTradeUpdate::set_has_tradeexchange() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ATQuoteStreamTradeUpdate::clear_has_tradeexchange() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ATQuoteStreamTradeUpdate::clear_tradeexchange() {
  if (tradeexchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tradeexchange_->clear();
  }
  clear_has_tradeexchange();
}
inline const ::std::string& ATQuoteStreamTradeUpdate::tradeexchange() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeExchange)
  return *tradeexchange_;
}
inline void ATQuoteStreamTradeUpdate::set_tradeexchange(const ::std::string& value) {
  set_has_tradeexchange();
  if (tradeexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tradeexchange_ = new ::std::string;
  }
  tradeexchange_->assign(value);
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeExchange)
}
inline void ATQuoteStreamTradeUpdate::set_tradeexchange(const char* value) {
  set_has_tradeexchange();
  if (tradeexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tradeexchange_ = new ::std::string;
  }
  tradeexchange_->assign(value);
  // @@protoc_insertion_point(field_set_char:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeExchange)
}
inline void ATQuoteStreamTradeUpdate::set_tradeexchange(const char* value, size_t size) {
  set_has_tradeexchange();
  if (tradeexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tradeexchange_ = new ::std::string;
  }
  tradeexchange_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeExchange)
}
inline ::std::string* ATQuoteStreamTradeUpdate::mutable_tradeexchange() {
  set_has_tradeexchange();
  if (tradeexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    tradeexchange_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeExchange)
  return tradeexchange_;
}
inline ::std::string* ATQuoteStreamTradeUpdate::release_tradeexchange() {
  clear_has_tradeexchange();
  if (tradeexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = tradeexchange_;
    tradeexchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ATQuoteStreamTradeUpdate::set_allocated_tradeexchange(::std::string* tradeexchange) {
  if (tradeexchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tradeexchange_;
  }
  if (tradeexchange) {
    set_has_tradeexchange();
    tradeexchange_ = tradeexchange;
  } else {
    clear_has_tradeexchange();
    tradeexchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeExchange)
}

// optional .NodeActiveTickProto.ATPrice tradePrice = 5;
inline bool ATQuoteStreamTradeUpdate::has_tradeprice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ATQuoteStreamTradeUpdate::set_has_tradeprice() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ATQuoteStreamTradeUpdate::clear_has_tradeprice() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ATQuoteStreamTradeUpdate::clear_tradeprice() {
  if (tradeprice_ != NULL) tradeprice_->::NodeActiveTickProto::ATPrice::Clear();
  clear_has_tradeprice();
}
inline const ::NodeActiveTickProto::ATPrice& ATQuoteStreamTradeUpdate::tradeprice() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradePrice)
  return tradeprice_ != NULL ? *tradeprice_ : *default_instance_->tradeprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamTradeUpdate::mutable_tradeprice() {
  set_has_tradeprice();
  if (tradeprice_ == NULL) tradeprice_ = new ::NodeActiveTickProto::ATPrice;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradePrice)
  return tradeprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamTradeUpdate::release_tradeprice() {
  clear_has_tradeprice();
  ::NodeActiveTickProto::ATPrice* temp = tradeprice_;
  tradeprice_ = NULL;
  return temp;
}
inline void ATQuoteStreamTradeUpdate::set_allocated_tradeprice(::NodeActiveTickProto::ATPrice* tradeprice) {
  delete tradeprice_;
  tradeprice_ = tradeprice;
  if (tradeprice) {
    set_has_tradeprice();
  } else {
    clear_has_tradeprice();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradePrice)
}

// optional int32 tradeSize = 6;
inline bool ATQuoteStreamTradeUpdate::has_tradesize() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ATQuoteStreamTradeUpdate::set_has_tradesize() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ATQuoteStreamTradeUpdate::clear_has_tradesize() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ATQuoteStreamTradeUpdate::clear_tradesize() {
  tradesize_ = 0;
  clear_has_tradesize();
}
inline ::google::protobuf::int32 ATQuoteStreamTradeUpdate::tradesize() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeSize)
  return tradesize_;
}
inline void ATQuoteStreamTradeUpdate::set_tradesize(::google::protobuf::int32 value) {
  set_has_tradesize();
  tradesize_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeSize)
}

// optional .NodeActiveTickProto.ATTime tradeTime = 7;
inline bool ATQuoteStreamTradeUpdate::has_tradetime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ATQuoteStreamTradeUpdate::set_has_tradetime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ATQuoteStreamTradeUpdate::clear_has_tradetime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ATQuoteStreamTradeUpdate::clear_tradetime() {
  if (tradetime_ != NULL) tradetime_->::NodeActiveTickProto::ATTime::Clear();
  clear_has_tradetime();
}
inline const ::NodeActiveTickProto::ATTime& ATQuoteStreamTradeUpdate::tradetime() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeTime)
  return tradetime_ != NULL ? *tradetime_ : *default_instance_->tradetime_;
}
inline ::NodeActiveTickProto::ATTime* ATQuoteStreamTradeUpdate::mutable_tradetime() {
  set_has_tradetime();
  if (tradetime_ == NULL) tradetime_ = new ::NodeActiveTickProto::ATTime;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeTime)
  return tradetime_;
}
inline ::NodeActiveTickProto::ATTime* ATQuoteStreamTradeUpdate::release_tradetime() {
  clear_has_tradetime();
  ::NodeActiveTickProto::ATTime* temp = tradetime_;
  tradetime_ = NULL;
  return temp;
}
inline void ATQuoteStreamTradeUpdate::set_allocated_tradetime(::NodeActiveTickProto::ATTime* tradetime) {
  delete tradetime_;
  tradetime_ = tradetime;
  if (tradetime) {
    set_has_tradetime();
  } else {
    clear_has_tradetime();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamTradeUpdate.tradeTime)
}

// -------------------------------------------------------------------

// ATQuoteStreamQuoteUpdate

// optional .NodeActiveTickProto.ATSymbol quoteSymbol = 1;
inline bool ATQuoteStreamQuoteUpdate::has_quotesymbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ATQuoteStreamQuoteUpdate::set_has_quotesymbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ATQuoteStreamQuoteUpdate::clear_has_quotesymbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ATQuoteStreamQuoteUpdate::clear_quotesymbol() {
  if (quotesymbol_ != NULL) quotesymbol_->::NodeActiveTickProto::ATSymbol::Clear();
  clear_has_quotesymbol();
}
inline const ::NodeActiveTickProto::ATSymbol& ATQuoteStreamQuoteUpdate::quotesymbol() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteSymbol)
  return quotesymbol_ != NULL ? *quotesymbol_ : *default_instance_->quotesymbol_;
}
inline ::NodeActiveTickProto::ATSymbol* ATQuoteStreamQuoteUpdate::mutable_quotesymbol() {
  set_has_quotesymbol();
  if (quotesymbol_ == NULL) quotesymbol_ = new ::NodeActiveTickProto::ATSymbol;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteSymbol)
  return quotesymbol_;
}
inline ::NodeActiveTickProto::ATSymbol* ATQuoteStreamQuoteUpdate::release_quotesymbol() {
  clear_has_quotesymbol();
  ::NodeActiveTickProto::ATSymbol* temp = quotesymbol_;
  quotesymbol_ = NULL;
  return temp;
}
inline void ATQuoteStreamQuoteUpdate::set_allocated_quotesymbol(::NodeActiveTickProto::ATSymbol* quotesymbol) {
  delete quotesymbol_;
  quotesymbol_ = quotesymbol;
  if (quotesymbol) {
    set_has_quotesymbol();
  } else {
    clear_has_quotesymbol();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteSymbol)
}

// optional string quoteCondition = 2;
inline bool ATQuoteStreamQuoteUpdate::has_quotecondition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ATQuoteStreamQuoteUpdate::set_has_quotecondition() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ATQuoteStreamQuoteUpdate::clear_has_quotecondition() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ATQuoteStreamQuoteUpdate::clear_quotecondition() {
  if (quotecondition_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quotecondition_->clear();
  }
  clear_has_quotecondition();
}
inline const ::std::string& ATQuoteStreamQuoteUpdate::quotecondition() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteCondition)
  return *quotecondition_;
}
inline void ATQuoteStreamQuoteUpdate::set_quotecondition(const ::std::string& value) {
  set_has_quotecondition();
  if (quotecondition_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quotecondition_ = new ::std::string;
  }
  quotecondition_->assign(value);
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteCondition)
}
inline void ATQuoteStreamQuoteUpdate::set_quotecondition(const char* value) {
  set_has_quotecondition();
  if (quotecondition_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quotecondition_ = new ::std::string;
  }
  quotecondition_->assign(value);
  // @@protoc_insertion_point(field_set_char:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteCondition)
}
inline void ATQuoteStreamQuoteUpdate::set_quotecondition(const char* value, size_t size) {
  set_has_quotecondition();
  if (quotecondition_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quotecondition_ = new ::std::string;
  }
  quotecondition_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteCondition)
}
inline ::std::string* ATQuoteStreamQuoteUpdate::mutable_quotecondition() {
  set_has_quotecondition();
  if (quotecondition_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quotecondition_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteCondition)
  return quotecondition_;
}
inline ::std::string* ATQuoteStreamQuoteUpdate::release_quotecondition() {
  clear_has_quotecondition();
  if (quotecondition_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = quotecondition_;
    quotecondition_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ATQuoteStreamQuoteUpdate::set_allocated_quotecondition(::std::string* quotecondition) {
  if (quotecondition_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete quotecondition_;
  }
  if (quotecondition) {
    set_has_quotecondition();
    quotecondition_ = quotecondition;
  } else {
    clear_has_quotecondition();
    quotecondition_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteCondition)
}

// optional string quoteBidExchange = 3;
inline bool ATQuoteStreamQuoteUpdate::has_quotebidexchange() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ATQuoteStreamQuoteUpdate::set_has_quotebidexchange() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ATQuoteStreamQuoteUpdate::clear_has_quotebidexchange() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ATQuoteStreamQuoteUpdate::clear_quotebidexchange() {
  if (quotebidexchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quotebidexchange_->clear();
  }
  clear_has_quotebidexchange();
}
inline const ::std::string& ATQuoteStreamQuoteUpdate::quotebidexchange() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteBidExchange)
  return *quotebidexchange_;
}
inline void ATQuoteStreamQuoteUpdate::set_quotebidexchange(const ::std::string& value) {
  set_has_quotebidexchange();
  if (quotebidexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quotebidexchange_ = new ::std::string;
  }
  quotebidexchange_->assign(value);
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteBidExchange)
}
inline void ATQuoteStreamQuoteUpdate::set_quotebidexchange(const char* value) {
  set_has_quotebidexchange();
  if (quotebidexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quotebidexchange_ = new ::std::string;
  }
  quotebidexchange_->assign(value);
  // @@protoc_insertion_point(field_set_char:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteBidExchange)
}
inline void ATQuoteStreamQuoteUpdate::set_quotebidexchange(const char* value, size_t size) {
  set_has_quotebidexchange();
  if (quotebidexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quotebidexchange_ = new ::std::string;
  }
  quotebidexchange_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteBidExchange)
}
inline ::std::string* ATQuoteStreamQuoteUpdate::mutable_quotebidexchange() {
  set_has_quotebidexchange();
  if (quotebidexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quotebidexchange_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteBidExchange)
  return quotebidexchange_;
}
inline ::std::string* ATQuoteStreamQuoteUpdate::release_quotebidexchange() {
  clear_has_quotebidexchange();
  if (quotebidexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = quotebidexchange_;
    quotebidexchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ATQuoteStreamQuoteUpdate::set_allocated_quotebidexchange(::std::string* quotebidexchange) {
  if (quotebidexchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete quotebidexchange_;
  }
  if (quotebidexchange) {
    set_has_quotebidexchange();
    quotebidexchange_ = quotebidexchange;
  } else {
    clear_has_quotebidexchange();
    quotebidexchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteBidExchange)
}

// optional string quoteAskExchange = 4;
inline bool ATQuoteStreamQuoteUpdate::has_quoteaskexchange() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ATQuoteStreamQuoteUpdate::set_has_quoteaskexchange() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ATQuoteStreamQuoteUpdate::clear_has_quoteaskexchange() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ATQuoteStreamQuoteUpdate::clear_quoteaskexchange() {
  if (quoteaskexchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quoteaskexchange_->clear();
  }
  clear_has_quoteaskexchange();
}
inline const ::std::string& ATQuoteStreamQuoteUpdate::quoteaskexchange() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteAskExchange)
  return *quoteaskexchange_;
}
inline void ATQuoteStreamQuoteUpdate::set_quoteaskexchange(const ::std::string& value) {
  set_has_quoteaskexchange();
  if (quoteaskexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quoteaskexchange_ = new ::std::string;
  }
  quoteaskexchange_->assign(value);
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteAskExchange)
}
inline void ATQuoteStreamQuoteUpdate::set_quoteaskexchange(const char* value) {
  set_has_quoteaskexchange();
  if (quoteaskexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quoteaskexchange_ = new ::std::string;
  }
  quoteaskexchange_->assign(value);
  // @@protoc_insertion_point(field_set_char:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteAskExchange)
}
inline void ATQuoteStreamQuoteUpdate::set_quoteaskexchange(const char* value, size_t size) {
  set_has_quoteaskexchange();
  if (quoteaskexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quoteaskexchange_ = new ::std::string;
  }
  quoteaskexchange_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteAskExchange)
}
inline ::std::string* ATQuoteStreamQuoteUpdate::mutable_quoteaskexchange() {
  set_has_quoteaskexchange();
  if (quoteaskexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    quoteaskexchange_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteAskExchange)
  return quoteaskexchange_;
}
inline ::std::string* ATQuoteStreamQuoteUpdate::release_quoteaskexchange() {
  clear_has_quoteaskexchange();
  if (quoteaskexchange_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = quoteaskexchange_;
    quoteaskexchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ATQuoteStreamQuoteUpdate::set_allocated_quoteaskexchange(::std::string* quoteaskexchange) {
  if (quoteaskexchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete quoteaskexchange_;
  }
  if (quoteaskexchange) {
    set_has_quoteaskexchange();
    quoteaskexchange_ = quoteaskexchange;
  } else {
    clear_has_quoteaskexchange();
    quoteaskexchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteAskExchange)
}

// optional .NodeActiveTickProto.ATPrice quoteBidPrice = 5;
inline bool ATQuoteStreamQuoteUpdate::has_quotebidprice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ATQuoteStreamQuoteUpdate::set_has_quotebidprice() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ATQuoteStreamQuoteUpdate::clear_has_quotebidprice() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ATQuoteStreamQuoteUpdate::clear_quotebidprice() {
  if (quotebidprice_ != NULL) quotebidprice_->::NodeActiveTickProto::ATPrice::Clear();
  clear_has_quotebidprice();
}
inline const ::NodeActiveTickProto::ATPrice& ATQuoteStreamQuoteUpdate::quotebidprice() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteBidPrice)
  return quotebidprice_ != NULL ? *quotebidprice_ : *default_instance_->quotebidprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamQuoteUpdate::mutable_quotebidprice() {
  set_has_quotebidprice();
  if (quotebidprice_ == NULL) quotebidprice_ = new ::NodeActiveTickProto::ATPrice;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteBidPrice)
  return quotebidprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamQuoteUpdate::release_quotebidprice() {
  clear_has_quotebidprice();
  ::NodeActiveTickProto::ATPrice* temp = quotebidprice_;
  quotebidprice_ = NULL;
  return temp;
}
inline void ATQuoteStreamQuoteUpdate::set_allocated_quotebidprice(::NodeActiveTickProto::ATPrice* quotebidprice) {
  delete quotebidprice_;
  quotebidprice_ = quotebidprice;
  if (quotebidprice) {
    set_has_quotebidprice();
  } else {
    clear_has_quotebidprice();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteBidPrice)
}

// optional .NodeActiveTickProto.ATPrice quoteAskPrice = 6;
inline bool ATQuoteStreamQuoteUpdate::has_quoteaskprice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ATQuoteStreamQuoteUpdate::set_has_quoteaskprice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ATQuoteStreamQuoteUpdate::clear_has_quoteaskprice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ATQuoteStreamQuoteUpdate::clear_quoteaskprice() {
  if (quoteaskprice_ != NULL) quoteaskprice_->::NodeActiveTickProto::ATPrice::Clear();
  clear_has_quoteaskprice();
}
inline const ::NodeActiveTickProto::ATPrice& ATQuoteStreamQuoteUpdate::quoteaskprice() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteAskPrice)
  return quoteaskprice_ != NULL ? *quoteaskprice_ : *default_instance_->quoteaskprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamQuoteUpdate::mutable_quoteaskprice() {
  set_has_quoteaskprice();
  if (quoteaskprice_ == NULL) quoteaskprice_ = new ::NodeActiveTickProto::ATPrice;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteAskPrice)
  return quoteaskprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamQuoteUpdate::release_quoteaskprice() {
  clear_has_quoteaskprice();
  ::NodeActiveTickProto::ATPrice* temp = quoteaskprice_;
  quoteaskprice_ = NULL;
  return temp;
}
inline void ATQuoteStreamQuoteUpdate::set_allocated_quoteaskprice(::NodeActiveTickProto::ATPrice* quoteaskprice) {
  delete quoteaskprice_;
  quoteaskprice_ = quoteaskprice;
  if (quoteaskprice) {
    set_has_quoteaskprice();
  } else {
    clear_has_quoteaskprice();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteAskPrice)
}

// optional int32 quoteBidSize = 7;
inline bool ATQuoteStreamQuoteUpdate::has_quotebidsize() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ATQuoteStreamQuoteUpdate::set_has_quotebidsize() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ATQuoteStreamQuoteUpdate::clear_has_quotebidsize() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ATQuoteStreamQuoteUpdate::clear_quotebidsize() {
  quotebidsize_ = 0;
  clear_has_quotebidsize();
}
inline ::google::protobuf::int32 ATQuoteStreamQuoteUpdate::quotebidsize() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteBidSize)
  return quotebidsize_;
}
inline void ATQuoteStreamQuoteUpdate::set_quotebidsize(::google::protobuf::int32 value) {
  set_has_quotebidsize();
  quotebidsize_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteBidSize)
}

// optional int32 quoteAskSize = 8;
inline bool ATQuoteStreamQuoteUpdate::has_quoteasksize() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ATQuoteStreamQuoteUpdate::set_has_quoteasksize() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ATQuoteStreamQuoteUpdate::clear_has_quoteasksize() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ATQuoteStreamQuoteUpdate::clear_quoteasksize() {
  quoteasksize_ = 0;
  clear_has_quoteasksize();
}
inline ::google::protobuf::int32 ATQuoteStreamQuoteUpdate::quoteasksize() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteAskSize)
  return quoteasksize_;
}
inline void ATQuoteStreamQuoteUpdate::set_quoteasksize(::google::protobuf::int32 value) {
  set_has_quoteasksize();
  quoteasksize_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteAskSize)
}

// optional .NodeActiveTickProto.ATTime quoteTime = 9;
inline bool ATQuoteStreamQuoteUpdate::has_quotetime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ATQuoteStreamQuoteUpdate::set_has_quotetime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ATQuoteStreamQuoteUpdate::clear_has_quotetime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ATQuoteStreamQuoteUpdate::clear_quotetime() {
  if (quotetime_ != NULL) quotetime_->::NodeActiveTickProto::ATTime::Clear();
  clear_has_quotetime();
}
inline const ::NodeActiveTickProto::ATTime& ATQuoteStreamQuoteUpdate::quotetime() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteTime)
  return quotetime_ != NULL ? *quotetime_ : *default_instance_->quotetime_;
}
inline ::NodeActiveTickProto::ATTime* ATQuoteStreamQuoteUpdate::mutable_quotetime() {
  set_has_quotetime();
  if (quotetime_ == NULL) quotetime_ = new ::NodeActiveTickProto::ATTime;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteTime)
  return quotetime_;
}
inline ::NodeActiveTickProto::ATTime* ATQuoteStreamQuoteUpdate::release_quotetime() {
  clear_has_quotetime();
  ::NodeActiveTickProto::ATTime* temp = quotetime_;
  quotetime_ = NULL;
  return temp;
}
inline void ATQuoteStreamQuoteUpdate::set_allocated_quotetime(::NodeActiveTickProto::ATTime* quotetime) {
  delete quotetime_;
  quotetime_ = quotetime;
  if (quotetime) {
    set_has_quotetime();
  } else {
    clear_has_quotetime();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamQuoteUpdate.quoteTime)
}

// -------------------------------------------------------------------

// ATQuoteStreamRefreshUpdate

// optional .NodeActiveTickProto.ATSymbol symbol = 1;
inline bool ATQuoteStreamRefreshUpdate::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ATQuoteStreamRefreshUpdate::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ATQuoteStreamRefreshUpdate::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ATQuoteStreamRefreshUpdate::clear_symbol() {
  if (symbol_ != NULL) symbol_->::NodeActiveTickProto::ATSymbol::Clear();
  clear_has_symbol();
}
inline const ::NodeActiveTickProto::ATSymbol& ATQuoteStreamRefreshUpdate::symbol() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.symbol)
  return symbol_ != NULL ? *symbol_ : *default_instance_->symbol_;
}
inline ::NodeActiveTickProto::ATSymbol* ATQuoteStreamRefreshUpdate::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == NULL) symbol_ = new ::NodeActiveTickProto::ATSymbol;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.symbol)
  return symbol_;
}
inline ::NodeActiveTickProto::ATSymbol* ATQuoteStreamRefreshUpdate::release_symbol() {
  clear_has_symbol();
  ::NodeActiveTickProto::ATSymbol* temp = symbol_;
  symbol_ = NULL;
  return temp;
}
inline void ATQuoteStreamRefreshUpdate::set_allocated_symbol(::NodeActiveTickProto::ATSymbol* symbol) {
  delete symbol_;
  symbol_ = symbol;
  if (symbol) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.symbol)
}

// optional .NodeActiveTickProto.ATPrice lastPrice = 2;
inline bool ATQuoteStreamRefreshUpdate::has_lastprice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ATQuoteStreamRefreshUpdate::set_has_lastprice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ATQuoteStreamRefreshUpdate::clear_has_lastprice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ATQuoteStreamRefreshUpdate::clear_lastprice() {
  if (lastprice_ != NULL) lastprice_->::NodeActiveTickProto::ATPrice::Clear();
  clear_has_lastprice();
}
inline const ::NodeActiveTickProto::ATPrice& ATQuoteStreamRefreshUpdate::lastprice() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.lastPrice)
  return lastprice_ != NULL ? *lastprice_ : *default_instance_->lastprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamRefreshUpdate::mutable_lastprice() {
  set_has_lastprice();
  if (lastprice_ == NULL) lastprice_ = new ::NodeActiveTickProto::ATPrice;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.lastPrice)
  return lastprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamRefreshUpdate::release_lastprice() {
  clear_has_lastprice();
  ::NodeActiveTickProto::ATPrice* temp = lastprice_;
  lastprice_ = NULL;
  return temp;
}
inline void ATQuoteStreamRefreshUpdate::set_allocated_lastprice(::NodeActiveTickProto::ATPrice* lastprice) {
  delete lastprice_;
  lastprice_ = lastprice;
  if (lastprice) {
    set_has_lastprice();
  } else {
    clear_has_lastprice();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.lastPrice)
}

// optional .NodeActiveTickProto.ATPrice openPrice = 3;
inline bool ATQuoteStreamRefreshUpdate::has_openprice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ATQuoteStreamRefreshUpdate::set_has_openprice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ATQuoteStreamRefreshUpdate::clear_has_openprice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ATQuoteStreamRefreshUpdate::clear_openprice() {
  if (openprice_ != NULL) openprice_->::NodeActiveTickProto::ATPrice::Clear();
  clear_has_openprice();
}
inline const ::NodeActiveTickProto::ATPrice& ATQuoteStreamRefreshUpdate::openprice() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.openPrice)
  return openprice_ != NULL ? *openprice_ : *default_instance_->openprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamRefreshUpdate::mutable_openprice() {
  set_has_openprice();
  if (openprice_ == NULL) openprice_ = new ::NodeActiveTickProto::ATPrice;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.openPrice)
  return openprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamRefreshUpdate::release_openprice() {
  clear_has_openprice();
  ::NodeActiveTickProto::ATPrice* temp = openprice_;
  openprice_ = NULL;
  return temp;
}
inline void ATQuoteStreamRefreshUpdate::set_allocated_openprice(::NodeActiveTickProto::ATPrice* openprice) {
  delete openprice_;
  openprice_ = openprice;
  if (openprice) {
    set_has_openprice();
  } else {
    clear_has_openprice();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.openPrice)
}

// optional .NodeActiveTickProto.ATPrice highPrice = 4;
inline bool ATQuoteStreamRefreshUpdate::has_highprice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ATQuoteStreamRefreshUpdate::set_has_highprice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ATQuoteStreamRefreshUpdate::clear_has_highprice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ATQuoteStreamRefreshUpdate::clear_highprice() {
  if (highprice_ != NULL) highprice_->::NodeActiveTickProto::ATPrice::Clear();
  clear_has_highprice();
}
inline const ::NodeActiveTickProto::ATPrice& ATQuoteStreamRefreshUpdate::highprice() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.highPrice)
  return highprice_ != NULL ? *highprice_ : *default_instance_->highprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamRefreshUpdate::mutable_highprice() {
  set_has_highprice();
  if (highprice_ == NULL) highprice_ = new ::NodeActiveTickProto::ATPrice;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.highPrice)
  return highprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamRefreshUpdate::release_highprice() {
  clear_has_highprice();
  ::NodeActiveTickProto::ATPrice* temp = highprice_;
  highprice_ = NULL;
  return temp;
}
inline void ATQuoteStreamRefreshUpdate::set_allocated_highprice(::NodeActiveTickProto::ATPrice* highprice) {
  delete highprice_;
  highprice_ = highprice;
  if (highprice) {
    set_has_highprice();
  } else {
    clear_has_highprice();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.highPrice)
}

// optional .NodeActiveTickProto.ATPrice lowPrice = 5;
inline bool ATQuoteStreamRefreshUpdate::has_lowprice() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ATQuoteStreamRefreshUpdate::set_has_lowprice() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ATQuoteStreamRefreshUpdate::clear_has_lowprice() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ATQuoteStreamRefreshUpdate::clear_lowprice() {
  if (lowprice_ != NULL) lowprice_->::NodeActiveTickProto::ATPrice::Clear();
  clear_has_lowprice();
}
inline const ::NodeActiveTickProto::ATPrice& ATQuoteStreamRefreshUpdate::lowprice() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.lowPrice)
  return lowprice_ != NULL ? *lowprice_ : *default_instance_->lowprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamRefreshUpdate::mutable_lowprice() {
  set_has_lowprice();
  if (lowprice_ == NULL) lowprice_ = new ::NodeActiveTickProto::ATPrice;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.lowPrice)
  return lowprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamRefreshUpdate::release_lowprice() {
  clear_has_lowprice();
  ::NodeActiveTickProto::ATPrice* temp = lowprice_;
  lowprice_ = NULL;
  return temp;
}
inline void ATQuoteStreamRefreshUpdate::set_allocated_lowprice(::NodeActiveTickProto::ATPrice* lowprice) {
  delete lowprice_;
  lowprice_ = lowprice;
  if (lowprice) {
    set_has_lowprice();
  } else {
    clear_has_lowprice();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.lowPrice)
}

// optional .NodeActiveTickProto.ATPrice closePrice = 6;
inline bool ATQuoteStreamRefreshUpdate::has_closeprice() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ATQuoteStreamRefreshUpdate::set_has_closeprice() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ATQuoteStreamRefreshUpdate::clear_has_closeprice() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ATQuoteStreamRefreshUpdate::clear_closeprice() {
  if (closeprice_ != NULL) closeprice_->::NodeActiveTickProto::ATPrice::Clear();
  clear_has_closeprice();
}
inline const ::NodeActiveTickProto::ATPrice& ATQuoteStreamRefreshUpdate::closeprice() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.closePrice)
  return closeprice_ != NULL ? *closeprice_ : *default_instance_->closeprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamRefreshUpdate::mutable_closeprice() {
  set_has_closeprice();
  if (closeprice_ == NULL) closeprice_ = new ::NodeActiveTickProto::ATPrice;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.closePrice)
  return closeprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamRefreshUpdate::release_closeprice() {
  clear_has_closeprice();
  ::NodeActiveTickProto::ATPrice* temp = closeprice_;
  closeprice_ = NULL;
  return temp;
}
inline void ATQuoteStreamRefreshUpdate::set_allocated_closeprice(::NodeActiveTickProto::ATPrice* closeprice) {
  delete closeprice_;
  closeprice_ = closeprice;
  if (closeprice) {
    set_has_closeprice();
  } else {
    clear_has_closeprice();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.closePrice)
}

// optional .NodeActiveTickProto.ATPrice prevClosePrice = 7;
inline bool ATQuoteStreamRefreshUpdate::has_prevcloseprice() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ATQuoteStreamRefreshUpdate::set_has_prevcloseprice() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ATQuoteStreamRefreshUpdate::clear_has_prevcloseprice() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ATQuoteStreamRefreshUpdate::clear_prevcloseprice() {
  if (prevcloseprice_ != NULL) prevcloseprice_->::NodeActiveTickProto::ATPrice::Clear();
  clear_has_prevcloseprice();
}
inline const ::NodeActiveTickProto::ATPrice& ATQuoteStreamRefreshUpdate::prevcloseprice() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.prevClosePrice)
  return prevcloseprice_ != NULL ? *prevcloseprice_ : *default_instance_->prevcloseprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamRefreshUpdate::mutable_prevcloseprice() {
  set_has_prevcloseprice();
  if (prevcloseprice_ == NULL) prevcloseprice_ = new ::NodeActiveTickProto::ATPrice;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.prevClosePrice)
  return prevcloseprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamRefreshUpdate::release_prevcloseprice() {
  clear_has_prevcloseprice();
  ::NodeActiveTickProto::ATPrice* temp = prevcloseprice_;
  prevcloseprice_ = NULL;
  return temp;
}
inline void ATQuoteStreamRefreshUpdate::set_allocated_prevcloseprice(::NodeActiveTickProto::ATPrice* prevcloseprice) {
  delete prevcloseprice_;
  prevcloseprice_ = prevcloseprice;
  if (prevcloseprice) {
    set_has_prevcloseprice();
  } else {
    clear_has_prevcloseprice();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.prevClosePrice)
}

// optional .NodeActiveTickProto.ATPrice afterMarketClosePrice = 8;
inline bool ATQuoteStreamRefreshUpdate::has_aftermarketcloseprice() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ATQuoteStreamRefreshUpdate::set_has_aftermarketcloseprice() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ATQuoteStreamRefreshUpdate::clear_has_aftermarketcloseprice() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ATQuoteStreamRefreshUpdate::clear_aftermarketcloseprice() {
  if (aftermarketcloseprice_ != NULL) aftermarketcloseprice_->::NodeActiveTickProto::ATPrice::Clear();
  clear_has_aftermarketcloseprice();
}
inline const ::NodeActiveTickProto::ATPrice& ATQuoteStreamRefreshUpdate::aftermarketcloseprice() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.afterMarketClosePrice)
  return aftermarketcloseprice_ != NULL ? *aftermarketcloseprice_ : *default_instance_->aftermarketcloseprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamRefreshUpdate::mutable_aftermarketcloseprice() {
  set_has_aftermarketcloseprice();
  if (aftermarketcloseprice_ == NULL) aftermarketcloseprice_ = new ::NodeActiveTickProto::ATPrice;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.afterMarketClosePrice)
  return aftermarketcloseprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamRefreshUpdate::release_aftermarketcloseprice() {
  clear_has_aftermarketcloseprice();
  ::NodeActiveTickProto::ATPrice* temp = aftermarketcloseprice_;
  aftermarketcloseprice_ = NULL;
  return temp;
}
inline void ATQuoteStreamRefreshUpdate::set_allocated_aftermarketcloseprice(::NodeActiveTickProto::ATPrice* aftermarketcloseprice) {
  delete aftermarketcloseprice_;
  aftermarketcloseprice_ = aftermarketcloseprice;
  if (aftermarketcloseprice) {
    set_has_aftermarketcloseprice();
  } else {
    clear_has_aftermarketcloseprice();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.afterMarketClosePrice)
}

// optional .NodeActiveTickProto.ATPrice bidPrice = 9;
inline bool ATQuoteStreamRefreshUpdate::has_bidprice() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ATQuoteStreamRefreshUpdate::set_has_bidprice() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ATQuoteStreamRefreshUpdate::clear_has_bidprice() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ATQuoteStreamRefreshUpdate::clear_bidprice() {
  if (bidprice_ != NULL) bidprice_->::NodeActiveTickProto::ATPrice::Clear();
  clear_has_bidprice();
}
inline const ::NodeActiveTickProto::ATPrice& ATQuoteStreamRefreshUpdate::bidprice() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.bidPrice)
  return bidprice_ != NULL ? *bidprice_ : *default_instance_->bidprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamRefreshUpdate::mutable_bidprice() {
  set_has_bidprice();
  if (bidprice_ == NULL) bidprice_ = new ::NodeActiveTickProto::ATPrice;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.bidPrice)
  return bidprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamRefreshUpdate::release_bidprice() {
  clear_has_bidprice();
  ::NodeActiveTickProto::ATPrice* temp = bidprice_;
  bidprice_ = NULL;
  return temp;
}
inline void ATQuoteStreamRefreshUpdate::set_allocated_bidprice(::NodeActiveTickProto::ATPrice* bidprice) {
  delete bidprice_;
  bidprice_ = bidprice;
  if (bidprice) {
    set_has_bidprice();
  } else {
    clear_has_bidprice();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.bidPrice)
}

// optional .NodeActiveTickProto.ATPrice askPrice = 10;
inline bool ATQuoteStreamRefreshUpdate::has_askprice() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ATQuoteStreamRefreshUpdate::set_has_askprice() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ATQuoteStreamRefreshUpdate::clear_has_askprice() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ATQuoteStreamRefreshUpdate::clear_askprice() {
  if (askprice_ != NULL) askprice_->::NodeActiveTickProto::ATPrice::Clear();
  clear_has_askprice();
}
inline const ::NodeActiveTickProto::ATPrice& ATQuoteStreamRefreshUpdate::askprice() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.askPrice)
  return askprice_ != NULL ? *askprice_ : *default_instance_->askprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamRefreshUpdate::mutable_askprice() {
  set_has_askprice();
  if (askprice_ == NULL) askprice_ = new ::NodeActiveTickProto::ATPrice;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.askPrice)
  return askprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuoteStreamRefreshUpdate::release_askprice() {
  clear_has_askprice();
  ::NodeActiveTickProto::ATPrice* temp = askprice_;
  askprice_ = NULL;
  return temp;
}
inline void ATQuoteStreamRefreshUpdate::set_allocated_askprice(::NodeActiveTickProto::ATPrice* askprice) {
  delete askprice_;
  askprice_ = askprice;
  if (askprice) {
    set_has_askprice();
  } else {
    clear_has_askprice();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.askPrice)
}

// optional int32 bidSize = 11;
inline bool ATQuoteStreamRefreshUpdate::has_bidsize() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ATQuoteStreamRefreshUpdate::set_has_bidsize() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ATQuoteStreamRefreshUpdate::clear_has_bidsize() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ATQuoteStreamRefreshUpdate::clear_bidsize() {
  bidsize_ = 0;
  clear_has_bidsize();
}
inline ::google::protobuf::int32 ATQuoteStreamRefreshUpdate::bidsize() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.bidSize)
  return bidsize_;
}
inline void ATQuoteStreamRefreshUpdate::set_bidsize(::google::protobuf::int32 value) {
  set_has_bidsize();
  bidsize_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.bidSize)
}

// optional int32 askSize = 12;
inline bool ATQuoteStreamRefreshUpdate::has_asksize() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ATQuoteStreamRefreshUpdate::set_has_asksize() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ATQuoteStreamRefreshUpdate::clear_has_asksize() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ATQuoteStreamRefreshUpdate::clear_asksize() {
  asksize_ = 0;
  clear_has_asksize();
}
inline ::google::protobuf::int32 ATQuoteStreamRefreshUpdate::asksize() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.askSize)
  return asksize_;
}
inline void ATQuoteStreamRefreshUpdate::set_asksize(::google::protobuf::int32 value) {
  set_has_asksize();
  asksize_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.askSize)
}

// optional int32 lastSize = 13;
inline bool ATQuoteStreamRefreshUpdate::has_lastsize() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ATQuoteStreamRefreshUpdate::set_has_lastsize() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ATQuoteStreamRefreshUpdate::clear_has_lastsize() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ATQuoteStreamRefreshUpdate::clear_lastsize() {
  lastsize_ = 0;
  clear_has_lastsize();
}
inline ::google::protobuf::int32 ATQuoteStreamRefreshUpdate::lastsize() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.lastSize)
  return lastsize_;
}
inline void ATQuoteStreamRefreshUpdate::set_lastsize(::google::protobuf::int32 value) {
  set_has_lastsize();
  lastsize_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.lastSize)
}

// optional int64 volume = 14;
inline bool ATQuoteStreamRefreshUpdate::has_volume() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ATQuoteStreamRefreshUpdate::set_has_volume() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ATQuoteStreamRefreshUpdate::clear_has_volume() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ATQuoteStreamRefreshUpdate::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::int64 ATQuoteStreamRefreshUpdate::volume() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.volume)
  return volume_;
}
inline void ATQuoteStreamRefreshUpdate::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuoteStreamRefreshUpdate.volume)
}

// -------------------------------------------------------------------

// ATMarketMoversStreamUpdate

// optional .NodeActiveTickProto.ATMarketMoversRecord marketMovers = 1;
inline bool ATMarketMoversStreamUpdate::has_marketmovers() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ATMarketMoversStreamUpdate::set_has_marketmovers() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ATMarketMoversStreamUpdate::clear_has_marketmovers() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ATMarketMoversStreamUpdate::clear_marketmovers() {
  if (marketmovers_ != NULL) marketmovers_->::NodeActiveTickProto::ATMarketMoversRecord::Clear();
  clear_has_marketmovers();
}
inline const ::NodeActiveTickProto::ATMarketMoversRecord& ATMarketMoversStreamUpdate::marketmovers() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATMarketMoversStreamUpdate.marketMovers)
  return marketmovers_ != NULL ? *marketmovers_ : *default_instance_->marketmovers_;
}
inline ::NodeActiveTickProto::ATMarketMoversRecord* ATMarketMoversStreamUpdate::mutable_marketmovers() {
  set_has_marketmovers();
  if (marketmovers_ == NULL) marketmovers_ = new ::NodeActiveTickProto::ATMarketMoversRecord;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATMarketMoversStreamUpdate.marketMovers)
  return marketmovers_;
}
inline ::NodeActiveTickProto::ATMarketMoversRecord* ATMarketMoversStreamUpdate::release_marketmovers() {
  clear_has_marketmovers();
  ::NodeActiveTickProto::ATMarketMoversRecord* temp = marketmovers_;
  marketmovers_ = NULL;
  return temp;
}
inline void ATMarketMoversStreamUpdate::set_allocated_marketmovers(::NodeActiveTickProto::ATMarketMoversRecord* marketmovers) {
  delete marketmovers_;
  marketmovers_ = marketmovers;
  if (marketmovers) {
    set_has_marketmovers();
  } else {
    clear_has_marketmovers();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATMarketMoversStreamUpdate.marketMovers)
}

// optional .NodeActiveTickProto.ATTime lastUpdatedTime = 2;
inline bool ATMarketMoversStreamUpdate::has_lastupdatedtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ATMarketMoversStreamUpdate::set_has_lastupdatedtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ATMarketMoversStreamUpdate::clear_has_lastupdatedtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ATMarketMoversStreamUpdate::clear_lastupdatedtime() {
  if (lastupdatedtime_ != NULL) lastupdatedtime_->::NodeActiveTickProto::ATTime::Clear();
  clear_has_lastupdatedtime();
}
inline const ::NodeActiveTickProto::ATTime& ATMarketMoversStreamUpdate::lastupdatedtime() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATMarketMoversStreamUpdate.lastUpdatedTime)
  return lastupdatedtime_ != NULL ? *lastupdatedtime_ : *default_instance_->lastupdatedtime_;
}
inline ::NodeActiveTickProto::ATTime* ATMarketMoversStreamUpdate::mutable_lastupdatedtime() {
  set_has_lastupdatedtime();
  if (lastupdatedtime_ == NULL) lastupdatedtime_ = new ::NodeActiveTickProto::ATTime;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATMarketMoversStreamUpdate.lastUpdatedTime)
  return lastupdatedtime_;
}
inline ::NodeActiveTickProto::ATTime* ATMarketMoversStreamUpdate::release_lastupdatedtime() {
  clear_has_lastupdatedtime();
  ::NodeActiveTickProto::ATTime* temp = lastupdatedtime_;
  lastupdatedtime_ = NULL;
  return temp;
}
inline void ATMarketMoversStreamUpdate::set_allocated_lastupdatedtime(::NodeActiveTickProto::ATTime* lastupdatedtime) {
  delete lastupdatedtime_;
  lastupdatedtime_ = lastupdatedtime;
  if (lastupdatedtime) {
    set_has_lastupdatedtime();
  } else {
    clear_has_lastupdatedtime();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATMarketMoversStreamUpdate.lastUpdatedTime)
}

// -------------------------------------------------------------------

// ATMarketMoversRecord

// optional .NodeActiveTickProto.ATSymbol symbol = 1;
inline bool ATMarketMoversRecord::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ATMarketMoversRecord::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ATMarketMoversRecord::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ATMarketMoversRecord::clear_symbol() {
  if (symbol_ != NULL) symbol_->::NodeActiveTickProto::ATSymbol::Clear();
  clear_has_symbol();
}
inline const ::NodeActiveTickProto::ATSymbol& ATMarketMoversRecord::symbol() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATMarketMoversRecord.symbol)
  return symbol_ != NULL ? *symbol_ : *default_instance_->symbol_;
}
inline ::NodeActiveTickProto::ATSymbol* ATMarketMoversRecord::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == NULL) symbol_ = new ::NodeActiveTickProto::ATSymbol;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATMarketMoversRecord.symbol)
  return symbol_;
}
inline ::NodeActiveTickProto::ATSymbol* ATMarketMoversRecord::release_symbol() {
  clear_has_symbol();
  ::NodeActiveTickProto::ATSymbol* temp = symbol_;
  symbol_ = NULL;
  return temp;
}
inline void ATMarketMoversRecord::set_allocated_symbol(::NodeActiveTickProto::ATSymbol* symbol) {
  delete symbol_;
  symbol_ = symbol;
  if (symbol) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATMarketMoversRecord.symbol)
}

// optional string status = 2;
inline bool ATMarketMoversRecord::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ATMarketMoversRecord::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ATMarketMoversRecord::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ATMarketMoversRecord::clear_status() {
  if (status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_->clear();
  }
  clear_has_status();
}
inline const ::std::string& ATMarketMoversRecord::status() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATMarketMoversRecord.status)
  return *status_;
}
inline void ATMarketMoversRecord::set_status(const ::std::string& value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_ = new ::std::string;
  }
  status_->assign(value);
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATMarketMoversRecord.status)
}
inline void ATMarketMoversRecord::set_status(const char* value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_ = new ::std::string;
  }
  status_->assign(value);
  // @@protoc_insertion_point(field_set_char:NodeActiveTickProto.ATMarketMoversRecord.status)
}
inline void ATMarketMoversRecord::set_status(const char* value, size_t size) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_ = new ::std::string;
  }
  status_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NodeActiveTickProto.ATMarketMoversRecord.status)
}
inline ::std::string* ATMarketMoversRecord::mutable_status() {
  set_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATMarketMoversRecord.status)
  return status_;
}
inline ::std::string* ATMarketMoversRecord::release_status() {
  clear_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = status_;
    status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ATMarketMoversRecord::set_allocated_status(::std::string* status) {
  if (status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete status_;
  }
  if (status) {
    set_has_status();
    status_ = status;
  } else {
    clear_has_status();
    status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATMarketMoversRecord.status)
}

// repeated .NodeActiveTickProto.ATMarketMoversItem item = 3;
inline int ATMarketMoversRecord::item_size() const {
  return item_.size();
}
inline void ATMarketMoversRecord::clear_item() {
  item_.Clear();
}
inline const ::NodeActiveTickProto::ATMarketMoversItem& ATMarketMoversRecord::item(int index) const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATMarketMoversRecord.item)
  return item_.Get(index);
}
inline ::NodeActiveTickProto::ATMarketMoversItem* ATMarketMoversRecord::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATMarketMoversRecord.item)
  return item_.Mutable(index);
}
inline ::NodeActiveTickProto::ATMarketMoversItem* ATMarketMoversRecord::add_item() {
  // @@protoc_insertion_point(field_add:NodeActiveTickProto.ATMarketMoversRecord.item)
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATMarketMoversItem >&
ATMarketMoversRecord::item() const {
  // @@protoc_insertion_point(field_list:NodeActiveTickProto.ATMarketMoversRecord.item)
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATMarketMoversItem >*
ATMarketMoversRecord::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:NodeActiveTickProto.ATMarketMoversRecord.item)
  return &item_;
}

// -------------------------------------------------------------------

// ATMarketMoversItem

// optional .NodeActiveTickProto.ATSymbol symbol = 1;
inline bool ATMarketMoversItem::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ATMarketMoversItem::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ATMarketMoversItem::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ATMarketMoversItem::clear_symbol() {
  if (symbol_ != NULL) symbol_->::NodeActiveTickProto::ATSymbol::Clear();
  clear_has_symbol();
}
inline const ::NodeActiveTickProto::ATSymbol& ATMarketMoversItem::symbol() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATMarketMoversItem.symbol)
  return symbol_ != NULL ? *symbol_ : *default_instance_->symbol_;
}
inline ::NodeActiveTickProto::ATSymbol* ATMarketMoversItem::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == NULL) symbol_ = new ::NodeActiveTickProto::ATSymbol;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATMarketMoversItem.symbol)
  return symbol_;
}
inline ::NodeActiveTickProto::ATSymbol* ATMarketMoversItem::release_symbol() {
  clear_has_symbol();
  ::NodeActiveTickProto::ATSymbol* temp = symbol_;
  symbol_ = NULL;
  return temp;
}
inline void ATMarketMoversItem::set_allocated_symbol(::NodeActiveTickProto::ATSymbol* symbol) {
  delete symbol_;
  symbol_ = symbol;
  if (symbol) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATMarketMoversItem.symbol)
}

// optional string name = 2;
inline bool ATMarketMoversItem::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ATMarketMoversItem::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ATMarketMoversItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ATMarketMoversItem::clear_name() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ATMarketMoversItem::name() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATMarketMoversItem.name)
  return *name_;
}
inline void ATMarketMoversItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATMarketMoversItem.name)
}
inline void ATMarketMoversItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:NodeActiveTickProto.ATMarketMoversItem.name)
}
inline void ATMarketMoversItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NodeActiveTickProto.ATMarketMoversItem.name)
}
inline ::std::string* ATMarketMoversItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATMarketMoversItem.name)
  return name_;
}
inline ::std::string* ATMarketMoversItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ATMarketMoversItem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATMarketMoversItem.name)
}

// optional .NodeActiveTickProto.ATPrice lastPrice = 3;
inline bool ATMarketMoversItem::has_lastprice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ATMarketMoversItem::set_has_lastprice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ATMarketMoversItem::clear_has_lastprice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ATMarketMoversItem::clear_lastprice() {
  if (lastprice_ != NULL) lastprice_->::NodeActiveTickProto::ATPrice::Clear();
  clear_has_lastprice();
}
inline const ::NodeActiveTickProto::ATPrice& ATMarketMoversItem::lastprice() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATMarketMoversItem.lastPrice)
  return lastprice_ != NULL ? *lastprice_ : *default_instance_->lastprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATMarketMoversItem::mutable_lastprice() {
  set_has_lastprice();
  if (lastprice_ == NULL) lastprice_ = new ::NodeActiveTickProto::ATPrice;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATMarketMoversItem.lastPrice)
  return lastprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATMarketMoversItem::release_lastprice() {
  clear_has_lastprice();
  ::NodeActiveTickProto::ATPrice* temp = lastprice_;
  lastprice_ = NULL;
  return temp;
}
inline void ATMarketMoversItem::set_allocated_lastprice(::NodeActiveTickProto::ATPrice* lastprice) {
  delete lastprice_;
  lastprice_ = lastprice;
  if (lastprice) {
    set_has_lastprice();
  } else {
    clear_has_lastprice();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATMarketMoversItem.lastPrice)
}

// optional .NodeActiveTickProto.ATPrice closePrice = 4;
inline bool ATMarketMoversItem::has_closeprice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ATMarketMoversItem::set_has_closeprice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ATMarketMoversItem::clear_has_closeprice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ATMarketMoversItem::clear_closeprice() {
  if (closeprice_ != NULL) closeprice_->::NodeActiveTickProto::ATPrice::Clear();
  clear_has_closeprice();
}
inline const ::NodeActiveTickProto::ATPrice& ATMarketMoversItem::closeprice() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATMarketMoversItem.closePrice)
  return closeprice_ != NULL ? *closeprice_ : *default_instance_->closeprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATMarketMoversItem::mutable_closeprice() {
  set_has_closeprice();
  if (closeprice_ == NULL) closeprice_ = new ::NodeActiveTickProto::ATPrice;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATMarketMoversItem.closePrice)
  return closeprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATMarketMoversItem::release_closeprice() {
  clear_has_closeprice();
  ::NodeActiveTickProto::ATPrice* temp = closeprice_;
  closeprice_ = NULL;
  return temp;
}
inline void ATMarketMoversItem::set_allocated_closeprice(::NodeActiveTickProto::ATPrice* closeprice) {
  delete closeprice_;
  closeprice_ = closeprice;
  if (closeprice) {
    set_has_closeprice();
  } else {
    clear_has_closeprice();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATMarketMoversItem.closePrice)
}

// optional .NodeActiveTickProto.ATTime lastDateTime = 5;
inline bool ATMarketMoversItem::has_lastdatetime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ATMarketMoversItem::set_has_lastdatetime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ATMarketMoversItem::clear_has_lastdatetime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ATMarketMoversItem::clear_lastdatetime() {
  if (lastdatetime_ != NULL) lastdatetime_->::NodeActiveTickProto::ATTime::Clear();
  clear_has_lastdatetime();
}
inline const ::NodeActiveTickProto::ATTime& ATMarketMoversItem::lastdatetime() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATMarketMoversItem.lastDateTime)
  return lastdatetime_ != NULL ? *lastdatetime_ : *default_instance_->lastdatetime_;
}
inline ::NodeActiveTickProto::ATTime* ATMarketMoversItem::mutable_lastdatetime() {
  set_has_lastdatetime();
  if (lastdatetime_ == NULL) lastdatetime_ = new ::NodeActiveTickProto::ATTime;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATMarketMoversItem.lastDateTime)
  return lastdatetime_;
}
inline ::NodeActiveTickProto::ATTime* ATMarketMoversItem::release_lastdatetime() {
  clear_has_lastdatetime();
  ::NodeActiveTickProto::ATTime* temp = lastdatetime_;
  lastdatetime_ = NULL;
  return temp;
}
inline void ATMarketMoversItem::set_allocated_lastdatetime(::NodeActiveTickProto::ATTime* lastdatetime) {
  delete lastdatetime_;
  lastdatetime_ = lastdatetime;
  if (lastdatetime) {
    set_has_lastdatetime();
  } else {
    clear_has_lastdatetime();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATMarketMoversItem.lastDateTime)
}

// -------------------------------------------------------------------

// ATSymbol

// optional string symbol = 1;
inline bool ATSymbol::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ATSymbol::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ATSymbol::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ATSymbol::clear_symbol() {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_->clear();
  }
  clear_has_symbol();
}
inline const ::std::string& ATSymbol::symbol() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATSymbol.symbol)
  return *symbol_;
}
inline void ATSymbol::set_symbol(const ::std::string& value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATSymbol.symbol)
}
inline void ATSymbol::set_symbol(const char* value) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(value);
  // @@protoc_insertion_point(field_set_char:NodeActiveTickProto.ATSymbol.symbol)
}
inline void ATSymbol::set_symbol(const char* value, size_t size) {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  symbol_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NodeActiveTickProto.ATSymbol.symbol)
}
inline ::std::string* ATSymbol::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    symbol_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATSymbol.symbol)
  return symbol_;
}
inline ::std::string* ATSymbol::release_symbol() {
  clear_has_symbol();
  if (symbol_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = symbol_;
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ATSymbol::set_allocated_symbol(::std::string* symbol) {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_;
  }
  if (symbol) {
    set_has_symbol();
    symbol_ = symbol;
  } else {
    clear_has_symbol();
    symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATSymbol.symbol)
}

// optional int32 symbolType = 2;
inline bool ATSymbol::has_symboltype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ATSymbol::set_has_symboltype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ATSymbol::clear_has_symboltype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ATSymbol::clear_symboltype() {
  symboltype_ = 0;
  clear_has_symboltype();
}
inline ::google::protobuf::int32 ATSymbol::symboltype() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATSymbol.symbolType)
  return symboltype_;
}
inline void ATSymbol::set_symboltype(::google::protobuf::int32 value) {
  set_has_symboltype();
  symboltype_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATSymbol.symbolType)
}

// optional int32 exchangeType = 3;
inline bool ATSymbol::has_exchangetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ATSymbol::set_has_exchangetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ATSymbol::clear_has_exchangetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ATSymbol::clear_exchangetype() {
  exchangetype_ = 0;
  clear_has_exchangetype();
}
inline ::google::protobuf::int32 ATSymbol::exchangetype() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATSymbol.exchangeType)
  return exchangetype_;
}
inline void ATSymbol::set_exchangetype(::google::protobuf::int32 value) {
  set_has_exchangetype();
  exchangetype_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATSymbol.exchangeType)
}

// optional int32 countryType = 4;
inline bool ATSymbol::has_countrytype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ATSymbol::set_has_countrytype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ATSymbol::clear_has_countrytype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ATSymbol::clear_countrytype() {
  countrytype_ = 0;
  clear_has_countrytype();
}
inline ::google::protobuf::int32 ATSymbol::countrytype() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATSymbol.countryType)
  return countrytype_;
}
inline void ATSymbol::set_countrytype(::google::protobuf::int32 value) {
  set_has_countrytype();
  countrytype_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATSymbol.countryType)
}

// -------------------------------------------------------------------

// ATPrice

// required double price = 1;
inline bool ATPrice::has_price() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ATPrice::set_has_price() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ATPrice::clear_has_price() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ATPrice::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline double ATPrice::price() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATPrice.price)
  return price_;
}
inline void ATPrice::set_price(double value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATPrice.price)
}

// required int32 precision = 2;
inline bool ATPrice::has_precision() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ATPrice::set_has_precision() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ATPrice::clear_has_precision() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ATPrice::clear_precision() {
  precision_ = 0;
  clear_has_precision();
}
inline ::google::protobuf::int32 ATPrice::precision() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATPrice.precision)
  return precision_;
}
inline void ATPrice::set_precision(::google::protobuf::int32 value) {
  set_has_precision();
  precision_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATPrice.precision)
}

// -------------------------------------------------------------------

// ATQuote

// required .NodeActiveTickProto.ATSymbol symbol = 1;
inline bool ATQuote::has_symbol() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ATQuote::set_has_symbol() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ATQuote::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ATQuote::clear_symbol() {
  if (symbol_ != NULL) symbol_->::NodeActiveTickProto::ATSymbol::Clear();
  clear_has_symbol();
}
inline const ::NodeActiveTickProto::ATSymbol& ATQuote::symbol() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuote.symbol)
  return symbol_ != NULL ? *symbol_ : *default_instance_->symbol_;
}
inline ::NodeActiveTickProto::ATSymbol* ATQuote::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == NULL) symbol_ = new ::NodeActiveTickProto::ATSymbol;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuote.symbol)
  return symbol_;
}
inline ::NodeActiveTickProto::ATSymbol* ATQuote::release_symbol() {
  clear_has_symbol();
  ::NodeActiveTickProto::ATSymbol* temp = symbol_;
  symbol_ = NULL;
  return temp;
}
inline void ATQuote::set_allocated_symbol(::NodeActiveTickProto::ATSymbol* symbol) {
  delete symbol_;
  symbol_ = symbol;
  if (symbol) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuote.symbol)
}

// required .NodeActiveTickProto.ATPrice bidPrice = 2;
inline bool ATQuote::has_bidprice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ATQuote::set_has_bidprice() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ATQuote::clear_has_bidprice() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ATQuote::clear_bidprice() {
  if (bidprice_ != NULL) bidprice_->::NodeActiveTickProto::ATPrice::Clear();
  clear_has_bidprice();
}
inline const ::NodeActiveTickProto::ATPrice& ATQuote::bidprice() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuote.bidPrice)
  return bidprice_ != NULL ? *bidprice_ : *default_instance_->bidprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuote::mutable_bidprice() {
  set_has_bidprice();
  if (bidprice_ == NULL) bidprice_ = new ::NodeActiveTickProto::ATPrice;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuote.bidPrice)
  return bidprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuote::release_bidprice() {
  clear_has_bidprice();
  ::NodeActiveTickProto::ATPrice* temp = bidprice_;
  bidprice_ = NULL;
  return temp;
}
inline void ATQuote::set_allocated_bidprice(::NodeActiveTickProto::ATPrice* bidprice) {
  delete bidprice_;
  bidprice_ = bidprice;
  if (bidprice) {
    set_has_bidprice();
  } else {
    clear_has_bidprice();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuote.bidPrice)
}

// required .NodeActiveTickProto.ATPrice askPrice = 3;
inline bool ATQuote::has_askprice() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ATQuote::set_has_askprice() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ATQuote::clear_has_askprice() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ATQuote::clear_askprice() {
  if (askprice_ != NULL) askprice_->::NodeActiveTickProto::ATPrice::Clear();
  clear_has_askprice();
}
inline const ::NodeActiveTickProto::ATPrice& ATQuote::askprice() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuote.askPrice)
  return askprice_ != NULL ? *askprice_ : *default_instance_->askprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuote::mutable_askprice() {
  set_has_askprice();
  if (askprice_ == NULL) askprice_ = new ::NodeActiveTickProto::ATPrice;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuote.askPrice)
  return askprice_;
}
inline ::NodeActiveTickProto::ATPrice* ATQuote::release_askprice() {
  clear_has_askprice();
  ::NodeActiveTickProto::ATPrice* temp = askprice_;
  askprice_ = NULL;
  return temp;
}
inline void ATQuote::set_allocated_askprice(::NodeActiveTickProto::ATPrice* askprice) {
  delete askprice_;
  askprice_ = askprice;
  if (askprice) {
    set_has_askprice();
  } else {
    clear_has_askprice();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuote.askPrice)
}

// optional int32 bidSize = 4;
inline bool ATQuote::has_bidsize() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ATQuote::set_has_bidsize() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ATQuote::clear_has_bidsize() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ATQuote::clear_bidsize() {
  bidsize_ = 0;
  clear_has_bidsize();
}
inline ::google::protobuf::int32 ATQuote::bidsize() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuote.bidSize)
  return bidsize_;
}
inline void ATQuote::set_bidsize(::google::protobuf::int32 value) {
  set_has_bidsize();
  bidsize_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuote.bidSize)
}

// optional int32 askSize = 5;
inline bool ATQuote::has_asksize() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ATQuote::set_has_asksize() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ATQuote::clear_has_asksize() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ATQuote::clear_asksize() {
  asksize_ = 0;
  clear_has_asksize();
}
inline ::google::protobuf::int32 ATQuote::asksize() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuote.askSize)
  return asksize_;
}
inline void ATQuote::set_asksize(::google::protobuf::int32 value) {
  set_has_asksize();
  asksize_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuote.askSize)
}

// optional int32 quoteConditionId = 6;
inline bool ATQuote::has_quoteconditionid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ATQuote::set_has_quoteconditionid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ATQuote::clear_has_quoteconditionid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ATQuote::clear_quoteconditionid() {
  quoteconditionid_ = 0;
  clear_has_quoteconditionid();
}
inline ::google::protobuf::int32 ATQuote::quoteconditionid() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuote.quoteConditionId)
  return quoteconditionid_;
}
inline void ATQuote::set_quoteconditionid(::google::protobuf::int32 value) {
  set_has_quoteconditionid();
  quoteconditionid_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuote.quoteConditionId)
}

// optional .NodeActiveTickProto.ATTime serverTime = 7;
inline bool ATQuote::has_servertime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ATQuote::set_has_servertime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ATQuote::clear_has_servertime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ATQuote::clear_servertime() {
  if (servertime_ != NULL) servertime_->::NodeActiveTickProto::ATTime::Clear();
  clear_has_servertime();
}
inline const ::NodeActiveTickProto::ATTime& ATQuote::servertime() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuote.serverTime)
  return servertime_ != NULL ? *servertime_ : *default_instance_->servertime_;
}
inline ::NodeActiveTickProto::ATTime* ATQuote::mutable_servertime() {
  set_has_servertime();
  if (servertime_ == NULL) servertime_ = new ::NodeActiveTickProto::ATTime;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATQuote.serverTime)
  return servertime_;
}
inline ::NodeActiveTickProto::ATTime* ATQuote::release_servertime() {
  clear_has_servertime();
  ::NodeActiveTickProto::ATTime* temp = servertime_;
  servertime_ = NULL;
  return temp;
}
inline void ATQuote::set_allocated_servertime(::NodeActiveTickProto::ATTime* servertime) {
  delete servertime_;
  servertime_ = servertime;
  if (servertime) {
    set_has_servertime();
  } else {
    clear_has_servertime();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATQuote.serverTime)
}

// optional int32 bidExchangeId = 8;
inline bool ATQuote::has_bidexchangeid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ATQuote::set_has_bidexchangeid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ATQuote::clear_has_bidexchangeid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ATQuote::clear_bidexchangeid() {
  bidexchangeid_ = 0;
  clear_has_bidexchangeid();
}
inline ::google::protobuf::int32 ATQuote::bidexchangeid() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuote.bidExchangeId)
  return bidexchangeid_;
}
inline void ATQuote::set_bidexchangeid(::google::protobuf::int32 value) {
  set_has_bidexchangeid();
  bidexchangeid_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuote.bidExchangeId)
}

// optional int32 askExchangeId = 9;
inline bool ATQuote::has_askexchangeid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ATQuote::set_has_askexchangeid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ATQuote::clear_has_askexchangeid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ATQuote::clear_askexchangeid() {
  askexchangeid_ = 0;
  clear_has_askexchangeid();
}
inline ::google::protobuf::int32 ATQuote::askexchangeid() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATQuote.askExchangeId)
  return askexchangeid_;
}
inline void ATQuote::set_askexchangeid(::google::protobuf::int32 value) {
  set_has_askexchangeid();
  askexchangeid_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATQuote.askExchangeId)
}

// -------------------------------------------------------------------

// ATBarHistoryValue

// optional .NodeActiveTickProto.ATPrice open = 1;
inline bool ATBarHistoryValue::has_open() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ATBarHistoryValue::set_has_open() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ATBarHistoryValue::clear_has_open() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ATBarHistoryValue::clear_open() {
  if (open_ != NULL) open_->::NodeActiveTickProto::ATPrice::Clear();
  clear_has_open();
}
inline const ::NodeActiveTickProto::ATPrice& ATBarHistoryValue::open() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATBarHistoryValue.open)
  return open_ != NULL ? *open_ : *default_instance_->open_;
}
inline ::NodeActiveTickProto::ATPrice* ATBarHistoryValue::mutable_open() {
  set_has_open();
  if (open_ == NULL) open_ = new ::NodeActiveTickProto::ATPrice;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATBarHistoryValue.open)
  return open_;
}
inline ::NodeActiveTickProto::ATPrice* ATBarHistoryValue::release_open() {
  clear_has_open();
  ::NodeActiveTickProto::ATPrice* temp = open_;
  open_ = NULL;
  return temp;
}
inline void ATBarHistoryValue::set_allocated_open(::NodeActiveTickProto::ATPrice* open) {
  delete open_;
  open_ = open;
  if (open) {
    set_has_open();
  } else {
    clear_has_open();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATBarHistoryValue.open)
}

// optional .NodeActiveTickProto.ATPrice high = 2;
inline bool ATBarHistoryValue::has_high() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ATBarHistoryValue::set_has_high() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ATBarHistoryValue::clear_has_high() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ATBarHistoryValue::clear_high() {
  if (high_ != NULL) high_->::NodeActiveTickProto::ATPrice::Clear();
  clear_has_high();
}
inline const ::NodeActiveTickProto::ATPrice& ATBarHistoryValue::high() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATBarHistoryValue.high)
  return high_ != NULL ? *high_ : *default_instance_->high_;
}
inline ::NodeActiveTickProto::ATPrice* ATBarHistoryValue::mutable_high() {
  set_has_high();
  if (high_ == NULL) high_ = new ::NodeActiveTickProto::ATPrice;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATBarHistoryValue.high)
  return high_;
}
inline ::NodeActiveTickProto::ATPrice* ATBarHistoryValue::release_high() {
  clear_has_high();
  ::NodeActiveTickProto::ATPrice* temp = high_;
  high_ = NULL;
  return temp;
}
inline void ATBarHistoryValue::set_allocated_high(::NodeActiveTickProto::ATPrice* high) {
  delete high_;
  high_ = high;
  if (high) {
    set_has_high();
  } else {
    clear_has_high();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATBarHistoryValue.high)
}

// optional .NodeActiveTickProto.ATPrice low = 3;
inline bool ATBarHistoryValue::has_low() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ATBarHistoryValue::set_has_low() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ATBarHistoryValue::clear_has_low() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ATBarHistoryValue::clear_low() {
  if (low_ != NULL) low_->::NodeActiveTickProto::ATPrice::Clear();
  clear_has_low();
}
inline const ::NodeActiveTickProto::ATPrice& ATBarHistoryValue::low() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATBarHistoryValue.low)
  return low_ != NULL ? *low_ : *default_instance_->low_;
}
inline ::NodeActiveTickProto::ATPrice* ATBarHistoryValue::mutable_low() {
  set_has_low();
  if (low_ == NULL) low_ = new ::NodeActiveTickProto::ATPrice;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATBarHistoryValue.low)
  return low_;
}
inline ::NodeActiveTickProto::ATPrice* ATBarHistoryValue::release_low() {
  clear_has_low();
  ::NodeActiveTickProto::ATPrice* temp = low_;
  low_ = NULL;
  return temp;
}
inline void ATBarHistoryValue::set_allocated_low(::NodeActiveTickProto::ATPrice* low) {
  delete low_;
  low_ = low;
  if (low) {
    set_has_low();
  } else {
    clear_has_low();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATBarHistoryValue.low)
}

// optional .NodeActiveTickProto.ATPrice close = 4;
inline bool ATBarHistoryValue::has_close() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ATBarHistoryValue::set_has_close() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ATBarHistoryValue::clear_has_close() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ATBarHistoryValue::clear_close() {
  if (close_ != NULL) close_->::NodeActiveTickProto::ATPrice::Clear();
  clear_has_close();
}
inline const ::NodeActiveTickProto::ATPrice& ATBarHistoryValue::close() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATBarHistoryValue.close)
  return close_ != NULL ? *close_ : *default_instance_->close_;
}
inline ::NodeActiveTickProto::ATPrice* ATBarHistoryValue::mutable_close() {
  set_has_close();
  if (close_ == NULL) close_ = new ::NodeActiveTickProto::ATPrice;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATBarHistoryValue.close)
  return close_;
}
inline ::NodeActiveTickProto::ATPrice* ATBarHistoryValue::release_close() {
  clear_has_close();
  ::NodeActiveTickProto::ATPrice* temp = close_;
  close_ = NULL;
  return temp;
}
inline void ATBarHistoryValue::set_allocated_close(::NodeActiveTickProto::ATPrice* close) {
  delete close_;
  close_ = close;
  if (close) {
    set_has_close();
  } else {
    clear_has_close();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATBarHistoryValue.close)
}

// optional int64 volume = 5;
inline bool ATBarHistoryValue::has_volume() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ATBarHistoryValue::set_has_volume() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ATBarHistoryValue::clear_has_volume() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ATBarHistoryValue::clear_volume() {
  volume_ = GOOGLE_LONGLONG(0);
  clear_has_volume();
}
inline ::google::protobuf::int64 ATBarHistoryValue::volume() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATBarHistoryValue.volume)
  return volume_;
}
inline void ATBarHistoryValue::set_volume(::google::protobuf::int64 value) {
  set_has_volume();
  volume_ = value;
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATBarHistoryValue.volume)
}

// optional .NodeActiveTickProto.ATTime time = 6;
inline bool ATBarHistoryValue::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ATBarHistoryValue::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ATBarHistoryValue::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ATBarHistoryValue::clear_time() {
  if (time_ != NULL) time_->::NodeActiveTickProto::ATTime::Clear();
  clear_has_time();
}
inline const ::NodeActiveTickProto::ATTime& ATBarHistoryValue::time() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATBarHistoryValue.time)
  return time_ != NULL ? *time_ : *default_instance_->time_;
}
inline ::NodeActiveTickProto::ATTime* ATBarHistoryValue::mutable_time() {
  set_has_time();
  if (time_ == NULL) time_ = new ::NodeActiveTickProto::ATTime;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATBarHistoryValue.time)
  return time_;
}
inline ::NodeActiveTickProto::ATTime* ATBarHistoryValue::release_time() {
  clear_has_time();
  ::NodeActiveTickProto::ATTime* temp = time_;
  time_ = NULL;
  return temp;
}
inline void ATBarHistoryValue::set_allocated_time(::NodeActiveTickProto::ATTime* time) {
  delete time_;
  time_ = time;
  if (time) {
    set_has_time();
  } else {
    clear_has_time();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATBarHistoryValue.time)
}

// optional .NodeActiveTickProto.ATSymbol symbol = 7;
inline bool ATBarHistoryValue::has_symbol() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ATBarHistoryValue::set_has_symbol() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ATBarHistoryValue::clear_has_symbol() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ATBarHistoryValue::clear_symbol() {
  if (symbol_ != NULL) symbol_->::NodeActiveTickProto::ATSymbol::Clear();
  clear_has_symbol();
}
inline const ::NodeActiveTickProto::ATSymbol& ATBarHistoryValue::symbol() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATBarHistoryValue.symbol)
  return symbol_ != NULL ? *symbol_ : *default_instance_->symbol_;
}
inline ::NodeActiveTickProto::ATSymbol* ATBarHistoryValue::mutable_symbol() {
  set_has_symbol();
  if (symbol_ == NULL) symbol_ = new ::NodeActiveTickProto::ATSymbol;
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATBarHistoryValue.symbol)
  return symbol_;
}
inline ::NodeActiveTickProto::ATSymbol* ATBarHistoryValue::release_symbol() {
  clear_has_symbol();
  ::NodeActiveTickProto::ATSymbol* temp = symbol_;
  symbol_ = NULL;
  return temp;
}
inline void ATBarHistoryValue::set_allocated_symbol(::NodeActiveTickProto::ATSymbol* symbol) {
  delete symbol_;
  symbol_ = symbol;
  if (symbol) {
    set_has_symbol();
  } else {
    clear_has_symbol();
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATBarHistoryValue.symbol)
}

// optional string status = 8;
inline bool ATBarHistoryValue::has_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ATBarHistoryValue::set_has_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ATBarHistoryValue::clear_has_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ATBarHistoryValue::clear_status() {
  if (status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_->clear();
  }
  clear_has_status();
}
inline const ::std::string& ATBarHistoryValue::status() const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATBarHistoryValue.status)
  return *status_;
}
inline void ATBarHistoryValue::set_status(const ::std::string& value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_ = new ::std::string;
  }
  status_->assign(value);
  // @@protoc_insertion_point(field_set:NodeActiveTickProto.ATBarHistoryValue.status)
}
inline void ATBarHistoryValue::set_status(const char* value) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_ = new ::std::string;
  }
  status_->assign(value);
  // @@protoc_insertion_point(field_set_char:NodeActiveTickProto.ATBarHistoryValue.status)
}
inline void ATBarHistoryValue::set_status(const char* value, size_t size) {
  set_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_ = new ::std::string;
  }
  status_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:NodeActiveTickProto.ATBarHistoryValue.status)
}
inline ::std::string* ATBarHistoryValue::mutable_status() {
  set_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    status_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATBarHistoryValue.status)
  return status_;
}
inline ::std::string* ATBarHistoryValue::release_status() {
  clear_has_status();
  if (status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = status_;
    status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ATBarHistoryValue::set_allocated_status(::std::string* status) {
  if (status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete status_;
  }
  if (status) {
    set_has_status();
    status_ = status;
  } else {
    clear_has_status();
    status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:NodeActiveTickProto.ATBarHistoryValue.status)
}

// -------------------------------------------------------------------

// ATBarHistoryDbResponse

// repeated .NodeActiveTickProto.ATBarHistoryValue value = 1;
inline int ATBarHistoryDbResponse::value_size() const {
  return value_.size();
}
inline void ATBarHistoryDbResponse::clear_value() {
  value_.Clear();
}
inline const ::NodeActiveTickProto::ATBarHistoryValue& ATBarHistoryDbResponse::value(int index) const {
  // @@protoc_insertion_point(field_get:NodeActiveTickProto.ATBarHistoryDbResponse.value)
  return value_.Get(index);
}
inline ::NodeActiveTickProto::ATBarHistoryValue* ATBarHistoryDbResponse::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:NodeActiveTickProto.ATBarHistoryDbResponse.value)
  return value_.Mutable(index);
}
inline ::NodeActiveTickProto::ATBarHistoryValue* ATBarHistoryDbResponse::add_value() {
  // @@protoc_insertion_point(field_add:NodeActiveTickProto.ATBarHistoryDbResponse.value)
  return value_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATBarHistoryValue >&
ATBarHistoryDbResponse::value() const {
  // @@protoc_insertion_point(field_list:NodeActiveTickProto.ATBarHistoryDbResponse.value)
  return value_;
}
inline ::google::protobuf::RepeatedPtrField< ::NodeActiveTickProto::ATBarHistoryValue >*
ATBarHistoryDbResponse::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:NodeActiveTickProto.ATBarHistoryDbResponse.value)
  return &value_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NodeActiveTickProto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_2eproto__INCLUDED
