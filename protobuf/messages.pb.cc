// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NodeActiveTickProto {

namespace {

const ::google::protobuf::Descriptor* ATLoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATLoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATConstituentResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATConstituentResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATQuoteStreamResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATQuoteStreamResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATQuoteStreamResponseItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATQuoteStreamResponseItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATQuoteStreamTradeUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATQuoteStreamTradeUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATQuoteStreamQuoteUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATQuoteStreamQuoteUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATQuoteStreamRefreshUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATQuoteStreamRefreshUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATMarketMoversStreamUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATMarketMoversStreamUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATMarketMoversRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATMarketMoversRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATMarketMoversItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATMarketMoversItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATSymbol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATSymbol_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATPrice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATPrice_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATQuote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATQuote_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATBarHistoryValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATBarHistoryValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATBarHistoryDbResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATBarHistoryDbResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_2eproto() {
  protobuf_AddDesc_messages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages.proto");
  GOOGLE_CHECK(file != NULL);
  ATLoginResponse_descriptor_ = file->message_type(0);
  static const int ATLoginResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATLoginResponse, loginresponsetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATLoginResponse, loginresponsestring_),
  };
  ATLoginResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATLoginResponse_descriptor_,
      ATLoginResponse::default_instance_,
      ATLoginResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATLoginResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATLoginResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATLoginResponse));
  ATConstituentResponse_descriptor_ = file->message_type(1);
  static const int ATConstituentResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATConstituentResponse, symbols_),
  };
  ATConstituentResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATConstituentResponse_descriptor_,
      ATConstituentResponse::default_instance_,
      ATConstituentResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATConstituentResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATConstituentResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATConstituentResponse));
  ATQuoteStreamResponse_descriptor_ = file->message_type(2);
  static const int ATQuoteStreamResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamResponse, quotestreamresponsetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamResponse, quoteresponsecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamResponse, quotestreamitems_),
  };
  ATQuoteStreamResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATQuoteStreamResponse_descriptor_,
      ATQuoteStreamResponse::default_instance_,
      ATQuoteStreamResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATQuoteStreamResponse));
  ATQuoteStreamResponseItem_descriptor_ = file->message_type(3);
  static const int ATQuoteStreamResponseItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamResponseItem, responsetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamResponseItem, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamResponseItem, symbolstatus_),
  };
  ATQuoteStreamResponseItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATQuoteStreamResponseItem_descriptor_,
      ATQuoteStreamResponseItem::default_instance_,
      ATQuoteStreamResponseItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamResponseItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamResponseItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATQuoteStreamResponseItem));
  ATTime_descriptor_ = file->message_type(4);
  static const int ATTime_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATTime, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATTime, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATTime, dayofweek_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATTime, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATTime, hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATTime, minute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATTime, second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATTime, milliseconds_),
  };
  ATTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATTime_descriptor_,
      ATTime::default_instance_,
      ATTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATTime));
  ATQuoteStreamTradeUpdate_descriptor_ = file->message_type(5);
  static const int ATQuoteStreamTradeUpdate_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamTradeUpdate, tradesymbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamTradeUpdate, trademessageflags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamTradeUpdate, tradeconditiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamTradeUpdate, tradeexchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamTradeUpdate, tradeprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamTradeUpdate, tradesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamTradeUpdate, tradetime_),
  };
  ATQuoteStreamTradeUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATQuoteStreamTradeUpdate_descriptor_,
      ATQuoteStreamTradeUpdate::default_instance_,
      ATQuoteStreamTradeUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamTradeUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamTradeUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATQuoteStreamTradeUpdate));
  ATQuoteStreamQuoteUpdate_descriptor_ = file->message_type(6);
  static const int ATQuoteStreamQuoteUpdate_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamQuoteUpdate, quotesymbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamQuoteUpdate, quotecondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamQuoteUpdate, quotebidexchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamQuoteUpdate, quoteaskexchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamQuoteUpdate, quotebidprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamQuoteUpdate, quoteaskprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamQuoteUpdate, quotebidsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamQuoteUpdate, quoteasksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamQuoteUpdate, quotetime_),
  };
  ATQuoteStreamQuoteUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATQuoteStreamQuoteUpdate_descriptor_,
      ATQuoteStreamQuoteUpdate::default_instance_,
      ATQuoteStreamQuoteUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamQuoteUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamQuoteUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATQuoteStreamQuoteUpdate));
  ATQuoteStreamRefreshUpdate_descriptor_ = file->message_type(7);
  static const int ATQuoteStreamRefreshUpdate_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, lastprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, openprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, highprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, lowprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, closeprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, prevcloseprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, aftermarketcloseprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, bidprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, askprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, bidsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, asksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, lastsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, volume_),
  };
  ATQuoteStreamRefreshUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATQuoteStreamRefreshUpdate_descriptor_,
      ATQuoteStreamRefreshUpdate::default_instance_,
      ATQuoteStreamRefreshUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATQuoteStreamRefreshUpdate));
  ATMarketMoversStreamUpdate_descriptor_ = file->message_type(8);
  static const int ATMarketMoversStreamUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversStreamUpdate, marketmovers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversStreamUpdate, lastupdatedtime_),
  };
  ATMarketMoversStreamUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATMarketMoversStreamUpdate_descriptor_,
      ATMarketMoversStreamUpdate::default_instance_,
      ATMarketMoversStreamUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversStreamUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversStreamUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATMarketMoversStreamUpdate));
  ATMarketMoversRecord_descriptor_ = file->message_type(9);
  static const int ATMarketMoversRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversRecord, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversRecord, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversRecord, item_),
  };
  ATMarketMoversRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATMarketMoversRecord_descriptor_,
      ATMarketMoversRecord::default_instance_,
      ATMarketMoversRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATMarketMoversRecord));
  ATMarketMoversItem_descriptor_ = file->message_type(10);
  static const int ATMarketMoversItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversItem, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversItem, lastprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversItem, closeprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversItem, lastdatetime_),
  };
  ATMarketMoversItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATMarketMoversItem_descriptor_,
      ATMarketMoversItem::default_instance_,
      ATMarketMoversItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATMarketMoversItem));
  ATSymbol_descriptor_ = file->message_type(11);
  static const int ATSymbol_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATSymbol, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATSymbol, symboltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATSymbol, exchangetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATSymbol, countrytype_),
  };
  ATSymbol_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATSymbol_descriptor_,
      ATSymbol::default_instance_,
      ATSymbol_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATSymbol, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATSymbol, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATSymbol));
  ATPrice_descriptor_ = file->message_type(12);
  static const int ATPrice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATPrice, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATPrice, precision_),
  };
  ATPrice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATPrice_descriptor_,
      ATPrice::default_instance_,
      ATPrice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATPrice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATPrice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATPrice));
  ATQuote_descriptor_ = file->message_type(13);
  static const int ATQuote_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuote, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuote, bidprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuote, askprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuote, bidsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuote, asksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuote, quoteconditionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuote, servertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuote, bidexchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuote, askexchangeid_),
  };
  ATQuote_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATQuote_descriptor_,
      ATQuote::default_instance_,
      ATQuote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuote, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATQuote));
  ATBarHistoryValue_descriptor_ = file->message_type(14);
  static const int ATBarHistoryValue_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATBarHistoryValue, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATBarHistoryValue, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATBarHistoryValue, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATBarHistoryValue, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATBarHistoryValue, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATBarHistoryValue, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATBarHistoryValue, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATBarHistoryValue, status_),
  };
  ATBarHistoryValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATBarHistoryValue_descriptor_,
      ATBarHistoryValue::default_instance_,
      ATBarHistoryValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATBarHistoryValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATBarHistoryValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATBarHistoryValue));
  ATBarHistoryDbResponse_descriptor_ = file->message_type(15);
  static const int ATBarHistoryDbResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATBarHistoryDbResponse, value_),
  };
  ATBarHistoryDbResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATBarHistoryDbResponse_descriptor_,
      ATBarHistoryDbResponse::default_instance_,
      ATBarHistoryDbResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATBarHistoryDbResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATBarHistoryDbResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATBarHistoryDbResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATLoginResponse_descriptor_, &ATLoginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATConstituentResponse_descriptor_, &ATConstituentResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATQuoteStreamResponse_descriptor_, &ATQuoteStreamResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATQuoteStreamResponseItem_descriptor_, &ATQuoteStreamResponseItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATTime_descriptor_, &ATTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATQuoteStreamTradeUpdate_descriptor_, &ATQuoteStreamTradeUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATQuoteStreamQuoteUpdate_descriptor_, &ATQuoteStreamQuoteUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATQuoteStreamRefreshUpdate_descriptor_, &ATQuoteStreamRefreshUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATMarketMoversStreamUpdate_descriptor_, &ATMarketMoversStreamUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATMarketMoversRecord_descriptor_, &ATMarketMoversRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATMarketMoversItem_descriptor_, &ATMarketMoversItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATSymbol_descriptor_, &ATSymbol::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATPrice_descriptor_, &ATPrice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATQuote_descriptor_, &ATQuote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATBarHistoryValue_descriptor_, &ATBarHistoryValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATBarHistoryDbResponse_descriptor_, &ATBarHistoryDbResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_2eproto() {
  delete ATLoginResponse::default_instance_;
  delete ATLoginResponse_reflection_;
  delete ATConstituentResponse::default_instance_;
  delete ATConstituentResponse_reflection_;
  delete ATQuoteStreamResponse::default_instance_;
  delete ATQuoteStreamResponse_reflection_;
  delete ATQuoteStreamResponseItem::default_instance_;
  delete ATQuoteStreamResponseItem_reflection_;
  delete ATTime::default_instance_;
  delete ATTime_reflection_;
  delete ATQuoteStreamTradeUpdate::default_instance_;
  delete ATQuoteStreamTradeUpdate_reflection_;
  delete ATQuoteStreamQuoteUpdate::default_instance_;
  delete ATQuoteStreamQuoteUpdate_reflection_;
  delete ATQuoteStreamRefreshUpdate::default_instance_;
  delete ATQuoteStreamRefreshUpdate_reflection_;
  delete ATMarketMoversStreamUpdate::default_instance_;
  delete ATMarketMoversStreamUpdate_reflection_;
  delete ATMarketMoversRecord::default_instance_;
  delete ATMarketMoversRecord_reflection_;
  delete ATMarketMoversItem::default_instance_;
  delete ATMarketMoversItem_reflection_;
  delete ATSymbol::default_instance_;
  delete ATSymbol_reflection_;
  delete ATPrice::default_instance_;
  delete ATPrice_reflection_;
  delete ATQuote::default_instance_;
  delete ATQuote_reflection_;
  delete ATBarHistoryValue::default_instance_;
  delete ATBarHistoryValue_reflection_;
  delete ATBarHistoryDbResponse::default_instance_;
  delete ATBarHistoryDbResponse_reflection_;
}

void protobuf_AddDesc_messages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016messages.proto\022\023NodeActiveTickProto\"I\n"
    "\017ATLoginResponse\022\031\n\021loginResponseType\030\001 "
    "\002(\005\022\033\n\023loginResponseString\030\002 \002(\t\"G\n\025ATCo"
    "nstituentResponse\022.\n\007symbols\030\001 \003(\0132\035.Nod"
    "eActiveTickProto.ATSymbol\"\236\001\n\025ATQuoteStr"
    "eamResponse\022\037\n\027quoteStreamResponseType\030\001"
    " \001(\t\022\032\n\022quoteResponseCount\030\002 \001(\005\022H\n\020quot"
    "eStreamItems\030\003 \003(\0132..NodeActiveTickProto"
    ".ATQuoteStreamResponseItem\"v\n\031ATQuoteStr"
    "eamResponseItem\022\024\n\014responseType\030\001 \001(\t\022-\n"
    "\006symbol\030\002 \001(\0132\035.NodeActiveTickProto.ATSy"
    "mbol\022\024\n\014symbolStatus\030\003 \001(\t\"\211\001\n\006ATTime\022\014\n"
    "\004year\030\001 \001(\005\022\r\n\005month\030\002 \001(\005\022\021\n\tdayOfWeek\030"
    "\003 \001(\005\022\013\n\003day\030\004 \001(\005\022\014\n\004hour\030\005 \001(\005\022\016\n\006minu"
    "te\030\006 \001(\005\022\016\n\006second\030\007 \001(\005\022\024\n\014milliseconds"
    "\030\010 \001(\005\"\221\002\n\030ATQuoteStreamTradeUpdate\0222\n\013t"
    "radeSymbol\030\001 \001(\0132\035.NodeActiveTickProto.A"
    "TSymbol\022\031\n\021tradeMessageFlags\030\002 \001(\005\022\032\n\022tr"
    "adeConditionType\030\003 \003(\t\022\025\n\rtradeExchange\030"
    "\004 \001(\t\0220\n\ntradePrice\030\005 \001(\0132\034.NodeActiveTi"
    "ckProto.ATPrice\022\021\n\ttradeSize\030\006 \001(\005\022.\n\ttr"
    "adeTime\030\007 \001(\0132\033.NodeActiveTickProto.ATTi"
    "me\"\340\002\n\030ATQuoteStreamQuoteUpdate\0222\n\013quote"
    "Symbol\030\001 \001(\0132\035.NodeActiveTickProto.ATSym"
    "bol\022\026\n\016quoteCondition\030\002 \001(\t\022\030\n\020quoteBidE"
    "xchange\030\003 \001(\t\022\030\n\020quoteAskExchange\030\004 \001(\t\022"
    "3\n\rquoteBidPrice\030\005 \001(\0132\034.NodeActiveTickP"
    "roto.ATPrice\0223\n\rquoteAskPrice\030\006 \001(\0132\034.No"
    "deActiveTickProto.ATPrice\022\024\n\014quoteBidSiz"
    "e\030\007 \001(\005\022\024\n\014quoteAskSize\030\010 \001(\005\022.\n\tquoteTi"
    "me\030\t \001(\0132\033.NodeActiveTickProto.ATTime\"\327\004"
    "\n\032ATQuoteStreamRefreshUpdate\022-\n\006symbol\030\001"
    " \001(\0132\035.NodeActiveTickProto.ATSymbol\022/\n\tl"
    "astPrice\030\002 \001(\0132\034.NodeActiveTickProto.ATP"
    "rice\022/\n\topenPrice\030\003 \001(\0132\034.NodeActiveTick"
    "Proto.ATPrice\022/\n\thighPrice\030\004 \001(\0132\034.NodeA"
    "ctiveTickProto.ATPrice\022.\n\010lowPrice\030\005 \001(\013"
    "2\034.NodeActiveTickProto.ATPrice\0220\n\ncloseP"
    "rice\030\006 \001(\0132\034.NodeActiveTickProto.ATPrice"
    "\0224\n\016prevClosePrice\030\007 \001(\0132\034.NodeActiveTic"
    "kProto.ATPrice\022;\n\025afterMarketClosePrice\030"
    "\010 \001(\0132\034.NodeActiveTickProto.ATPrice\022.\n\010b"
    "idPrice\030\t \001(\0132\034.NodeActiveTickProto.ATPr"
    "ice\022.\n\010askPrice\030\n \001(\0132\034.NodeActiveTickPr"
    "oto.ATPrice\022\017\n\007bidSize\030\013 \001(\005\022\017\n\007askSize\030"
    "\014 \001(\005\022\020\n\010lastSize\030\r \001(\005\022\016\n\006volume\030\016 \001(\003\""
    "\223\001\n\032ATMarketMoversStreamUpdate\022\?\n\014market"
    "Movers\030\001 \001(\0132).NodeActiveTickProto.ATMar"
    "ketMoversRecord\0224\n\017lastUpdatedTime\030\002 \001(\013"
    "2\033.NodeActiveTickProto.ATTime\"\214\001\n\024ATMark"
    "etMoversRecord\022-\n\006symbol\030\001 \001(\0132\035.NodeAct"
    "iveTickProto.ATSymbol\022\016\n\006status\030\002 \001(\t\0225\n"
    "\004item\030\003 \003(\0132\'.NodeActiveTickProto.ATMark"
    "etMoversItem\"\312\001\n\022ATMarketMoversItem\022-\n\006s"
    "ymbol\030\001 \001(\0132\035.NodeActiveTickProto.ATSymb"
    "ol\022\014\n\004name\030\002 \001(\t\022/\n\tlastPrice\030\003 \001(\0132\034.No"
    "deActiveTickProto.ATPrice\0220\n\nclosePrice\030"
    "\004 \001(\0132\034.NodeActiveTickProto.ATPrice\022\024\n\014l"
    "astDateTime\030\005 \001(\005\"Y\n\010ATSymbol\022\016\n\006symbol\030"
    "\001 \001(\t\022\022\n\nsymbolType\030\002 \001(\005\022\024\n\014exchangeTyp"
    "e\030\003 \001(\005\022\023\n\013countryType\030\004 \001(\005\"+\n\007ATPrice\022"
    "\r\n\005price\030\001 \002(\001\022\021\n\tprecision\030\002 \002(\005\"\263\002\n\007AT"
    "Quote\022-\n\006symbol\030\001 \002(\0132\035.NodeActiveTickPr"
    "oto.ATSymbol\022.\n\010bidPrice\030\002 \002(\0132\034.NodeAct"
    "iveTickProto.ATPrice\022.\n\010askPrice\030\003 \002(\0132\034"
    ".NodeActiveTickProto.ATPrice\022\017\n\007bidSize\030"
    "\004 \001(\005\022\017\n\007askSize\030\005 \001(\005\022\030\n\020quoteCondition"
    "Id\030\006 \001(\005\022/\n\nserverTime\030\007 \001(\0132\033.NodeActiv"
    "eTickProto.ATTime\022\025\n\rbidExchangeId\030\010 \001(\005"
    "\022\025\n\raskExchangeId\030\t \001(\005\"\275\002\n\021ATBarHistory"
    "Value\022*\n\004open\030\001 \001(\0132\034.NodeActiveTickProt"
    "o.ATPrice\022*\n\004high\030\002 \001(\0132\034.NodeActiveTick"
    "Proto.ATPrice\022)\n\003low\030\003 \001(\0132\034.NodeActiveT"
    "ickProto.ATPrice\022+\n\005close\030\004 \001(\0132\034.NodeAc"
    "tiveTickProto.ATPrice\022\016\n\006volume\030\005 \001(\003\022)\n"
    "\004time\030\006 \001(\0132\033.NodeActiveTickProto.ATTime"
    "\022-\n\006symbol\030\007 \001(\0132\035.NodeActiveTickProto.A"
    "TSymbol\022\016\n\006status\030\010 \001(\t\"O\n\026ATBarHistoryD"
    "bResponse\0225\n\005value\030\001 \003(\0132&.NodeActiveTic"
    "kProto.ATBarHistoryValue", 3184);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages.proto", &protobuf_RegisterTypes);
  ATLoginResponse::default_instance_ = new ATLoginResponse();
  ATConstituentResponse::default_instance_ = new ATConstituentResponse();
  ATQuoteStreamResponse::default_instance_ = new ATQuoteStreamResponse();
  ATQuoteStreamResponseItem::default_instance_ = new ATQuoteStreamResponseItem();
  ATTime::default_instance_ = new ATTime();
  ATQuoteStreamTradeUpdate::default_instance_ = new ATQuoteStreamTradeUpdate();
  ATQuoteStreamQuoteUpdate::default_instance_ = new ATQuoteStreamQuoteUpdate();
  ATQuoteStreamRefreshUpdate::default_instance_ = new ATQuoteStreamRefreshUpdate();
  ATMarketMoversStreamUpdate::default_instance_ = new ATMarketMoversStreamUpdate();
  ATMarketMoversRecord::default_instance_ = new ATMarketMoversRecord();
  ATMarketMoversItem::default_instance_ = new ATMarketMoversItem();
  ATSymbol::default_instance_ = new ATSymbol();
  ATPrice::default_instance_ = new ATPrice();
  ATQuote::default_instance_ = new ATQuote();
  ATBarHistoryValue::default_instance_ = new ATBarHistoryValue();
  ATBarHistoryDbResponse::default_instance_ = new ATBarHistoryDbResponse();
  ATLoginResponse::default_instance_->InitAsDefaultInstance();
  ATConstituentResponse::default_instance_->InitAsDefaultInstance();
  ATQuoteStreamResponse::default_instance_->InitAsDefaultInstance();
  ATQuoteStreamResponseItem::default_instance_->InitAsDefaultInstance();
  ATTime::default_instance_->InitAsDefaultInstance();
  ATQuoteStreamTradeUpdate::default_instance_->InitAsDefaultInstance();
  ATQuoteStreamQuoteUpdate::default_instance_->InitAsDefaultInstance();
  ATQuoteStreamRefreshUpdate::default_instance_->InitAsDefaultInstance();
  ATMarketMoversStreamUpdate::default_instance_->InitAsDefaultInstance();
  ATMarketMoversRecord::default_instance_->InitAsDefaultInstance();
  ATMarketMoversItem::default_instance_->InitAsDefaultInstance();
  ATSymbol::default_instance_->InitAsDefaultInstance();
  ATPrice::default_instance_->InitAsDefaultInstance();
  ATQuote::default_instance_->InitAsDefaultInstance();
  ATBarHistoryValue::default_instance_->InitAsDefaultInstance();
  ATBarHistoryDbResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_2eproto {
  StaticDescriptorInitializer_messages_2eproto() {
    protobuf_AddDesc_messages_2eproto();
  }
} static_descriptor_initializer_messages_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ATLoginResponse::kLoginResponseTypeFieldNumber;
const int ATLoginResponse::kLoginResponseStringFieldNumber;
#endif  // !_MSC_VER

ATLoginResponse::ATLoginResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodeActiveTickProto.ATLoginResponse)
}

void ATLoginResponse::InitAsDefaultInstance() {
}

ATLoginResponse::ATLoginResponse(const ATLoginResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodeActiveTickProto.ATLoginResponse)
}

void ATLoginResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  loginresponsetype_ = 0;
  loginresponsestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATLoginResponse::~ATLoginResponse() {
  // @@protoc_insertion_point(destructor:NodeActiveTickProto.ATLoginResponse)
  SharedDtor();
}

void ATLoginResponse::SharedDtor() {
  if (loginresponsestring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete loginresponsestring_;
  }
  if (this != default_instance_) {
  }
}

void ATLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATLoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATLoginResponse_descriptor_;
}

const ATLoginResponse& ATLoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATLoginResponse* ATLoginResponse::default_instance_ = NULL;

ATLoginResponse* ATLoginResponse::New() const {
  return new ATLoginResponse;
}

void ATLoginResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    loginresponsetype_ = 0;
    if (has_loginresponsestring()) {
      if (loginresponsestring_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        loginresponsestring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodeActiveTickProto.ATLoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 loginResponseType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginresponsetype_)));
          set_has_loginresponsetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_loginResponseString;
        break;
      }

      // required string loginResponseString = 2;
      case 2: {
        if (tag == 18) {
         parse_loginResponseString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loginresponsestring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->loginresponsestring().data(), this->loginresponsestring().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "loginresponsestring");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodeActiveTickProto.ATLoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodeActiveTickProto.ATLoginResponse)
  return false;
#undef DO_
}

void ATLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodeActiveTickProto.ATLoginResponse)
  // required int32 loginResponseType = 1;
  if (has_loginresponsetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->loginresponsetype(), output);
  }

  // required string loginResponseString = 2;
  if (has_loginresponsestring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loginresponsestring().data(), this->loginresponsestring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "loginresponsestring");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->loginresponsestring(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodeActiveTickProto.ATLoginResponse)
}

::google::protobuf::uint8* ATLoginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodeActiveTickProto.ATLoginResponse)
  // required int32 loginResponseType = 1;
  if (has_loginresponsetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->loginresponsetype(), target);
  }

  // required string loginResponseString = 2;
  if (has_loginresponsestring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->loginresponsestring().data(), this->loginresponsestring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "loginresponsestring");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->loginresponsestring(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodeActiveTickProto.ATLoginResponse)
  return target;
}

int ATLoginResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 loginResponseType = 1;
    if (has_loginresponsetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginresponsetype());
    }

    // required string loginResponseString = 2;
    if (has_loginresponsestring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loginresponsestring());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATLoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATLoginResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATLoginResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATLoginResponse::MergeFrom(const ATLoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loginresponsetype()) {
      set_loginresponsetype(from.loginresponsetype());
    }
    if (from.has_loginresponsestring()) {
      set_loginresponsestring(from.loginresponsestring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATLoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATLoginResponse::CopyFrom(const ATLoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATLoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ATLoginResponse::Swap(ATLoginResponse* other) {
  if (other != this) {
    std::swap(loginresponsetype_, other->loginresponsetype_);
    std::swap(loginresponsestring_, other->loginresponsestring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATLoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATLoginResponse_descriptor_;
  metadata.reflection = ATLoginResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATConstituentResponse::kSymbolsFieldNumber;
#endif  // !_MSC_VER

ATConstituentResponse::ATConstituentResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodeActiveTickProto.ATConstituentResponse)
}

void ATConstituentResponse::InitAsDefaultInstance() {
}

ATConstituentResponse::ATConstituentResponse(const ATConstituentResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodeActiveTickProto.ATConstituentResponse)
}

void ATConstituentResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATConstituentResponse::~ATConstituentResponse() {
  // @@protoc_insertion_point(destructor:NodeActiveTickProto.ATConstituentResponse)
  SharedDtor();
}

void ATConstituentResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ATConstituentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATConstituentResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATConstituentResponse_descriptor_;
}

const ATConstituentResponse& ATConstituentResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATConstituentResponse* ATConstituentResponse::default_instance_ = NULL;

ATConstituentResponse* ATConstituentResponse::New() const {
  return new ATConstituentResponse;
}

void ATConstituentResponse::Clear() {
  symbols_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATConstituentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodeActiveTickProto.ATConstituentResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NodeActiveTickProto.ATSymbol symbols = 1;
      case 1: {
        if (tag == 10) {
         parse_symbols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_symbols()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_symbols;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodeActiveTickProto.ATConstituentResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodeActiveTickProto.ATConstituentResponse)
  return false;
#undef DO_
}

void ATConstituentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodeActiveTickProto.ATConstituentResponse)
  // repeated .NodeActiveTickProto.ATSymbol symbols = 1;
  for (int i = 0; i < this->symbols_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->symbols(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodeActiveTickProto.ATConstituentResponse)
}

::google::protobuf::uint8* ATConstituentResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodeActiveTickProto.ATConstituentResponse)
  // repeated .NodeActiveTickProto.ATSymbol symbols = 1;
  for (int i = 0; i < this->symbols_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->symbols(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodeActiveTickProto.ATConstituentResponse)
  return target;
}

int ATConstituentResponse::ByteSize() const {
  int total_size = 0;

  // repeated .NodeActiveTickProto.ATSymbol symbols = 1;
  total_size += 1 * this->symbols_size();
  for (int i = 0; i < this->symbols_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->symbols(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATConstituentResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATConstituentResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATConstituentResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATConstituentResponse::MergeFrom(const ATConstituentResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  symbols_.MergeFrom(from.symbols_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATConstituentResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATConstituentResponse::CopyFrom(const ATConstituentResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATConstituentResponse::IsInitialized() const {

  return true;
}

void ATConstituentResponse::Swap(ATConstituentResponse* other) {
  if (other != this) {
    symbols_.Swap(&other->symbols_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATConstituentResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATConstituentResponse_descriptor_;
  metadata.reflection = ATConstituentResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATQuoteStreamResponse::kQuoteStreamResponseTypeFieldNumber;
const int ATQuoteStreamResponse::kQuoteResponseCountFieldNumber;
const int ATQuoteStreamResponse::kQuoteStreamItemsFieldNumber;
#endif  // !_MSC_VER

ATQuoteStreamResponse::ATQuoteStreamResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodeActiveTickProto.ATQuoteStreamResponse)
}

void ATQuoteStreamResponse::InitAsDefaultInstance() {
}

ATQuoteStreamResponse::ATQuoteStreamResponse(const ATQuoteStreamResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodeActiveTickProto.ATQuoteStreamResponse)
}

void ATQuoteStreamResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  quotestreamresponsetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quoteresponsecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATQuoteStreamResponse::~ATQuoteStreamResponse() {
  // @@protoc_insertion_point(destructor:NodeActiveTickProto.ATQuoteStreamResponse)
  SharedDtor();
}

void ATQuoteStreamResponse::SharedDtor() {
  if (quotestreamresponsetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete quotestreamresponsetype_;
  }
  if (this != default_instance_) {
  }
}

void ATQuoteStreamResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATQuoteStreamResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATQuoteStreamResponse_descriptor_;
}

const ATQuoteStreamResponse& ATQuoteStreamResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATQuoteStreamResponse* ATQuoteStreamResponse::default_instance_ = NULL;

ATQuoteStreamResponse* ATQuoteStreamResponse::New() const {
  return new ATQuoteStreamResponse;
}

void ATQuoteStreamResponse::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_quotestreamresponsetype()) {
      if (quotestreamresponsetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        quotestreamresponsetype_->clear();
      }
    }
    quoteresponsecount_ = 0;
  }
  quotestreamitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATQuoteStreamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodeActiveTickProto.ATQuoteStreamResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string quoteStreamResponseType = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quotestreamresponsetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->quotestreamresponsetype().data(), this->quotestreamresponsetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotestreamresponsetype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_quoteResponseCount;
        break;
      }

      // optional int32 quoteResponseCount = 2;
      case 2: {
        if (tag == 16) {
         parse_quoteResponseCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quoteresponsecount_)));
          set_has_quoteresponsecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_quoteStreamItems;
        break;
      }

      // repeated .NodeActiveTickProto.ATQuoteStreamResponseItem quoteStreamItems = 3;
      case 3: {
        if (tag == 26) {
         parse_quoteStreamItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quotestreamitems()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_quoteStreamItems;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodeActiveTickProto.ATQuoteStreamResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodeActiveTickProto.ATQuoteStreamResponse)
  return false;
#undef DO_
}

void ATQuoteStreamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodeActiveTickProto.ATQuoteStreamResponse)
  // optional string quoteStreamResponseType = 1;
  if (has_quotestreamresponsetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quotestreamresponsetype().data(), this->quotestreamresponsetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotestreamresponsetype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->quotestreamresponsetype(), output);
  }

  // optional int32 quoteResponseCount = 2;
  if (has_quoteresponsecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quoteresponsecount(), output);
  }

  // repeated .NodeActiveTickProto.ATQuoteStreamResponseItem quoteStreamItems = 3;
  for (int i = 0; i < this->quotestreamitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->quotestreamitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodeActiveTickProto.ATQuoteStreamResponse)
}

::google::protobuf::uint8* ATQuoteStreamResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodeActiveTickProto.ATQuoteStreamResponse)
  // optional string quoteStreamResponseType = 1;
  if (has_quotestreamresponsetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quotestreamresponsetype().data(), this->quotestreamresponsetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotestreamresponsetype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->quotestreamresponsetype(), target);
  }

  // optional int32 quoteResponseCount = 2;
  if (has_quoteresponsecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quoteresponsecount(), target);
  }

  // repeated .NodeActiveTickProto.ATQuoteStreamResponseItem quoteStreamItems = 3;
  for (int i = 0; i < this->quotestreamitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->quotestreamitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodeActiveTickProto.ATQuoteStreamResponse)
  return target;
}

int ATQuoteStreamResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string quoteStreamResponseType = 1;
    if (has_quotestreamresponsetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quotestreamresponsetype());
    }

    // optional int32 quoteResponseCount = 2;
    if (has_quoteresponsecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quoteresponsecount());
    }

  }
  // repeated .NodeActiveTickProto.ATQuoteStreamResponseItem quoteStreamItems = 3;
  total_size += 1 * this->quotestreamitems_size();
  for (int i = 0; i < this->quotestreamitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quotestreamitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATQuoteStreamResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATQuoteStreamResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATQuoteStreamResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATQuoteStreamResponse::MergeFrom(const ATQuoteStreamResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  quotestreamitems_.MergeFrom(from.quotestreamitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quotestreamresponsetype()) {
      set_quotestreamresponsetype(from.quotestreamresponsetype());
    }
    if (from.has_quoteresponsecount()) {
      set_quoteresponsecount(from.quoteresponsecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATQuoteStreamResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATQuoteStreamResponse::CopyFrom(const ATQuoteStreamResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATQuoteStreamResponse::IsInitialized() const {

  return true;
}

void ATQuoteStreamResponse::Swap(ATQuoteStreamResponse* other) {
  if (other != this) {
    std::swap(quotestreamresponsetype_, other->quotestreamresponsetype_);
    std::swap(quoteresponsecount_, other->quoteresponsecount_);
    quotestreamitems_.Swap(&other->quotestreamitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATQuoteStreamResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATQuoteStreamResponse_descriptor_;
  metadata.reflection = ATQuoteStreamResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATQuoteStreamResponseItem::kResponseTypeFieldNumber;
const int ATQuoteStreamResponseItem::kSymbolFieldNumber;
const int ATQuoteStreamResponseItem::kSymbolStatusFieldNumber;
#endif  // !_MSC_VER

ATQuoteStreamResponseItem::ATQuoteStreamResponseItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodeActiveTickProto.ATQuoteStreamResponseItem)
}

void ATQuoteStreamResponseItem::InitAsDefaultInstance() {
  symbol_ = const_cast< ::NodeActiveTickProto::ATSymbol*>(&::NodeActiveTickProto::ATSymbol::default_instance());
}

ATQuoteStreamResponseItem::ATQuoteStreamResponseItem(const ATQuoteStreamResponseItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodeActiveTickProto.ATQuoteStreamResponseItem)
}

void ATQuoteStreamResponseItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  responsetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symbol_ = NULL;
  symbolstatus_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATQuoteStreamResponseItem::~ATQuoteStreamResponseItem() {
  // @@protoc_insertion_point(destructor:NodeActiveTickProto.ATQuoteStreamResponseItem)
  SharedDtor();
}

void ATQuoteStreamResponseItem::SharedDtor() {
  if (responsetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete responsetype_;
  }
  if (symbolstatus_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbolstatus_;
  }
  if (this != default_instance_) {
    delete symbol_;
  }
}

void ATQuoteStreamResponseItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATQuoteStreamResponseItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATQuoteStreamResponseItem_descriptor_;
}

const ATQuoteStreamResponseItem& ATQuoteStreamResponseItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATQuoteStreamResponseItem* ATQuoteStreamResponseItem::default_instance_ = NULL;

ATQuoteStreamResponseItem* ATQuoteStreamResponseItem::New() const {
  return new ATQuoteStreamResponseItem;
}

void ATQuoteStreamResponseItem::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_responsetype()) {
      if (responsetype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        responsetype_->clear();
      }
    }
    if (has_symbol()) {
      if (symbol_ != NULL) symbol_->::NodeActiveTickProto::ATSymbol::Clear();
    }
    if (has_symbolstatus()) {
      if (symbolstatus_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        symbolstatus_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATQuoteStreamResponseItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodeActiveTickProto.ATQuoteStreamResponseItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string responseType = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_responsetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->responsetype().data(), this->responsetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "responsetype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_symbol;
        break;
      }

      // optional .NodeActiveTickProto.ATSymbol symbol = 2;
      case 2: {
        if (tag == 18) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_symbolStatus;
        break;
      }

      // optional string symbolStatus = 3;
      case 3: {
        if (tag == 26) {
         parse_symbolStatus:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbolstatus()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbolstatus().data(), this->symbolstatus().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "symbolstatus");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodeActiveTickProto.ATQuoteStreamResponseItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodeActiveTickProto.ATQuoteStreamResponseItem)
  return false;
#undef DO_
}

void ATQuoteStreamResponseItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodeActiveTickProto.ATQuoteStreamResponseItem)
  // optional string responseType = 1;
  if (has_responsetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->responsetype().data(), this->responsetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "responsetype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->responsetype(), output);
  }

  // optional .NodeActiveTickProto.ATSymbol symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->symbol(), output);
  }

  // optional string symbolStatus = 3;
  if (has_symbolstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbolstatus().data(), this->symbolstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbolstatus");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->symbolstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodeActiveTickProto.ATQuoteStreamResponseItem)
}

::google::protobuf::uint8* ATQuoteStreamResponseItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodeActiveTickProto.ATQuoteStreamResponseItem)
  // optional string responseType = 1;
  if (has_responsetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->responsetype().data(), this->responsetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "responsetype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->responsetype(), target);
  }

  // optional .NodeActiveTickProto.ATSymbol symbol = 2;
  if (has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->symbol(), target);
  }

  // optional string symbolStatus = 3;
  if (has_symbolstatus()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbolstatus().data(), this->symbolstatus().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbolstatus");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->symbolstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodeActiveTickProto.ATQuoteStreamResponseItem)
  return target;
}

int ATQuoteStreamResponseItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string responseType = 1;
    if (has_responsetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->responsetype());
    }

    // optional .NodeActiveTickProto.ATSymbol symbol = 2;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->symbol());
    }

    // optional string symbolStatus = 3;
    if (has_symbolstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbolstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATQuoteStreamResponseItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATQuoteStreamResponseItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATQuoteStreamResponseItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATQuoteStreamResponseItem::MergeFrom(const ATQuoteStreamResponseItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsetype()) {
      set_responsetype(from.responsetype());
    }
    if (from.has_symbol()) {
      mutable_symbol()->::NodeActiveTickProto::ATSymbol::MergeFrom(from.symbol());
    }
    if (from.has_symbolstatus()) {
      set_symbolstatus(from.symbolstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATQuoteStreamResponseItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATQuoteStreamResponseItem::CopyFrom(const ATQuoteStreamResponseItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATQuoteStreamResponseItem::IsInitialized() const {

  return true;
}

void ATQuoteStreamResponseItem::Swap(ATQuoteStreamResponseItem* other) {
  if (other != this) {
    std::swap(responsetype_, other->responsetype_);
    std::swap(symbol_, other->symbol_);
    std::swap(symbolstatus_, other->symbolstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATQuoteStreamResponseItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATQuoteStreamResponseItem_descriptor_;
  metadata.reflection = ATQuoteStreamResponseItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATTime::kYearFieldNumber;
const int ATTime::kMonthFieldNumber;
const int ATTime::kDayOfWeekFieldNumber;
const int ATTime::kDayFieldNumber;
const int ATTime::kHourFieldNumber;
const int ATTime::kMinuteFieldNumber;
const int ATTime::kSecondFieldNumber;
const int ATTime::kMillisecondsFieldNumber;
#endif  // !_MSC_VER

ATTime::ATTime()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodeActiveTickProto.ATTime)
}

void ATTime::InitAsDefaultInstance() {
}

ATTime::ATTime(const ATTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodeActiveTickProto.ATTime)
}

void ATTime::SharedCtor() {
  _cached_size_ = 0;
  year_ = 0;
  month_ = 0;
  dayofweek_ = 0;
  day_ = 0;
  hour_ = 0;
  minute_ = 0;
  second_ = 0;
  milliseconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATTime::~ATTime() {
  // @@protoc_insertion_point(destructor:NodeActiveTickProto.ATTime)
  SharedDtor();
}

void ATTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ATTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATTime_descriptor_;
}

const ATTime& ATTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATTime* ATTime::default_instance_ = NULL;

ATTime* ATTime::New() const {
  return new ATTime;
}

void ATTime::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ATTime*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(year_, milliseconds_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodeActiveTickProto.ATTime)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 year = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_month;
        break;
      }

      // optional int32 month = 2;
      case 2: {
        if (tag == 16) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_dayOfWeek;
        break;
      }

      // optional int32 dayOfWeek = 3;
      case 3: {
        if (tag == 24) {
         parse_dayOfWeek:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dayofweek_)));
          set_has_dayofweek();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_day;
        break;
      }

      // optional int32 day = 4;
      case 4: {
        if (tag == 32) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_hour;
        break;
      }

      // optional int32 hour = 5;
      case 5: {
        if (tag == 40) {
         parse_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hour_)));
          set_has_hour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_minute;
        break;
      }

      // optional int32 minute = 6;
      case 6: {
        if (tag == 48) {
         parse_minute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minute_)));
          set_has_minute();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_second;
        break;
      }

      // optional int32 second = 7;
      case 7: {
        if (tag == 56) {
         parse_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_)));
          set_has_second();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_milliseconds;
        break;
      }

      // optional int32 milliseconds = 8;
      case 8: {
        if (tag == 64) {
         parse_milliseconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &milliseconds_)));
          set_has_milliseconds();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodeActiveTickProto.ATTime)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodeActiveTickProto.ATTime)
  return false;
#undef DO_
}

void ATTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodeActiveTickProto.ATTime)
  // optional int32 year = 1;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->year(), output);
  }

  // optional int32 month = 2;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->month(), output);
  }

  // optional int32 dayOfWeek = 3;
  if (has_dayofweek()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dayofweek(), output);
  }

  // optional int32 day = 4;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->day(), output);
  }

  // optional int32 hour = 5;
  if (has_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hour(), output);
  }

  // optional int32 minute = 6;
  if (has_minute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->minute(), output);
  }

  // optional int32 second = 7;
  if (has_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->second(), output);
  }

  // optional int32 milliseconds = 8;
  if (has_milliseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->milliseconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodeActiveTickProto.ATTime)
}

::google::protobuf::uint8* ATTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodeActiveTickProto.ATTime)
  // optional int32 year = 1;
  if (has_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->year(), target);
  }

  // optional int32 month = 2;
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->month(), target);
  }

  // optional int32 dayOfWeek = 3;
  if (has_dayofweek()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dayofweek(), target);
  }

  // optional int32 day = 4;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->day(), target);
  }

  // optional int32 hour = 5;
  if (has_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hour(), target);
  }

  // optional int32 minute = 6;
  if (has_minute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->minute(), target);
  }

  // optional int32 second = 7;
  if (has_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->second(), target);
  }

  // optional int32 milliseconds = 8;
  if (has_milliseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->milliseconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodeActiveTickProto.ATTime)
  return target;
}

int ATTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 year = 1;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year());
    }

    // optional int32 month = 2;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->month());
    }

    // optional int32 dayOfWeek = 3;
    if (has_dayofweek()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dayofweek());
    }

    // optional int32 day = 4;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // optional int32 hour = 5;
    if (has_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hour());
    }

    // optional int32 minute = 6;
    if (has_minute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minute());
    }

    // optional int32 second = 7;
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->second());
    }

    // optional int32 milliseconds = 8;
    if (has_milliseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->milliseconds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATTime::MergeFrom(const ATTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_dayofweek()) {
      set_dayofweek(from.dayofweek());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_hour()) {
      set_hour(from.hour());
    }
    if (from.has_minute()) {
      set_minute(from.minute());
    }
    if (from.has_second()) {
      set_second(from.second());
    }
    if (from.has_milliseconds()) {
      set_milliseconds(from.milliseconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATTime::CopyFrom(const ATTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATTime::IsInitialized() const {

  return true;
}

void ATTime::Swap(ATTime* other) {
  if (other != this) {
    std::swap(year_, other->year_);
    std::swap(month_, other->month_);
    std::swap(dayofweek_, other->dayofweek_);
    std::swap(day_, other->day_);
    std::swap(hour_, other->hour_);
    std::swap(minute_, other->minute_);
    std::swap(second_, other->second_);
    std::swap(milliseconds_, other->milliseconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATTime_descriptor_;
  metadata.reflection = ATTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATQuoteStreamTradeUpdate::kTradeSymbolFieldNumber;
const int ATQuoteStreamTradeUpdate::kTradeMessageFlagsFieldNumber;
const int ATQuoteStreamTradeUpdate::kTradeConditionTypeFieldNumber;
const int ATQuoteStreamTradeUpdate::kTradeExchangeFieldNumber;
const int ATQuoteStreamTradeUpdate::kTradePriceFieldNumber;
const int ATQuoteStreamTradeUpdate::kTradeSizeFieldNumber;
const int ATQuoteStreamTradeUpdate::kTradeTimeFieldNumber;
#endif  // !_MSC_VER

ATQuoteStreamTradeUpdate::ATQuoteStreamTradeUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodeActiveTickProto.ATQuoteStreamTradeUpdate)
}

void ATQuoteStreamTradeUpdate::InitAsDefaultInstance() {
  tradesymbol_ = const_cast< ::NodeActiveTickProto::ATSymbol*>(&::NodeActiveTickProto::ATSymbol::default_instance());
  tradeprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  tradetime_ = const_cast< ::NodeActiveTickProto::ATTime*>(&::NodeActiveTickProto::ATTime::default_instance());
}

ATQuoteStreamTradeUpdate::ATQuoteStreamTradeUpdate(const ATQuoteStreamTradeUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodeActiveTickProto.ATQuoteStreamTradeUpdate)
}

void ATQuoteStreamTradeUpdate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  tradesymbol_ = NULL;
  trademessageflags_ = 0;
  tradeexchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tradeprice_ = NULL;
  tradesize_ = 0;
  tradetime_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATQuoteStreamTradeUpdate::~ATQuoteStreamTradeUpdate() {
  // @@protoc_insertion_point(destructor:NodeActiveTickProto.ATQuoteStreamTradeUpdate)
  SharedDtor();
}

void ATQuoteStreamTradeUpdate::SharedDtor() {
  if (tradeexchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete tradeexchange_;
  }
  if (this != default_instance_) {
    delete tradesymbol_;
    delete tradeprice_;
    delete tradetime_;
  }
}

void ATQuoteStreamTradeUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATQuoteStreamTradeUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATQuoteStreamTradeUpdate_descriptor_;
}

const ATQuoteStreamTradeUpdate& ATQuoteStreamTradeUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATQuoteStreamTradeUpdate* ATQuoteStreamTradeUpdate::default_instance_ = NULL;

ATQuoteStreamTradeUpdate* ATQuoteStreamTradeUpdate::New() const {
  return new ATQuoteStreamTradeUpdate;
}

void ATQuoteStreamTradeUpdate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ATQuoteStreamTradeUpdate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 123) {
    ZR_(trademessageflags_, tradesize_);
    if (has_tradesymbol()) {
      if (tradesymbol_ != NULL) tradesymbol_->::NodeActiveTickProto::ATSymbol::Clear();
    }
    if (has_tradeexchange()) {
      if (tradeexchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        tradeexchange_->clear();
      }
    }
    if (has_tradeprice()) {
      if (tradeprice_ != NULL) tradeprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
    if (has_tradetime()) {
      if (tradetime_ != NULL) tradetime_->::NodeActiveTickProto::ATTime::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  tradeconditiontype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATQuoteStreamTradeUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodeActiveTickProto.ATQuoteStreamTradeUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NodeActiveTickProto.ATSymbol tradeSymbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tradesymbol()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_tradeMessageFlags;
        break;
      }

      // optional int32 tradeMessageFlags = 2;
      case 2: {
        if (tag == 16) {
         parse_tradeMessageFlags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trademessageflags_)));
          set_has_trademessageflags();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tradeConditionType;
        break;
      }

      // repeated string tradeConditionType = 3;
      case 3: {
        if (tag == 26) {
         parse_tradeConditionType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tradeconditiontype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeconditiontype(this->tradeconditiontype_size() - 1).data(),
            this->tradeconditiontype(this->tradeconditiontype_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tradeconditiontype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_tradeConditionType;
        if (input->ExpectTag(34)) goto parse_tradeExchange;
        break;
      }

      // optional string tradeExchange = 4;
      case 4: {
        if (tag == 34) {
         parse_tradeExchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeexchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->tradeexchange().data(), this->tradeexchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "tradeexchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_tradePrice;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice tradePrice = 5;
      case 5: {
        if (tag == 42) {
         parse_tradePrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tradeprice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_tradeSize;
        break;
      }

      // optional int32 tradeSize = 6;
      case 6: {
        if (tag == 48) {
         parse_tradeSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tradesize_)));
          set_has_tradesize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_tradeTime;
        break;
      }

      // optional .NodeActiveTickProto.ATTime tradeTime = 7;
      case 7: {
        if (tag == 58) {
         parse_tradeTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tradetime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodeActiveTickProto.ATQuoteStreamTradeUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodeActiveTickProto.ATQuoteStreamTradeUpdate)
  return false;
#undef DO_
}

void ATQuoteStreamTradeUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodeActiveTickProto.ATQuoteStreamTradeUpdate)
  // optional .NodeActiveTickProto.ATSymbol tradeSymbol = 1;
  if (has_tradesymbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tradesymbol(), output);
  }

  // optional int32 tradeMessageFlags = 2;
  if (has_trademessageflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->trademessageflags(), output);
  }

  // repeated string tradeConditionType = 3;
  for (int i = 0; i < this->tradeconditiontype_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->tradeconditiontype(i).data(), this->tradeconditiontype(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE,
    "tradeconditiontype");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tradeconditiontype(i), output);
  }

  // optional string tradeExchange = 4;
  if (has_tradeexchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeexchange().data(), this->tradeexchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradeexchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->tradeexchange(), output);
  }

  // optional .NodeActiveTickProto.ATPrice tradePrice = 5;
  if (has_tradeprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tradeprice(), output);
  }

  // optional int32 tradeSize = 6;
  if (has_tradesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tradesize(), output);
  }

  // optional .NodeActiveTickProto.ATTime tradeTime = 7;
  if (has_tradetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tradetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodeActiveTickProto.ATQuoteStreamTradeUpdate)
}

::google::protobuf::uint8* ATQuoteStreamTradeUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodeActiveTickProto.ATQuoteStreamTradeUpdate)
  // optional .NodeActiveTickProto.ATSymbol tradeSymbol = 1;
  if (has_tradesymbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tradesymbol(), target);
  }

  // optional int32 tradeMessageFlags = 2;
  if (has_trademessageflags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->trademessageflags(), target);
  }

  // repeated string tradeConditionType = 3;
  for (int i = 0; i < this->tradeconditiontype_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeconditiontype(i).data(), this->tradeconditiontype(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradeconditiontype");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->tradeconditiontype(i), target);
  }

  // optional string tradeExchange = 4;
  if (has_tradeexchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->tradeexchange().data(), this->tradeexchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "tradeexchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tradeexchange(), target);
  }

  // optional .NodeActiveTickProto.ATPrice tradePrice = 5;
  if (has_tradeprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tradeprice(), target);
  }

  // optional int32 tradeSize = 6;
  if (has_tradesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tradesize(), target);
  }

  // optional .NodeActiveTickProto.ATTime tradeTime = 7;
  if (has_tradetime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->tradetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodeActiveTickProto.ATQuoteStreamTradeUpdate)
  return target;
}

int ATQuoteStreamTradeUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NodeActiveTickProto.ATSymbol tradeSymbol = 1;
    if (has_tradesymbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tradesymbol());
    }

    // optional int32 tradeMessageFlags = 2;
    if (has_trademessageflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trademessageflags());
    }

    // optional string tradeExchange = 4;
    if (has_tradeexchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeexchange());
    }

    // optional .NodeActiveTickProto.ATPrice tradePrice = 5;
    if (has_tradeprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tradeprice());
    }

    // optional int32 tradeSize = 6;
    if (has_tradesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tradesize());
    }

    // optional .NodeActiveTickProto.ATTime tradeTime = 7;
    if (has_tradetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tradetime());
    }

  }
  // repeated string tradeConditionType = 3;
  total_size += 1 * this->tradeconditiontype_size();
  for (int i = 0; i < this->tradeconditiontype_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tradeconditiontype(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATQuoteStreamTradeUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATQuoteStreamTradeUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATQuoteStreamTradeUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATQuoteStreamTradeUpdate::MergeFrom(const ATQuoteStreamTradeUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  tradeconditiontype_.MergeFrom(from.tradeconditiontype_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tradesymbol()) {
      mutable_tradesymbol()->::NodeActiveTickProto::ATSymbol::MergeFrom(from.tradesymbol());
    }
    if (from.has_trademessageflags()) {
      set_trademessageflags(from.trademessageflags());
    }
    if (from.has_tradeexchange()) {
      set_tradeexchange(from.tradeexchange());
    }
    if (from.has_tradeprice()) {
      mutable_tradeprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.tradeprice());
    }
    if (from.has_tradesize()) {
      set_tradesize(from.tradesize());
    }
    if (from.has_tradetime()) {
      mutable_tradetime()->::NodeActiveTickProto::ATTime::MergeFrom(from.tradetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATQuoteStreamTradeUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATQuoteStreamTradeUpdate::CopyFrom(const ATQuoteStreamTradeUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATQuoteStreamTradeUpdate::IsInitialized() const {

  if (has_tradeprice()) {
    if (!this->tradeprice().IsInitialized()) return false;
  }
  return true;
}

void ATQuoteStreamTradeUpdate::Swap(ATQuoteStreamTradeUpdate* other) {
  if (other != this) {
    std::swap(tradesymbol_, other->tradesymbol_);
    std::swap(trademessageflags_, other->trademessageflags_);
    tradeconditiontype_.Swap(&other->tradeconditiontype_);
    std::swap(tradeexchange_, other->tradeexchange_);
    std::swap(tradeprice_, other->tradeprice_);
    std::swap(tradesize_, other->tradesize_);
    std::swap(tradetime_, other->tradetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATQuoteStreamTradeUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATQuoteStreamTradeUpdate_descriptor_;
  metadata.reflection = ATQuoteStreamTradeUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATQuoteStreamQuoteUpdate::kQuoteSymbolFieldNumber;
const int ATQuoteStreamQuoteUpdate::kQuoteConditionFieldNumber;
const int ATQuoteStreamQuoteUpdate::kQuoteBidExchangeFieldNumber;
const int ATQuoteStreamQuoteUpdate::kQuoteAskExchangeFieldNumber;
const int ATQuoteStreamQuoteUpdate::kQuoteBidPriceFieldNumber;
const int ATQuoteStreamQuoteUpdate::kQuoteAskPriceFieldNumber;
const int ATQuoteStreamQuoteUpdate::kQuoteBidSizeFieldNumber;
const int ATQuoteStreamQuoteUpdate::kQuoteAskSizeFieldNumber;
const int ATQuoteStreamQuoteUpdate::kQuoteTimeFieldNumber;
#endif  // !_MSC_VER

ATQuoteStreamQuoteUpdate::ATQuoteStreamQuoteUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodeActiveTickProto.ATQuoteStreamQuoteUpdate)
}

void ATQuoteStreamQuoteUpdate::InitAsDefaultInstance() {
  quotesymbol_ = const_cast< ::NodeActiveTickProto::ATSymbol*>(&::NodeActiveTickProto::ATSymbol::default_instance());
  quotebidprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  quoteaskprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  quotetime_ = const_cast< ::NodeActiveTickProto::ATTime*>(&::NodeActiveTickProto::ATTime::default_instance());
}

ATQuoteStreamQuoteUpdate::ATQuoteStreamQuoteUpdate(const ATQuoteStreamQuoteUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodeActiveTickProto.ATQuoteStreamQuoteUpdate)
}

void ATQuoteStreamQuoteUpdate::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  quotesymbol_ = NULL;
  quotecondition_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quotebidexchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quoteaskexchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  quotebidprice_ = NULL;
  quoteaskprice_ = NULL;
  quotebidsize_ = 0;
  quoteasksize_ = 0;
  quotetime_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATQuoteStreamQuoteUpdate::~ATQuoteStreamQuoteUpdate() {
  // @@protoc_insertion_point(destructor:NodeActiveTickProto.ATQuoteStreamQuoteUpdate)
  SharedDtor();
}

void ATQuoteStreamQuoteUpdate::SharedDtor() {
  if (quotecondition_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete quotecondition_;
  }
  if (quotebidexchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete quotebidexchange_;
  }
  if (quoteaskexchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete quoteaskexchange_;
  }
  if (this != default_instance_) {
    delete quotesymbol_;
    delete quotebidprice_;
    delete quoteaskprice_;
    delete quotetime_;
  }
}

void ATQuoteStreamQuoteUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATQuoteStreamQuoteUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATQuoteStreamQuoteUpdate_descriptor_;
}

const ATQuoteStreamQuoteUpdate& ATQuoteStreamQuoteUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATQuoteStreamQuoteUpdate* ATQuoteStreamQuoteUpdate::default_instance_ = NULL;

ATQuoteStreamQuoteUpdate* ATQuoteStreamQuoteUpdate::New() const {
  return new ATQuoteStreamQuoteUpdate;
}

void ATQuoteStreamQuoteUpdate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ATQuoteStreamQuoteUpdate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(quotebidsize_, quoteasksize_);
    if (has_quotesymbol()) {
      if (quotesymbol_ != NULL) quotesymbol_->::NodeActiveTickProto::ATSymbol::Clear();
    }
    if (has_quotecondition()) {
      if (quotecondition_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        quotecondition_->clear();
      }
    }
    if (has_quotebidexchange()) {
      if (quotebidexchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        quotebidexchange_->clear();
      }
    }
    if (has_quoteaskexchange()) {
      if (quoteaskexchange_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        quoteaskexchange_->clear();
      }
    }
    if (has_quotebidprice()) {
      if (quotebidprice_ != NULL) quotebidprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
    if (has_quoteaskprice()) {
      if (quoteaskprice_ != NULL) quoteaskprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
  }
  if (has_quotetime()) {
    if (quotetime_ != NULL) quotetime_->::NodeActiveTickProto::ATTime::Clear();
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATQuoteStreamQuoteUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodeActiveTickProto.ATQuoteStreamQuoteUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NodeActiveTickProto.ATSymbol quoteSymbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quotesymbol()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_quoteCondition;
        break;
      }

      // optional string quoteCondition = 2;
      case 2: {
        if (tag == 18) {
         parse_quoteCondition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quotecondition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->quotecondition().data(), this->quotecondition().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotecondition");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_quoteBidExchange;
        break;
      }

      // optional string quoteBidExchange = 3;
      case 3: {
        if (tag == 26) {
         parse_quoteBidExchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quotebidexchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->quotebidexchange().data(), this->quotebidexchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quotebidexchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_quoteAskExchange;
        break;
      }

      // optional string quoteAskExchange = 4;
      case 4: {
        if (tag == 34) {
         parse_quoteAskExchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quoteaskexchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->quoteaskexchange().data(), this->quoteaskexchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "quoteaskexchange");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_quoteBidPrice;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice quoteBidPrice = 5;
      case 5: {
        if (tag == 42) {
         parse_quoteBidPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quotebidprice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_quoteAskPrice;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice quoteAskPrice = 6;
      case 6: {
        if (tag == 50) {
         parse_quoteAskPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quoteaskprice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_quoteBidSize;
        break;
      }

      // optional int32 quoteBidSize = 7;
      case 7: {
        if (tag == 56) {
         parse_quoteBidSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quotebidsize_)));
          set_has_quotebidsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_quoteAskSize;
        break;
      }

      // optional int32 quoteAskSize = 8;
      case 8: {
        if (tag == 64) {
         parse_quoteAskSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quoteasksize_)));
          set_has_quoteasksize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_quoteTime;
        break;
      }

      // optional .NodeActiveTickProto.ATTime quoteTime = 9;
      case 9: {
        if (tag == 74) {
         parse_quoteTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quotetime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodeActiveTickProto.ATQuoteStreamQuoteUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodeActiveTickProto.ATQuoteStreamQuoteUpdate)
  return false;
#undef DO_
}

void ATQuoteStreamQuoteUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodeActiveTickProto.ATQuoteStreamQuoteUpdate)
  // optional .NodeActiveTickProto.ATSymbol quoteSymbol = 1;
  if (has_quotesymbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->quotesymbol(), output);
  }

  // optional string quoteCondition = 2;
  if (has_quotecondition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quotecondition().data(), this->quotecondition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotecondition");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->quotecondition(), output);
  }

  // optional string quoteBidExchange = 3;
  if (has_quotebidexchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quotebidexchange().data(), this->quotebidexchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotebidexchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->quotebidexchange(), output);
  }

  // optional string quoteAskExchange = 4;
  if (has_quoteaskexchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quoteaskexchange().data(), this->quoteaskexchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quoteaskexchange");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->quoteaskexchange(), output);
  }

  // optional .NodeActiveTickProto.ATPrice quoteBidPrice = 5;
  if (has_quotebidprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->quotebidprice(), output);
  }

  // optional .NodeActiveTickProto.ATPrice quoteAskPrice = 6;
  if (has_quoteaskprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->quoteaskprice(), output);
  }

  // optional int32 quoteBidSize = 7;
  if (has_quotebidsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->quotebidsize(), output);
  }

  // optional int32 quoteAskSize = 8;
  if (has_quoteasksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->quoteasksize(), output);
  }

  // optional .NodeActiveTickProto.ATTime quoteTime = 9;
  if (has_quotetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->quotetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodeActiveTickProto.ATQuoteStreamQuoteUpdate)
}

::google::protobuf::uint8* ATQuoteStreamQuoteUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodeActiveTickProto.ATQuoteStreamQuoteUpdate)
  // optional .NodeActiveTickProto.ATSymbol quoteSymbol = 1;
  if (has_quotesymbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->quotesymbol(), target);
  }

  // optional string quoteCondition = 2;
  if (has_quotecondition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quotecondition().data(), this->quotecondition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotecondition");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->quotecondition(), target);
  }

  // optional string quoteBidExchange = 3;
  if (has_quotebidexchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quotebidexchange().data(), this->quotebidexchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quotebidexchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->quotebidexchange(), target);
  }

  // optional string quoteAskExchange = 4;
  if (has_quoteaskexchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->quoteaskexchange().data(), this->quoteaskexchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "quoteaskexchange");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->quoteaskexchange(), target);
  }

  // optional .NodeActiveTickProto.ATPrice quoteBidPrice = 5;
  if (has_quotebidprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->quotebidprice(), target);
  }

  // optional .NodeActiveTickProto.ATPrice quoteAskPrice = 6;
  if (has_quoteaskprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->quoteaskprice(), target);
  }

  // optional int32 quoteBidSize = 7;
  if (has_quotebidsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->quotebidsize(), target);
  }

  // optional int32 quoteAskSize = 8;
  if (has_quoteasksize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->quoteasksize(), target);
  }

  // optional .NodeActiveTickProto.ATTime quoteTime = 9;
  if (has_quotetime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->quotetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodeActiveTickProto.ATQuoteStreamQuoteUpdate)
  return target;
}

int ATQuoteStreamQuoteUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NodeActiveTickProto.ATSymbol quoteSymbol = 1;
    if (has_quotesymbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quotesymbol());
    }

    // optional string quoteCondition = 2;
    if (has_quotecondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quotecondition());
    }

    // optional string quoteBidExchange = 3;
    if (has_quotebidexchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quotebidexchange());
    }

    // optional string quoteAskExchange = 4;
    if (has_quoteaskexchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quoteaskexchange());
    }

    // optional .NodeActiveTickProto.ATPrice quoteBidPrice = 5;
    if (has_quotebidprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quotebidprice());
    }

    // optional .NodeActiveTickProto.ATPrice quoteAskPrice = 6;
    if (has_quoteaskprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quoteaskprice());
    }

    // optional int32 quoteBidSize = 7;
    if (has_quotebidsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quotebidsize());
    }

    // optional int32 quoteAskSize = 8;
    if (has_quoteasksize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quoteasksize());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .NodeActiveTickProto.ATTime quoteTime = 9;
    if (has_quotetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quotetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATQuoteStreamQuoteUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATQuoteStreamQuoteUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATQuoteStreamQuoteUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATQuoteStreamQuoteUpdate::MergeFrom(const ATQuoteStreamQuoteUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quotesymbol()) {
      mutable_quotesymbol()->::NodeActiveTickProto::ATSymbol::MergeFrom(from.quotesymbol());
    }
    if (from.has_quotecondition()) {
      set_quotecondition(from.quotecondition());
    }
    if (from.has_quotebidexchange()) {
      set_quotebidexchange(from.quotebidexchange());
    }
    if (from.has_quoteaskexchange()) {
      set_quoteaskexchange(from.quoteaskexchange());
    }
    if (from.has_quotebidprice()) {
      mutable_quotebidprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.quotebidprice());
    }
    if (from.has_quoteaskprice()) {
      mutable_quoteaskprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.quoteaskprice());
    }
    if (from.has_quotebidsize()) {
      set_quotebidsize(from.quotebidsize());
    }
    if (from.has_quoteasksize()) {
      set_quoteasksize(from.quoteasksize());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_quotetime()) {
      mutable_quotetime()->::NodeActiveTickProto::ATTime::MergeFrom(from.quotetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATQuoteStreamQuoteUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATQuoteStreamQuoteUpdate::CopyFrom(const ATQuoteStreamQuoteUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATQuoteStreamQuoteUpdate::IsInitialized() const {

  if (has_quotebidprice()) {
    if (!this->quotebidprice().IsInitialized()) return false;
  }
  if (has_quoteaskprice()) {
    if (!this->quoteaskprice().IsInitialized()) return false;
  }
  return true;
}

void ATQuoteStreamQuoteUpdate::Swap(ATQuoteStreamQuoteUpdate* other) {
  if (other != this) {
    std::swap(quotesymbol_, other->quotesymbol_);
    std::swap(quotecondition_, other->quotecondition_);
    std::swap(quotebidexchange_, other->quotebidexchange_);
    std::swap(quoteaskexchange_, other->quoteaskexchange_);
    std::swap(quotebidprice_, other->quotebidprice_);
    std::swap(quoteaskprice_, other->quoteaskprice_);
    std::swap(quotebidsize_, other->quotebidsize_);
    std::swap(quoteasksize_, other->quoteasksize_);
    std::swap(quotetime_, other->quotetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATQuoteStreamQuoteUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATQuoteStreamQuoteUpdate_descriptor_;
  metadata.reflection = ATQuoteStreamQuoteUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATQuoteStreamRefreshUpdate::kSymbolFieldNumber;
const int ATQuoteStreamRefreshUpdate::kLastPriceFieldNumber;
const int ATQuoteStreamRefreshUpdate::kOpenPriceFieldNumber;
const int ATQuoteStreamRefreshUpdate::kHighPriceFieldNumber;
const int ATQuoteStreamRefreshUpdate::kLowPriceFieldNumber;
const int ATQuoteStreamRefreshUpdate::kClosePriceFieldNumber;
const int ATQuoteStreamRefreshUpdate::kPrevClosePriceFieldNumber;
const int ATQuoteStreamRefreshUpdate::kAfterMarketClosePriceFieldNumber;
const int ATQuoteStreamRefreshUpdate::kBidPriceFieldNumber;
const int ATQuoteStreamRefreshUpdate::kAskPriceFieldNumber;
const int ATQuoteStreamRefreshUpdate::kBidSizeFieldNumber;
const int ATQuoteStreamRefreshUpdate::kAskSizeFieldNumber;
const int ATQuoteStreamRefreshUpdate::kLastSizeFieldNumber;
const int ATQuoteStreamRefreshUpdate::kVolumeFieldNumber;
#endif  // !_MSC_VER

ATQuoteStreamRefreshUpdate::ATQuoteStreamRefreshUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodeActiveTickProto.ATQuoteStreamRefreshUpdate)
}

void ATQuoteStreamRefreshUpdate::InitAsDefaultInstance() {
  symbol_ = const_cast< ::NodeActiveTickProto::ATSymbol*>(&::NodeActiveTickProto::ATSymbol::default_instance());
  lastprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  openprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  highprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  lowprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  closeprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  prevcloseprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  aftermarketcloseprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  bidprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  askprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
}

ATQuoteStreamRefreshUpdate::ATQuoteStreamRefreshUpdate(const ATQuoteStreamRefreshUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodeActiveTickProto.ATQuoteStreamRefreshUpdate)
}

void ATQuoteStreamRefreshUpdate::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = NULL;
  lastprice_ = NULL;
  openprice_ = NULL;
  highprice_ = NULL;
  lowprice_ = NULL;
  closeprice_ = NULL;
  prevcloseprice_ = NULL;
  aftermarketcloseprice_ = NULL;
  bidprice_ = NULL;
  askprice_ = NULL;
  bidsize_ = 0;
  asksize_ = 0;
  lastsize_ = 0;
  volume_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATQuoteStreamRefreshUpdate::~ATQuoteStreamRefreshUpdate() {
  // @@protoc_insertion_point(destructor:NodeActiveTickProto.ATQuoteStreamRefreshUpdate)
  SharedDtor();
}

void ATQuoteStreamRefreshUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete symbol_;
    delete lastprice_;
    delete openprice_;
    delete highprice_;
    delete lowprice_;
    delete closeprice_;
    delete prevcloseprice_;
    delete aftermarketcloseprice_;
    delete bidprice_;
    delete askprice_;
  }
}

void ATQuoteStreamRefreshUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATQuoteStreamRefreshUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATQuoteStreamRefreshUpdate_descriptor_;
}

const ATQuoteStreamRefreshUpdate& ATQuoteStreamRefreshUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATQuoteStreamRefreshUpdate* ATQuoteStreamRefreshUpdate::default_instance_ = NULL;

ATQuoteStreamRefreshUpdate* ATQuoteStreamRefreshUpdate::New() const {
  return new ATQuoteStreamRefreshUpdate;
}

void ATQuoteStreamRefreshUpdate::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ATQuoteStreamRefreshUpdate*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    if (has_symbol()) {
      if (symbol_ != NULL) symbol_->::NodeActiveTickProto::ATSymbol::Clear();
    }
    if (has_lastprice()) {
      if (lastprice_ != NULL) lastprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
    if (has_openprice()) {
      if (openprice_ != NULL) openprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
    if (has_highprice()) {
      if (highprice_ != NULL) highprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
    if (has_lowprice()) {
      if (lowprice_ != NULL) lowprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
    if (has_closeprice()) {
      if (closeprice_ != NULL) closeprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
    if (has_prevcloseprice()) {
      if (prevcloseprice_ != NULL) prevcloseprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
    if (has_aftermarketcloseprice()) {
      if (aftermarketcloseprice_ != NULL) aftermarketcloseprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(bidsize_, lastsize_);
    if (has_bidprice()) {
      if (bidprice_ != NULL) bidprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
    if (has_askprice()) {
      if (askprice_ != NULL) askprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATQuoteStreamRefreshUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodeActiveTickProto.ATQuoteStreamRefreshUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NodeActiveTickProto.ATSymbol symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lastPrice;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice lastPrice = 2;
      case 2: {
        if (tag == 18) {
         parse_lastPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lastprice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_openPrice;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice openPrice = 3;
      case 3: {
        if (tag == 26) {
         parse_openPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_openprice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_highPrice;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice highPrice = 4;
      case 4: {
        if (tag == 34) {
         parse_highPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_highprice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_lowPrice;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice lowPrice = 5;
      case 5: {
        if (tag == 42) {
         parse_lowPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lowprice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_closePrice;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice closePrice = 6;
      case 6: {
        if (tag == 50) {
         parse_closePrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_closeprice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_prevClosePrice;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice prevClosePrice = 7;
      case 7: {
        if (tag == 58) {
         parse_prevClosePrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prevcloseprice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_afterMarketClosePrice;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice afterMarketClosePrice = 8;
      case 8: {
        if (tag == 66) {
         parse_afterMarketClosePrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aftermarketcloseprice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_bidPrice;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice bidPrice = 9;
      case 9: {
        if (tag == 74) {
         parse_bidPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bidprice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_askPrice;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice askPrice = 10;
      case 10: {
        if (tag == 82) {
         parse_askPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_askprice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_bidSize;
        break;
      }

      // optional int32 bidSize = 11;
      case 11: {
        if (tag == 88) {
         parse_bidSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidsize_)));
          set_has_bidsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_askSize;
        break;
      }

      // optional int32 askSize = 12;
      case 12: {
        if (tag == 96) {
         parse_askSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &asksize_)));
          set_has_asksize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_lastSize;
        break;
      }

      // optional int32 lastSize = 13;
      case 13: {
        if (tag == 104) {
         parse_lastSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastsize_)));
          set_has_lastsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_volume;
        break;
      }

      // optional int64 volume = 14;
      case 14: {
        if (tag == 112) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodeActiveTickProto.ATQuoteStreamRefreshUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodeActiveTickProto.ATQuoteStreamRefreshUpdate)
  return false;
#undef DO_
}

void ATQuoteStreamRefreshUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodeActiveTickProto.ATQuoteStreamRefreshUpdate)
  // optional .NodeActiveTickProto.ATSymbol symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->symbol(), output);
  }

  // optional .NodeActiveTickProto.ATPrice lastPrice = 2;
  if (has_lastprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lastprice(), output);
  }

  // optional .NodeActiveTickProto.ATPrice openPrice = 3;
  if (has_openprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->openprice(), output);
  }

  // optional .NodeActiveTickProto.ATPrice highPrice = 4;
  if (has_highprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->highprice(), output);
  }

  // optional .NodeActiveTickProto.ATPrice lowPrice = 5;
  if (has_lowprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->lowprice(), output);
  }

  // optional .NodeActiveTickProto.ATPrice closePrice = 6;
  if (has_closeprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->closeprice(), output);
  }

  // optional .NodeActiveTickProto.ATPrice prevClosePrice = 7;
  if (has_prevcloseprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->prevcloseprice(), output);
  }

  // optional .NodeActiveTickProto.ATPrice afterMarketClosePrice = 8;
  if (has_aftermarketcloseprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->aftermarketcloseprice(), output);
  }

  // optional .NodeActiveTickProto.ATPrice bidPrice = 9;
  if (has_bidprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->bidprice(), output);
  }

  // optional .NodeActiveTickProto.ATPrice askPrice = 10;
  if (has_askprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->askprice(), output);
  }

  // optional int32 bidSize = 11;
  if (has_bidsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->bidsize(), output);
  }

  // optional int32 askSize = 12;
  if (has_asksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->asksize(), output);
  }

  // optional int32 lastSize = 13;
  if (has_lastsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->lastsize(), output);
  }

  // optional int64 volume = 14;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->volume(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodeActiveTickProto.ATQuoteStreamRefreshUpdate)
}

::google::protobuf::uint8* ATQuoteStreamRefreshUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodeActiveTickProto.ATQuoteStreamRefreshUpdate)
  // optional .NodeActiveTickProto.ATSymbol symbol = 1;
  if (has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->symbol(), target);
  }

  // optional .NodeActiveTickProto.ATPrice lastPrice = 2;
  if (has_lastprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lastprice(), target);
  }

  // optional .NodeActiveTickProto.ATPrice openPrice = 3;
  if (has_openprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->openprice(), target);
  }

  // optional .NodeActiveTickProto.ATPrice highPrice = 4;
  if (has_highprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->highprice(), target);
  }

  // optional .NodeActiveTickProto.ATPrice lowPrice = 5;
  if (has_lowprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->lowprice(), target);
  }

  // optional .NodeActiveTickProto.ATPrice closePrice = 6;
  if (has_closeprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->closeprice(), target);
  }

  // optional .NodeActiveTickProto.ATPrice prevClosePrice = 7;
  if (has_prevcloseprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->prevcloseprice(), target);
  }

  // optional .NodeActiveTickProto.ATPrice afterMarketClosePrice = 8;
  if (has_aftermarketcloseprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->aftermarketcloseprice(), target);
  }

  // optional .NodeActiveTickProto.ATPrice bidPrice = 9;
  if (has_bidprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->bidprice(), target);
  }

  // optional .NodeActiveTickProto.ATPrice askPrice = 10;
  if (has_askprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->askprice(), target);
  }

  // optional int32 bidSize = 11;
  if (has_bidsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->bidsize(), target);
  }

  // optional int32 askSize = 12;
  if (has_asksize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->asksize(), target);
  }

  // optional int32 lastSize = 13;
  if (has_lastsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->lastsize(), target);
  }

  // optional int64 volume = 14;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->volume(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodeActiveTickProto.ATQuoteStreamRefreshUpdate)
  return target;
}

int ATQuoteStreamRefreshUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NodeActiveTickProto.ATSymbol symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->symbol());
    }

    // optional .NodeActiveTickProto.ATPrice lastPrice = 2;
    if (has_lastprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lastprice());
    }

    // optional .NodeActiveTickProto.ATPrice openPrice = 3;
    if (has_openprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->openprice());
    }

    // optional .NodeActiveTickProto.ATPrice highPrice = 4;
    if (has_highprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->highprice());
    }

    // optional .NodeActiveTickProto.ATPrice lowPrice = 5;
    if (has_lowprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lowprice());
    }

    // optional .NodeActiveTickProto.ATPrice closePrice = 6;
    if (has_closeprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->closeprice());
    }

    // optional .NodeActiveTickProto.ATPrice prevClosePrice = 7;
    if (has_prevcloseprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prevcloseprice());
    }

    // optional .NodeActiveTickProto.ATPrice afterMarketClosePrice = 8;
    if (has_aftermarketcloseprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aftermarketcloseprice());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .NodeActiveTickProto.ATPrice bidPrice = 9;
    if (has_bidprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bidprice());
    }

    // optional .NodeActiveTickProto.ATPrice askPrice = 10;
    if (has_askprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->askprice());
    }

    // optional int32 bidSize = 11;
    if (has_bidsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidsize());
    }

    // optional int32 askSize = 12;
    if (has_asksize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->asksize());
    }

    // optional int32 lastSize = 13;
    if (has_lastsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastsize());
    }

    // optional int64 volume = 14;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->volume());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATQuoteStreamRefreshUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATQuoteStreamRefreshUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATQuoteStreamRefreshUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATQuoteStreamRefreshUpdate::MergeFrom(const ATQuoteStreamRefreshUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      mutable_symbol()->::NodeActiveTickProto::ATSymbol::MergeFrom(from.symbol());
    }
    if (from.has_lastprice()) {
      mutable_lastprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.lastprice());
    }
    if (from.has_openprice()) {
      mutable_openprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.openprice());
    }
    if (from.has_highprice()) {
      mutable_highprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.highprice());
    }
    if (from.has_lowprice()) {
      mutable_lowprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.lowprice());
    }
    if (from.has_closeprice()) {
      mutable_closeprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.closeprice());
    }
    if (from.has_prevcloseprice()) {
      mutable_prevcloseprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.prevcloseprice());
    }
    if (from.has_aftermarketcloseprice()) {
      mutable_aftermarketcloseprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.aftermarketcloseprice());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bidprice()) {
      mutable_bidprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.bidprice());
    }
    if (from.has_askprice()) {
      mutable_askprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.askprice());
    }
    if (from.has_bidsize()) {
      set_bidsize(from.bidsize());
    }
    if (from.has_asksize()) {
      set_asksize(from.asksize());
    }
    if (from.has_lastsize()) {
      set_lastsize(from.lastsize());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATQuoteStreamRefreshUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATQuoteStreamRefreshUpdate::CopyFrom(const ATQuoteStreamRefreshUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATQuoteStreamRefreshUpdate::IsInitialized() const {

  if (has_lastprice()) {
    if (!this->lastprice().IsInitialized()) return false;
  }
  if (has_openprice()) {
    if (!this->openprice().IsInitialized()) return false;
  }
  if (has_highprice()) {
    if (!this->highprice().IsInitialized()) return false;
  }
  if (has_lowprice()) {
    if (!this->lowprice().IsInitialized()) return false;
  }
  if (has_closeprice()) {
    if (!this->closeprice().IsInitialized()) return false;
  }
  if (has_prevcloseprice()) {
    if (!this->prevcloseprice().IsInitialized()) return false;
  }
  if (has_aftermarketcloseprice()) {
    if (!this->aftermarketcloseprice().IsInitialized()) return false;
  }
  if (has_bidprice()) {
    if (!this->bidprice().IsInitialized()) return false;
  }
  if (has_askprice()) {
    if (!this->askprice().IsInitialized()) return false;
  }
  return true;
}

void ATQuoteStreamRefreshUpdate::Swap(ATQuoteStreamRefreshUpdate* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(lastprice_, other->lastprice_);
    std::swap(openprice_, other->openprice_);
    std::swap(highprice_, other->highprice_);
    std::swap(lowprice_, other->lowprice_);
    std::swap(closeprice_, other->closeprice_);
    std::swap(prevcloseprice_, other->prevcloseprice_);
    std::swap(aftermarketcloseprice_, other->aftermarketcloseprice_);
    std::swap(bidprice_, other->bidprice_);
    std::swap(askprice_, other->askprice_);
    std::swap(bidsize_, other->bidsize_);
    std::swap(asksize_, other->asksize_);
    std::swap(lastsize_, other->lastsize_);
    std::swap(volume_, other->volume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATQuoteStreamRefreshUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATQuoteStreamRefreshUpdate_descriptor_;
  metadata.reflection = ATQuoteStreamRefreshUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATMarketMoversStreamUpdate::kMarketMoversFieldNumber;
const int ATMarketMoversStreamUpdate::kLastUpdatedTimeFieldNumber;
#endif  // !_MSC_VER

ATMarketMoversStreamUpdate::ATMarketMoversStreamUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodeActiveTickProto.ATMarketMoversStreamUpdate)
}

void ATMarketMoversStreamUpdate::InitAsDefaultInstance() {
  marketmovers_ = const_cast< ::NodeActiveTickProto::ATMarketMoversRecord*>(&::NodeActiveTickProto::ATMarketMoversRecord::default_instance());
  lastupdatedtime_ = const_cast< ::NodeActiveTickProto::ATTime*>(&::NodeActiveTickProto::ATTime::default_instance());
}

ATMarketMoversStreamUpdate::ATMarketMoversStreamUpdate(const ATMarketMoversStreamUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodeActiveTickProto.ATMarketMoversStreamUpdate)
}

void ATMarketMoversStreamUpdate::SharedCtor() {
  _cached_size_ = 0;
  marketmovers_ = NULL;
  lastupdatedtime_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATMarketMoversStreamUpdate::~ATMarketMoversStreamUpdate() {
  // @@protoc_insertion_point(destructor:NodeActiveTickProto.ATMarketMoversStreamUpdate)
  SharedDtor();
}

void ATMarketMoversStreamUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete marketmovers_;
    delete lastupdatedtime_;
  }
}

void ATMarketMoversStreamUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATMarketMoversStreamUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATMarketMoversStreamUpdate_descriptor_;
}

const ATMarketMoversStreamUpdate& ATMarketMoversStreamUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATMarketMoversStreamUpdate* ATMarketMoversStreamUpdate::default_instance_ = NULL;

ATMarketMoversStreamUpdate* ATMarketMoversStreamUpdate::New() const {
  return new ATMarketMoversStreamUpdate;
}

void ATMarketMoversStreamUpdate::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_marketmovers()) {
      if (marketmovers_ != NULL) marketmovers_->::NodeActiveTickProto::ATMarketMoversRecord::Clear();
    }
    if (has_lastupdatedtime()) {
      if (lastupdatedtime_ != NULL) lastupdatedtime_->::NodeActiveTickProto::ATTime::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATMarketMoversStreamUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodeActiveTickProto.ATMarketMoversStreamUpdate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NodeActiveTickProto.ATMarketMoversRecord marketMovers = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_marketmovers()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_lastUpdatedTime;
        break;
      }

      // optional .NodeActiveTickProto.ATTime lastUpdatedTime = 2;
      case 2: {
        if (tag == 18) {
         parse_lastUpdatedTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lastupdatedtime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodeActiveTickProto.ATMarketMoversStreamUpdate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodeActiveTickProto.ATMarketMoversStreamUpdate)
  return false;
#undef DO_
}

void ATMarketMoversStreamUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodeActiveTickProto.ATMarketMoversStreamUpdate)
  // optional .NodeActiveTickProto.ATMarketMoversRecord marketMovers = 1;
  if (has_marketmovers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->marketmovers(), output);
  }

  // optional .NodeActiveTickProto.ATTime lastUpdatedTime = 2;
  if (has_lastupdatedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lastupdatedtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodeActiveTickProto.ATMarketMoversStreamUpdate)
}

::google::protobuf::uint8* ATMarketMoversStreamUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodeActiveTickProto.ATMarketMoversStreamUpdate)
  // optional .NodeActiveTickProto.ATMarketMoversRecord marketMovers = 1;
  if (has_marketmovers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->marketmovers(), target);
  }

  // optional .NodeActiveTickProto.ATTime lastUpdatedTime = 2;
  if (has_lastupdatedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lastupdatedtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodeActiveTickProto.ATMarketMoversStreamUpdate)
  return target;
}

int ATMarketMoversStreamUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NodeActiveTickProto.ATMarketMoversRecord marketMovers = 1;
    if (has_marketmovers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->marketmovers());
    }

    // optional .NodeActiveTickProto.ATTime lastUpdatedTime = 2;
    if (has_lastupdatedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lastupdatedtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATMarketMoversStreamUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATMarketMoversStreamUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATMarketMoversStreamUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATMarketMoversStreamUpdate::MergeFrom(const ATMarketMoversStreamUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marketmovers()) {
      mutable_marketmovers()->::NodeActiveTickProto::ATMarketMoversRecord::MergeFrom(from.marketmovers());
    }
    if (from.has_lastupdatedtime()) {
      mutable_lastupdatedtime()->::NodeActiveTickProto::ATTime::MergeFrom(from.lastupdatedtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATMarketMoversStreamUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATMarketMoversStreamUpdate::CopyFrom(const ATMarketMoversStreamUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATMarketMoversStreamUpdate::IsInitialized() const {

  if (has_marketmovers()) {
    if (!this->marketmovers().IsInitialized()) return false;
  }
  return true;
}

void ATMarketMoversStreamUpdate::Swap(ATMarketMoversStreamUpdate* other) {
  if (other != this) {
    std::swap(marketmovers_, other->marketmovers_);
    std::swap(lastupdatedtime_, other->lastupdatedtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATMarketMoversStreamUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATMarketMoversStreamUpdate_descriptor_;
  metadata.reflection = ATMarketMoversStreamUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATMarketMoversRecord::kSymbolFieldNumber;
const int ATMarketMoversRecord::kStatusFieldNumber;
const int ATMarketMoversRecord::kItemFieldNumber;
#endif  // !_MSC_VER

ATMarketMoversRecord::ATMarketMoversRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodeActiveTickProto.ATMarketMoversRecord)
}

void ATMarketMoversRecord::InitAsDefaultInstance() {
  symbol_ = const_cast< ::NodeActiveTickProto::ATSymbol*>(&::NodeActiveTickProto::ATSymbol::default_instance());
}

ATMarketMoversRecord::ATMarketMoversRecord(const ATMarketMoversRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodeActiveTickProto.ATMarketMoversRecord)
}

void ATMarketMoversRecord::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbol_ = NULL;
  status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATMarketMoversRecord::~ATMarketMoversRecord() {
  // @@protoc_insertion_point(destructor:NodeActiveTickProto.ATMarketMoversRecord)
  SharedDtor();
}

void ATMarketMoversRecord::SharedDtor() {
  if (status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete status_;
  }
  if (this != default_instance_) {
    delete symbol_;
  }
}

void ATMarketMoversRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATMarketMoversRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATMarketMoversRecord_descriptor_;
}

const ATMarketMoversRecord& ATMarketMoversRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATMarketMoversRecord* ATMarketMoversRecord::default_instance_ = NULL;

ATMarketMoversRecord* ATMarketMoversRecord::New() const {
  return new ATMarketMoversRecord;
}

void ATMarketMoversRecord::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_symbol()) {
      if (symbol_ != NULL) symbol_->::NodeActiveTickProto::ATSymbol::Clear();
    }
    if (has_status()) {
      if (status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        status_->clear();
      }
    }
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATMarketMoversRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodeActiveTickProto.ATMarketMoversRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NodeActiveTickProto.ATSymbol symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // optional string status = 2;
      case 2: {
        if (tag == 18) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "status");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // repeated .NodeActiveTickProto.ATMarketMoversItem item = 3;
      case 3: {
        if (tag == 26) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_item;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodeActiveTickProto.ATMarketMoversRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodeActiveTickProto.ATMarketMoversRecord)
  return false;
#undef DO_
}

void ATMarketMoversRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodeActiveTickProto.ATMarketMoversRecord)
  // optional .NodeActiveTickProto.ATSymbol symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->symbol(), output);
  }

  // optional string status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->status(), output);
  }

  // repeated .NodeActiveTickProto.ATMarketMoversItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodeActiveTickProto.ATMarketMoversRecord)
}

::google::protobuf::uint8* ATMarketMoversRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodeActiveTickProto.ATMarketMoversRecord)
  // optional .NodeActiveTickProto.ATSymbol symbol = 1;
  if (has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->symbol(), target);
  }

  // optional string status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->status(), target);
  }

  // repeated .NodeActiveTickProto.ATMarketMoversItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodeActiveTickProto.ATMarketMoversRecord)
  return target;
}

int ATMarketMoversRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NodeActiveTickProto.ATSymbol symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->symbol());
    }

    // optional string status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status());
    }

  }
  // repeated .NodeActiveTickProto.ATMarketMoversItem item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATMarketMoversRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATMarketMoversRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATMarketMoversRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATMarketMoversRecord::MergeFrom(const ATMarketMoversRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      mutable_symbol()->::NodeActiveTickProto::ATSymbol::MergeFrom(from.symbol());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATMarketMoversRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATMarketMoversRecord::CopyFrom(const ATMarketMoversRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATMarketMoversRecord::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->item())) return false;
  return true;
}

void ATMarketMoversRecord::Swap(ATMarketMoversRecord* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(status_, other->status_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATMarketMoversRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATMarketMoversRecord_descriptor_;
  metadata.reflection = ATMarketMoversRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATMarketMoversItem::kSymbolFieldNumber;
const int ATMarketMoversItem::kNameFieldNumber;
const int ATMarketMoversItem::kLastPriceFieldNumber;
const int ATMarketMoversItem::kClosePriceFieldNumber;
const int ATMarketMoversItem::kLastDateTimeFieldNumber;
#endif  // !_MSC_VER

ATMarketMoversItem::ATMarketMoversItem()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodeActiveTickProto.ATMarketMoversItem)
}

void ATMarketMoversItem::InitAsDefaultInstance() {
  symbol_ = const_cast< ::NodeActiveTickProto::ATSymbol*>(&::NodeActiveTickProto::ATSymbol::default_instance());
  lastprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  closeprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
}

ATMarketMoversItem::ATMarketMoversItem(const ATMarketMoversItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodeActiveTickProto.ATMarketMoversItem)
}

void ATMarketMoversItem::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbol_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lastprice_ = NULL;
  closeprice_ = NULL;
  lastdatetime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATMarketMoversItem::~ATMarketMoversItem() {
  // @@protoc_insertion_point(destructor:NodeActiveTickProto.ATMarketMoversItem)
  SharedDtor();
}

void ATMarketMoversItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
    delete symbol_;
    delete lastprice_;
    delete closeprice_;
  }
}

void ATMarketMoversItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATMarketMoversItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATMarketMoversItem_descriptor_;
}

const ATMarketMoversItem& ATMarketMoversItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATMarketMoversItem* ATMarketMoversItem::default_instance_ = NULL;

ATMarketMoversItem* ATMarketMoversItem::New() const {
  return new ATMarketMoversItem;
}

void ATMarketMoversItem::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_symbol()) {
      if (symbol_ != NULL) symbol_->::NodeActiveTickProto::ATSymbol::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    if (has_lastprice()) {
      if (lastprice_ != NULL) lastprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
    if (has_closeprice()) {
      if (closeprice_ != NULL) closeprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
    lastdatetime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATMarketMoversItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodeActiveTickProto.ATMarketMoversItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NodeActiveTickProto.ATSymbol symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_lastPrice;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice lastPrice = 3;
      case 3: {
        if (tag == 26) {
         parse_lastPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lastprice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_closePrice;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice closePrice = 4;
      case 4: {
        if (tag == 34) {
         parse_closePrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_closeprice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_lastDateTime;
        break;
      }

      // optional int32 lastDateTime = 5;
      case 5: {
        if (tag == 40) {
         parse_lastDateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastdatetime_)));
          set_has_lastdatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodeActiveTickProto.ATMarketMoversItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodeActiveTickProto.ATMarketMoversItem)
  return false;
#undef DO_
}

void ATMarketMoversItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodeActiveTickProto.ATMarketMoversItem)
  // optional .NodeActiveTickProto.ATSymbol symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->symbol(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .NodeActiveTickProto.ATPrice lastPrice = 3;
  if (has_lastprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lastprice(), output);
  }

  // optional .NodeActiveTickProto.ATPrice closePrice = 4;
  if (has_closeprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->closeprice(), output);
  }

  // optional int32 lastDateTime = 5;
  if (has_lastdatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lastdatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodeActiveTickProto.ATMarketMoversItem)
}

::google::protobuf::uint8* ATMarketMoversItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodeActiveTickProto.ATMarketMoversItem)
  // optional .NodeActiveTickProto.ATSymbol symbol = 1;
  if (has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->symbol(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .NodeActiveTickProto.ATPrice lastPrice = 3;
  if (has_lastprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->lastprice(), target);
  }

  // optional .NodeActiveTickProto.ATPrice closePrice = 4;
  if (has_closeprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->closeprice(), target);
  }

  // optional int32 lastDateTime = 5;
  if (has_lastdatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lastdatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodeActiveTickProto.ATMarketMoversItem)
  return target;
}

int ATMarketMoversItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NodeActiveTickProto.ATSymbol symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->symbol());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .NodeActiveTickProto.ATPrice lastPrice = 3;
    if (has_lastprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lastprice());
    }

    // optional .NodeActiveTickProto.ATPrice closePrice = 4;
    if (has_closeprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->closeprice());
    }

    // optional int32 lastDateTime = 5;
    if (has_lastdatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastdatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATMarketMoversItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATMarketMoversItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATMarketMoversItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATMarketMoversItem::MergeFrom(const ATMarketMoversItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      mutable_symbol()->::NodeActiveTickProto::ATSymbol::MergeFrom(from.symbol());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_lastprice()) {
      mutable_lastprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.lastprice());
    }
    if (from.has_closeprice()) {
      mutable_closeprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.closeprice());
    }
    if (from.has_lastdatetime()) {
      set_lastdatetime(from.lastdatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATMarketMoversItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATMarketMoversItem::CopyFrom(const ATMarketMoversItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATMarketMoversItem::IsInitialized() const {

  if (has_lastprice()) {
    if (!this->lastprice().IsInitialized()) return false;
  }
  if (has_closeprice()) {
    if (!this->closeprice().IsInitialized()) return false;
  }
  return true;
}

void ATMarketMoversItem::Swap(ATMarketMoversItem* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(name_, other->name_);
    std::swap(lastprice_, other->lastprice_);
    std::swap(closeprice_, other->closeprice_);
    std::swap(lastdatetime_, other->lastdatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATMarketMoversItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATMarketMoversItem_descriptor_;
  metadata.reflection = ATMarketMoversItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATSymbol::kSymbolFieldNumber;
const int ATSymbol::kSymbolTypeFieldNumber;
const int ATSymbol::kExchangeTypeFieldNumber;
const int ATSymbol::kCountryTypeFieldNumber;
#endif  // !_MSC_VER

ATSymbol::ATSymbol()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodeActiveTickProto.ATSymbol)
}

void ATSymbol::InitAsDefaultInstance() {
}

ATSymbol::ATSymbol(const ATSymbol& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodeActiveTickProto.ATSymbol)
}

void ATSymbol::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  symboltype_ = 0;
  exchangetype_ = 0;
  countrytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATSymbol::~ATSymbol() {
  // @@protoc_insertion_point(destructor:NodeActiveTickProto.ATSymbol)
  SharedDtor();
}

void ATSymbol::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void ATSymbol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATSymbol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATSymbol_descriptor_;
}

const ATSymbol& ATSymbol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATSymbol* ATSymbol::default_instance_ = NULL;

ATSymbol* ATSymbol::New() const {
  return new ATSymbol;
}

void ATSymbol::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ATSymbol*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(symboltype_, countrytype_);
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        symbol_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATSymbol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodeActiveTickProto.ATSymbol)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "symbol");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_symbolType;
        break;
      }

      // optional int32 symbolType = 2;
      case 2: {
        if (tag == 16) {
         parse_symbolType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &symboltype_)));
          set_has_symboltype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_exchangeType;
        break;
      }

      // optional int32 exchangeType = 3;
      case 3: {
        if (tag == 24) {
         parse_exchangeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchangetype_)));
          set_has_exchangetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_countryType;
        break;
      }

      // optional int32 countryType = 4;
      case 4: {
        if (tag == 32) {
         parse_countryType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countrytype_)));
          set_has_countrytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodeActiveTickProto.ATSymbol)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodeActiveTickProto.ATSymbol)
  return false;
#undef DO_
}

void ATSymbol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodeActiveTickProto.ATSymbol)
  // optional string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->symbol(), output);
  }

  // optional int32 symbolType = 2;
  if (has_symboltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->symboltype(), output);
  }

  // optional int32 exchangeType = 3;
  if (has_exchangetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exchangetype(), output);
  }

  // optional int32 countryType = 4;
  if (has_countrytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->countrytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodeActiveTickProto.ATSymbol)
}

::google::protobuf::uint8* ATSymbol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodeActiveTickProto.ATSymbol)
  // optional string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "symbol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional int32 symbolType = 2;
  if (has_symboltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->symboltype(), target);
  }

  // optional int32 exchangeType = 3;
  if (has_exchangetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exchangetype(), target);
  }

  // optional int32 countryType = 4;
  if (has_countrytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->countrytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodeActiveTickProto.ATSymbol)
  return target;
}

int ATSymbol::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional int32 symbolType = 2;
    if (has_symboltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->symboltype());
    }

    // optional int32 exchangeType = 3;
    if (has_exchangetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchangetype());
    }

    // optional int32 countryType = 4;
    if (has_countrytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countrytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATSymbol::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATSymbol* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATSymbol*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATSymbol::MergeFrom(const ATSymbol& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_symboltype()) {
      set_symboltype(from.symboltype());
    }
    if (from.has_exchangetype()) {
      set_exchangetype(from.exchangetype());
    }
    if (from.has_countrytype()) {
      set_countrytype(from.countrytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATSymbol::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATSymbol::CopyFrom(const ATSymbol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATSymbol::IsInitialized() const {

  return true;
}

void ATSymbol::Swap(ATSymbol* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(symboltype_, other->symboltype_);
    std::swap(exchangetype_, other->exchangetype_);
    std::swap(countrytype_, other->countrytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATSymbol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATSymbol_descriptor_;
  metadata.reflection = ATSymbol_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATPrice::kPriceFieldNumber;
const int ATPrice::kPrecisionFieldNumber;
#endif  // !_MSC_VER

ATPrice::ATPrice()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodeActiveTickProto.ATPrice)
}

void ATPrice::InitAsDefaultInstance() {
}

ATPrice::ATPrice(const ATPrice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodeActiveTickProto.ATPrice)
}

void ATPrice::SharedCtor() {
  _cached_size_ = 0;
  price_ = 0;
  precision_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATPrice::~ATPrice() {
  // @@protoc_insertion_point(destructor:NodeActiveTickProto.ATPrice)
  SharedDtor();
}

void ATPrice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ATPrice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATPrice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATPrice_descriptor_;
}

const ATPrice& ATPrice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATPrice* ATPrice::default_instance_ = NULL;

ATPrice* ATPrice::New() const {
  return new ATPrice;
}

void ATPrice::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ATPrice*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(price_, precision_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATPrice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodeActiveTickProto.ATPrice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double price = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_precision;
        break;
      }

      // required int32 precision = 2;
      case 2: {
        if (tag == 16) {
         parse_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precision_)));
          set_has_precision();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodeActiveTickProto.ATPrice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodeActiveTickProto.ATPrice)
  return false;
#undef DO_
}

void ATPrice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodeActiveTickProto.ATPrice)
  // required double price = 1;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->price(), output);
  }

  // required int32 precision = 2;
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->precision(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodeActiveTickProto.ATPrice)
}

::google::protobuf::uint8* ATPrice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodeActiveTickProto.ATPrice)
  // required double price = 1;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->price(), target);
  }

  // required int32 precision = 2;
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->precision(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodeActiveTickProto.ATPrice)
  return target;
}

int ATPrice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double price = 1;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // required int32 precision = 2;
    if (has_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->precision());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATPrice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATPrice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATPrice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATPrice::MergeFrom(const ATPrice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_precision()) {
      set_precision(from.precision());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATPrice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATPrice::CopyFrom(const ATPrice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATPrice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ATPrice::Swap(ATPrice* other) {
  if (other != this) {
    std::swap(price_, other->price_);
    std::swap(precision_, other->precision_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATPrice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATPrice_descriptor_;
  metadata.reflection = ATPrice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATQuote::kSymbolFieldNumber;
const int ATQuote::kBidPriceFieldNumber;
const int ATQuote::kAskPriceFieldNumber;
const int ATQuote::kBidSizeFieldNumber;
const int ATQuote::kAskSizeFieldNumber;
const int ATQuote::kQuoteConditionIdFieldNumber;
const int ATQuote::kServerTimeFieldNumber;
const int ATQuote::kBidExchangeIdFieldNumber;
const int ATQuote::kAskExchangeIdFieldNumber;
#endif  // !_MSC_VER

ATQuote::ATQuote()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodeActiveTickProto.ATQuote)
}

void ATQuote::InitAsDefaultInstance() {
  symbol_ = const_cast< ::NodeActiveTickProto::ATSymbol*>(&::NodeActiveTickProto::ATSymbol::default_instance());
  bidprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  askprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  servertime_ = const_cast< ::NodeActiveTickProto::ATTime*>(&::NodeActiveTickProto::ATTime::default_instance());
}

ATQuote::ATQuote(const ATQuote& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodeActiveTickProto.ATQuote)
}

void ATQuote::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = NULL;
  bidprice_ = NULL;
  askprice_ = NULL;
  bidsize_ = 0;
  asksize_ = 0;
  quoteconditionid_ = 0;
  servertime_ = NULL;
  bidexchangeid_ = 0;
  askexchangeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATQuote::~ATQuote() {
  // @@protoc_insertion_point(destructor:NodeActiveTickProto.ATQuote)
  SharedDtor();
}

void ATQuote::SharedDtor() {
  if (this != default_instance_) {
    delete symbol_;
    delete bidprice_;
    delete askprice_;
    delete servertime_;
  }
}

void ATQuote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATQuote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATQuote_descriptor_;
}

const ATQuote& ATQuote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATQuote* ATQuote::default_instance_ = NULL;

ATQuote* ATQuote::New() const {
  return new ATQuote;
}

void ATQuote::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ATQuote*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(bidsize_, asksize_);
    ZR_(quoteconditionid_, bidexchangeid_);
    if (has_symbol()) {
      if (symbol_ != NULL) symbol_->::NodeActiveTickProto::ATSymbol::Clear();
    }
    if (has_bidprice()) {
      if (bidprice_ != NULL) bidprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
    if (has_askprice()) {
      if (askprice_ != NULL) askprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
    if (has_servertime()) {
      if (servertime_ != NULL) servertime_->::NodeActiveTickProto::ATTime::Clear();
    }
  }
  askexchangeid_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATQuote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodeActiveTickProto.ATQuote)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NodeActiveTickProto.ATSymbol symbol = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bidPrice;
        break;
      }

      // required .NodeActiveTickProto.ATPrice bidPrice = 2;
      case 2: {
        if (tag == 18) {
         parse_bidPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bidprice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_askPrice;
        break;
      }

      // required .NodeActiveTickProto.ATPrice askPrice = 3;
      case 3: {
        if (tag == 26) {
         parse_askPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_askprice()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bidSize;
        break;
      }

      // optional int32 bidSize = 4;
      case 4: {
        if (tag == 32) {
         parse_bidSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidsize_)));
          set_has_bidsize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_askSize;
        break;
      }

      // optional int32 askSize = 5;
      case 5: {
        if (tag == 40) {
         parse_askSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &asksize_)));
          set_has_asksize();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_quoteConditionId;
        break;
      }

      // optional int32 quoteConditionId = 6;
      case 6: {
        if (tag == 48) {
         parse_quoteConditionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quoteconditionid_)));
          set_has_quoteconditionid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_serverTime;
        break;
      }

      // optional .NodeActiveTickProto.ATTime serverTime = 7;
      case 7: {
        if (tag == 58) {
         parse_serverTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_servertime()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_bidExchangeId;
        break;
      }

      // optional int32 bidExchangeId = 8;
      case 8: {
        if (tag == 64) {
         parse_bidExchangeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidexchangeid_)));
          set_has_bidexchangeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_askExchangeId;
        break;
      }

      // optional int32 askExchangeId = 9;
      case 9: {
        if (tag == 72) {
         parse_askExchangeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askexchangeid_)));
          set_has_askexchangeid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodeActiveTickProto.ATQuote)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodeActiveTickProto.ATQuote)
  return false;
#undef DO_
}

void ATQuote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodeActiveTickProto.ATQuote)
  // required .NodeActiveTickProto.ATSymbol symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->symbol(), output);
  }

  // required .NodeActiveTickProto.ATPrice bidPrice = 2;
  if (has_bidprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bidprice(), output);
  }

  // required .NodeActiveTickProto.ATPrice askPrice = 3;
  if (has_askprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->askprice(), output);
  }

  // optional int32 bidSize = 4;
  if (has_bidsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bidsize(), output);
  }

  // optional int32 askSize = 5;
  if (has_asksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->asksize(), output);
  }

  // optional int32 quoteConditionId = 6;
  if (has_quoteconditionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->quoteconditionid(), output);
  }

  // optional .NodeActiveTickProto.ATTime serverTime = 7;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->servertime(), output);
  }

  // optional int32 bidExchangeId = 8;
  if (has_bidexchangeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bidexchangeid(), output);
  }

  // optional int32 askExchangeId = 9;
  if (has_askexchangeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->askexchangeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodeActiveTickProto.ATQuote)
}

::google::protobuf::uint8* ATQuote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodeActiveTickProto.ATQuote)
  // required .NodeActiveTickProto.ATSymbol symbol = 1;
  if (has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->symbol(), target);
  }

  // required .NodeActiveTickProto.ATPrice bidPrice = 2;
  if (has_bidprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bidprice(), target);
  }

  // required .NodeActiveTickProto.ATPrice askPrice = 3;
  if (has_askprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->askprice(), target);
  }

  // optional int32 bidSize = 4;
  if (has_bidsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bidsize(), target);
  }

  // optional int32 askSize = 5;
  if (has_asksize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->asksize(), target);
  }

  // optional int32 quoteConditionId = 6;
  if (has_quoteconditionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->quoteconditionid(), target);
  }

  // optional .NodeActiveTickProto.ATTime serverTime = 7;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->servertime(), target);
  }

  // optional int32 bidExchangeId = 8;
  if (has_bidexchangeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bidexchangeid(), target);
  }

  // optional int32 askExchangeId = 9;
  if (has_askexchangeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->askexchangeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodeActiveTickProto.ATQuote)
  return target;
}

int ATQuote::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NodeActiveTickProto.ATSymbol symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->symbol());
    }

    // required .NodeActiveTickProto.ATPrice bidPrice = 2;
    if (has_bidprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bidprice());
    }

    // required .NodeActiveTickProto.ATPrice askPrice = 3;
    if (has_askprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->askprice());
    }

    // optional int32 bidSize = 4;
    if (has_bidsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidsize());
    }

    // optional int32 askSize = 5;
    if (has_asksize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->asksize());
    }

    // optional int32 quoteConditionId = 6;
    if (has_quoteconditionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quoteconditionid());
    }

    // optional .NodeActiveTickProto.ATTime serverTime = 7;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->servertime());
    }

    // optional int32 bidExchangeId = 8;
    if (has_bidexchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidexchangeid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 askExchangeId = 9;
    if (has_askexchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askexchangeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATQuote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATQuote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATQuote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATQuote::MergeFrom(const ATQuote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      mutable_symbol()->::NodeActiveTickProto::ATSymbol::MergeFrom(from.symbol());
    }
    if (from.has_bidprice()) {
      mutable_bidprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.bidprice());
    }
    if (from.has_askprice()) {
      mutable_askprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.askprice());
    }
    if (from.has_bidsize()) {
      set_bidsize(from.bidsize());
    }
    if (from.has_asksize()) {
      set_asksize(from.asksize());
    }
    if (from.has_quoteconditionid()) {
      set_quoteconditionid(from.quoteconditionid());
    }
    if (from.has_servertime()) {
      mutable_servertime()->::NodeActiveTickProto::ATTime::MergeFrom(from.servertime());
    }
    if (from.has_bidexchangeid()) {
      set_bidexchangeid(from.bidexchangeid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_askexchangeid()) {
      set_askexchangeid(from.askexchangeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATQuote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATQuote::CopyFrom(const ATQuote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATQuote::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_bidprice()) {
    if (!this->bidprice().IsInitialized()) return false;
  }
  if (has_askprice()) {
    if (!this->askprice().IsInitialized()) return false;
  }
  return true;
}

void ATQuote::Swap(ATQuote* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(bidprice_, other->bidprice_);
    std::swap(askprice_, other->askprice_);
    std::swap(bidsize_, other->bidsize_);
    std::swap(asksize_, other->asksize_);
    std::swap(quoteconditionid_, other->quoteconditionid_);
    std::swap(servertime_, other->servertime_);
    std::swap(bidexchangeid_, other->bidexchangeid_);
    std::swap(askexchangeid_, other->askexchangeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATQuote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATQuote_descriptor_;
  metadata.reflection = ATQuote_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATBarHistoryValue::kOpenFieldNumber;
const int ATBarHistoryValue::kHighFieldNumber;
const int ATBarHistoryValue::kLowFieldNumber;
const int ATBarHistoryValue::kCloseFieldNumber;
const int ATBarHistoryValue::kVolumeFieldNumber;
const int ATBarHistoryValue::kTimeFieldNumber;
const int ATBarHistoryValue::kSymbolFieldNumber;
const int ATBarHistoryValue::kStatusFieldNumber;
#endif  // !_MSC_VER

ATBarHistoryValue::ATBarHistoryValue()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodeActiveTickProto.ATBarHistoryValue)
}

void ATBarHistoryValue::InitAsDefaultInstance() {
  open_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  high_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  low_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  close_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  time_ = const_cast< ::NodeActiveTickProto::ATTime*>(&::NodeActiveTickProto::ATTime::default_instance());
  symbol_ = const_cast< ::NodeActiveTickProto::ATSymbol*>(&::NodeActiveTickProto::ATSymbol::default_instance());
}

ATBarHistoryValue::ATBarHistoryValue(const ATBarHistoryValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodeActiveTickProto.ATBarHistoryValue)
}

void ATBarHistoryValue::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  open_ = NULL;
  high_ = NULL;
  low_ = NULL;
  close_ = NULL;
  volume_ = GOOGLE_LONGLONG(0);
  time_ = NULL;
  symbol_ = NULL;
  status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATBarHistoryValue::~ATBarHistoryValue() {
  // @@protoc_insertion_point(destructor:NodeActiveTickProto.ATBarHistoryValue)
  SharedDtor();
}

void ATBarHistoryValue::SharedDtor() {
  if (status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete status_;
  }
  if (this != default_instance_) {
    delete open_;
    delete high_;
    delete low_;
    delete close_;
    delete time_;
    delete symbol_;
  }
}

void ATBarHistoryValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATBarHistoryValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATBarHistoryValue_descriptor_;
}

const ATBarHistoryValue& ATBarHistoryValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATBarHistoryValue* ATBarHistoryValue::default_instance_ = NULL;

ATBarHistoryValue* ATBarHistoryValue::New() const {
  return new ATBarHistoryValue;
}

void ATBarHistoryValue::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_open()) {
      if (open_ != NULL) open_->::NodeActiveTickProto::ATPrice::Clear();
    }
    if (has_high()) {
      if (high_ != NULL) high_->::NodeActiveTickProto::ATPrice::Clear();
    }
    if (has_low()) {
      if (low_ != NULL) low_->::NodeActiveTickProto::ATPrice::Clear();
    }
    if (has_close()) {
      if (close_ != NULL) close_->::NodeActiveTickProto::ATPrice::Clear();
    }
    volume_ = GOOGLE_LONGLONG(0);
    if (has_time()) {
      if (time_ != NULL) time_->::NodeActiveTickProto::ATTime::Clear();
    }
    if (has_symbol()) {
      if (symbol_ != NULL) symbol_->::NodeActiveTickProto::ATSymbol::Clear();
    }
    if (has_status()) {
      if (status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        status_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATBarHistoryValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodeActiveTickProto.ATBarHistoryValue)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NodeActiveTickProto.ATPrice open = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_open()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_high;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice high = 2;
      case 2: {
        if (tag == 18) {
         parse_high:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_high()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_low;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice low = 3;
      case 3: {
        if (tag == 26) {
         parse_low:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_low()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_close;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice close = 4;
      case 4: {
        if (tag == 34) {
         parse_close:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_close()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_volume;
        break;
      }

      // optional int64 volume = 5;
      case 5: {
        if (tag == 40) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_time;
        break;
      }

      // optional .NodeActiveTickProto.ATTime time = 6;
      case 6: {
        if (tag == 50) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_symbol;
        break;
      }

      // optional .NodeActiveTickProto.ATSymbol symbol = 7;
      case 7: {
        if (tag == 58) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_symbol()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_status;
        break;
      }

      // optional string status = 8;
      case 8: {
        if (tag == 66) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "status");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodeActiveTickProto.ATBarHistoryValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodeActiveTickProto.ATBarHistoryValue)
  return false;
#undef DO_
}

void ATBarHistoryValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodeActiveTickProto.ATBarHistoryValue)
  // optional .NodeActiveTickProto.ATPrice open = 1;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->open(), output);
  }

  // optional .NodeActiveTickProto.ATPrice high = 2;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->high(), output);
  }

  // optional .NodeActiveTickProto.ATPrice low = 3;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->low(), output);
  }

  // optional .NodeActiveTickProto.ATPrice close = 4;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->close(), output);
  }

  // optional int64 volume = 5;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->volume(), output);
  }

  // optional .NodeActiveTickProto.ATTime time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->time(), output);
  }

  // optional .NodeActiveTickProto.ATSymbol symbol = 7;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->symbol(), output);
  }

  // optional string status = 8;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodeActiveTickProto.ATBarHistoryValue)
}

::google::protobuf::uint8* ATBarHistoryValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodeActiveTickProto.ATBarHistoryValue)
  // optional .NodeActiveTickProto.ATPrice open = 1;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->open(), target);
  }

  // optional .NodeActiveTickProto.ATPrice high = 2;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->high(), target);
  }

  // optional .NodeActiveTickProto.ATPrice low = 3;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->low(), target);
  }

  // optional .NodeActiveTickProto.ATPrice close = 4;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->close(), target);
  }

  // optional int64 volume = 5;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->volume(), target);
  }

  // optional .NodeActiveTickProto.ATTime time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->time(), target);
  }

  // optional .NodeActiveTickProto.ATSymbol symbol = 7;
  if (has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->symbol(), target);
  }

  // optional string status = 8;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodeActiveTickProto.ATBarHistoryValue)
  return target;
}

int ATBarHistoryValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NodeActiveTickProto.ATPrice open = 1;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->open());
    }

    // optional .NodeActiveTickProto.ATPrice high = 2;
    if (has_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->high());
    }

    // optional .NodeActiveTickProto.ATPrice low = 3;
    if (has_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->low());
    }

    // optional .NodeActiveTickProto.ATPrice close = 4;
    if (has_close()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->close());
    }

    // optional int64 volume = 5;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->volume());
    }

    // optional .NodeActiveTickProto.ATTime time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time());
    }

    // optional .NodeActiveTickProto.ATSymbol symbol = 7;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->symbol());
    }

    // optional string status = 8;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATBarHistoryValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATBarHistoryValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATBarHistoryValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATBarHistoryValue::MergeFrom(const ATBarHistoryValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_open()) {
      mutable_open()->::NodeActiveTickProto::ATPrice::MergeFrom(from.open());
    }
    if (from.has_high()) {
      mutable_high()->::NodeActiveTickProto::ATPrice::MergeFrom(from.high());
    }
    if (from.has_low()) {
      mutable_low()->::NodeActiveTickProto::ATPrice::MergeFrom(from.low());
    }
    if (from.has_close()) {
      mutable_close()->::NodeActiveTickProto::ATPrice::MergeFrom(from.close());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_time()) {
      mutable_time()->::NodeActiveTickProto::ATTime::MergeFrom(from.time());
    }
    if (from.has_symbol()) {
      mutable_symbol()->::NodeActiveTickProto::ATSymbol::MergeFrom(from.symbol());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATBarHistoryValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATBarHistoryValue::CopyFrom(const ATBarHistoryValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATBarHistoryValue::IsInitialized() const {

  if (has_open()) {
    if (!this->open().IsInitialized()) return false;
  }
  if (has_high()) {
    if (!this->high().IsInitialized()) return false;
  }
  if (has_low()) {
    if (!this->low().IsInitialized()) return false;
  }
  if (has_close()) {
    if (!this->close().IsInitialized()) return false;
  }
  return true;
}

void ATBarHistoryValue::Swap(ATBarHistoryValue* other) {
  if (other != this) {
    std::swap(open_, other->open_);
    std::swap(high_, other->high_);
    std::swap(low_, other->low_);
    std::swap(close_, other->close_);
    std::swap(volume_, other->volume_);
    std::swap(time_, other->time_);
    std::swap(symbol_, other->symbol_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATBarHistoryValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATBarHistoryValue_descriptor_;
  metadata.reflection = ATBarHistoryValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATBarHistoryDbResponse::kValueFieldNumber;
#endif  // !_MSC_VER

ATBarHistoryDbResponse::ATBarHistoryDbResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:NodeActiveTickProto.ATBarHistoryDbResponse)
}

void ATBarHistoryDbResponse::InitAsDefaultInstance() {
}

ATBarHistoryDbResponse::ATBarHistoryDbResponse(const ATBarHistoryDbResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:NodeActiveTickProto.ATBarHistoryDbResponse)
}

void ATBarHistoryDbResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATBarHistoryDbResponse::~ATBarHistoryDbResponse() {
  // @@protoc_insertion_point(destructor:NodeActiveTickProto.ATBarHistoryDbResponse)
  SharedDtor();
}

void ATBarHistoryDbResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ATBarHistoryDbResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATBarHistoryDbResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATBarHistoryDbResponse_descriptor_;
}

const ATBarHistoryDbResponse& ATBarHistoryDbResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATBarHistoryDbResponse* ATBarHistoryDbResponse::default_instance_ = NULL;

ATBarHistoryDbResponse* ATBarHistoryDbResponse::New() const {
  return new ATBarHistoryDbResponse;
}

void ATBarHistoryDbResponse::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATBarHistoryDbResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:NodeActiveTickProto.ATBarHistoryDbResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NodeActiveTickProto.ATBarHistoryValue value = 1;
      case 1: {
        if (tag == 10) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_value;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:NodeActiveTickProto.ATBarHistoryDbResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:NodeActiveTickProto.ATBarHistoryDbResponse)
  return false;
#undef DO_
}

void ATBarHistoryDbResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:NodeActiveTickProto.ATBarHistoryDbResponse)
  // repeated .NodeActiveTickProto.ATBarHistoryValue value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:NodeActiveTickProto.ATBarHistoryDbResponse)
}

::google::protobuf::uint8* ATBarHistoryDbResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:NodeActiveTickProto.ATBarHistoryDbResponse)
  // repeated .NodeActiveTickProto.ATBarHistoryValue value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NodeActiveTickProto.ATBarHistoryDbResponse)
  return target;
}

int ATBarHistoryDbResponse::ByteSize() const {
  int total_size = 0;

  // repeated .NodeActiveTickProto.ATBarHistoryValue value = 1;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATBarHistoryDbResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATBarHistoryDbResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATBarHistoryDbResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATBarHistoryDbResponse::MergeFrom(const ATBarHistoryDbResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATBarHistoryDbResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATBarHistoryDbResponse::CopyFrom(const ATBarHistoryDbResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATBarHistoryDbResponse::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->value())) return false;
  return true;
}

void ATBarHistoryDbResponse::Swap(ATBarHistoryDbResponse* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATBarHistoryDbResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATBarHistoryDbResponse_descriptor_;
  metadata.reflection = ATBarHistoryDbResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NodeActiveTickProto

// @@protoc_insertion_point(global_scope)
