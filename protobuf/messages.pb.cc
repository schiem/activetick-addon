// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NodeActiveTickProto {

namespace {

const ::google::protobuf::Descriptor* ATLoginResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATLoginResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATConstituentResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATConstituentResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATQuoteStreamResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATQuoteStreamResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATQuoteStreamResponseItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATQuoteStreamResponseItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATQuoteStreamTradeUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATQuoteStreamTradeUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATQuoteStreamQuoteUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATQuoteStreamQuoteUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATQuoteStreamRefreshUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATQuoteStreamRefreshUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATMarketMoversStreamUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATMarketMoversStreamUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATMarketMoversRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATMarketMoversRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATMarketMoversItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATMarketMoversItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATSymbol_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATSymbol_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATPrice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATPrice_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATQuote_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATQuote_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATBarHistoryValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATBarHistoryValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATBarHistoryDbResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATBarHistoryDbResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATQuoteDbResponseSymbolFieldData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATQuoteDbResponseSymbolFieldData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ATQuoteDbResponseSymbolFieldData_ATFieldStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ATQuoteDbResponseSymbolFieldData_ATDataType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ATQuoteDbResponseData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATQuoteDbResponseData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ATQuoteDbResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ATQuoteDbResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ATQuoteDbResponse_ATQuoteDbResponseType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ATConstituentRequestTypes_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ATStreamRequestTypes_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ATBarHistoryTypes_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ATStreamResponseType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ATSymbolStatus_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ATQuoteFieldType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_2eproto() {
  protobuf_AddDesc_messages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages.proto");
  GOOGLE_CHECK(file != NULL);
  ATLoginResponse_descriptor_ = file->message_type(0);
  static const int ATLoginResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATLoginResponse, loginresponsetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATLoginResponse, loginresponsestring_),
  };
  ATLoginResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATLoginResponse_descriptor_,
      ATLoginResponse::default_instance_,
      ATLoginResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATLoginResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATLoginResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATLoginResponse));
  ATConstituentResponse_descriptor_ = file->message_type(1);
  static const int ATConstituentResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATConstituentResponse, symbols_),
  };
  ATConstituentResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATConstituentResponse_descriptor_,
      ATConstituentResponse::default_instance_,
      ATConstituentResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATConstituentResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATConstituentResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATConstituentResponse));
  ATQuoteStreamResponse_descriptor_ = file->message_type(2);
  static const int ATQuoteStreamResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamResponse, responsetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamResponse, quoteresponsecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamResponse, quotestreamitems_),
  };
  ATQuoteStreamResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATQuoteStreamResponse_descriptor_,
      ATQuoteStreamResponse::default_instance_,
      ATQuoteStreamResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATQuoteStreamResponse));
  ATQuoteStreamResponseItem_descriptor_ = file->message_type(3);
  static const int ATQuoteStreamResponseItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamResponseItem, responsetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamResponseItem, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamResponseItem, symbolstatus_),
  };
  ATQuoteStreamResponseItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATQuoteStreamResponseItem_descriptor_,
      ATQuoteStreamResponseItem::default_instance_,
      ATQuoteStreamResponseItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamResponseItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamResponseItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATQuoteStreamResponseItem));
  ATTime_descriptor_ = file->message_type(4);
  static const int ATTime_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATTime, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATTime, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATTime, dayofweek_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATTime, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATTime, hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATTime, minute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATTime, second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATTime, milliseconds_),
  };
  ATTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATTime_descriptor_,
      ATTime::default_instance_,
      ATTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATTime));
  ATQuoteStreamTradeUpdate_descriptor_ = file->message_type(5);
  static const int ATQuoteStreamTradeUpdate_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamTradeUpdate, tradesymbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamTradeUpdate, trademessageflags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamTradeUpdate, tradeconditiontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamTradeUpdate, tradeexchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamTradeUpdate, tradeprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamTradeUpdate, tradesize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamTradeUpdate, tradetime_),
  };
  ATQuoteStreamTradeUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATQuoteStreamTradeUpdate_descriptor_,
      ATQuoteStreamTradeUpdate::default_instance_,
      ATQuoteStreamTradeUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamTradeUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamTradeUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATQuoteStreamTradeUpdate));
  ATQuoteStreamQuoteUpdate_descriptor_ = file->message_type(6);
  static const int ATQuoteStreamQuoteUpdate_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamQuoteUpdate, quotesymbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamQuoteUpdate, quotecondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamQuoteUpdate, quotebidexchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamQuoteUpdate, quoteaskexchange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamQuoteUpdate, quotebidprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamQuoteUpdate, quoteaskprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamQuoteUpdate, quotebidsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamQuoteUpdate, quoteasksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamQuoteUpdate, quotetime_),
  };
  ATQuoteStreamQuoteUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATQuoteStreamQuoteUpdate_descriptor_,
      ATQuoteStreamQuoteUpdate::default_instance_,
      ATQuoteStreamQuoteUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamQuoteUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamQuoteUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATQuoteStreamQuoteUpdate));
  ATQuoteStreamRefreshUpdate_descriptor_ = file->message_type(7);
  static const int ATQuoteStreamRefreshUpdate_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, lastprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, openprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, highprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, lowprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, closeprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, prevcloseprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, aftermarketcloseprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, bidprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, askprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, bidsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, asksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, lastsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, volume_),
  };
  ATQuoteStreamRefreshUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATQuoteStreamRefreshUpdate_descriptor_,
      ATQuoteStreamRefreshUpdate::default_instance_,
      ATQuoteStreamRefreshUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteStreamRefreshUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATQuoteStreamRefreshUpdate));
  ATMarketMoversStreamUpdate_descriptor_ = file->message_type(8);
  static const int ATMarketMoversStreamUpdate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversStreamUpdate, marketmovers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversStreamUpdate, lastupdatedtime_),
  };
  ATMarketMoversStreamUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATMarketMoversStreamUpdate_descriptor_,
      ATMarketMoversStreamUpdate::default_instance_,
      ATMarketMoversStreamUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversStreamUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversStreamUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATMarketMoversStreamUpdate));
  ATMarketMoversRecord_descriptor_ = file->message_type(9);
  static const int ATMarketMoversRecord_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversRecord, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversRecord, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversRecord, item_),
  };
  ATMarketMoversRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATMarketMoversRecord_descriptor_,
      ATMarketMoversRecord::default_instance_,
      ATMarketMoversRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATMarketMoversRecord));
  ATMarketMoversItem_descriptor_ = file->message_type(10);
  static const int ATMarketMoversItem_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversItem, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversItem, lastprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversItem, closeprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversItem, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversItem, lastdatetime_),
  };
  ATMarketMoversItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATMarketMoversItem_descriptor_,
      ATMarketMoversItem::default_instance_,
      ATMarketMoversItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATMarketMoversItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATMarketMoversItem));
  ATSymbol_descriptor_ = file->message_type(11);
  static const int ATSymbol_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATSymbol, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATSymbol, symboltype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATSymbol, exchangetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATSymbol, countrytype_),
  };
  ATSymbol_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATSymbol_descriptor_,
      ATSymbol::default_instance_,
      ATSymbol_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATSymbol, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATSymbol, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATSymbol));
  ATPrice_descriptor_ = file->message_type(12);
  static const int ATPrice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATPrice, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATPrice, precision_),
  };
  ATPrice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATPrice_descriptor_,
      ATPrice::default_instance_,
      ATPrice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATPrice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATPrice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATPrice));
  ATQuote_descriptor_ = file->message_type(13);
  static const int ATQuote_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuote, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuote, bidprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuote, askprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuote, bidsize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuote, asksize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuote, quoteconditionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuote, servertime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuote, bidexchangeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuote, askexchangeid_),
  };
  ATQuote_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATQuote_descriptor_,
      ATQuote::default_instance_,
      ATQuote_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuote, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuote, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATQuote));
  ATBarHistoryValue_descriptor_ = file->message_type(14);
  static const int ATBarHistoryValue_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATBarHistoryValue, open_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATBarHistoryValue, high_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATBarHistoryValue, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATBarHistoryValue, close_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATBarHistoryValue, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATBarHistoryValue, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATBarHistoryValue, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATBarHistoryValue, status_),
  };
  ATBarHistoryValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATBarHistoryValue_descriptor_,
      ATBarHistoryValue::default_instance_,
      ATBarHistoryValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATBarHistoryValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATBarHistoryValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATBarHistoryValue));
  ATBarHistoryDbResponse_descriptor_ = file->message_type(15);
  static const int ATBarHistoryDbResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATBarHistoryDbResponse, value_),
  };
  ATBarHistoryDbResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATBarHistoryDbResponse_descriptor_,
      ATBarHistoryDbResponse::default_instance_,
      ATBarHistoryDbResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATBarHistoryDbResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATBarHistoryDbResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATBarHistoryDbResponse));
  ATQuoteDbResponseSymbolFieldData_descriptor_ = file->message_type(16);
  static const int ATQuoteDbResponseSymbolFieldData_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteDbResponseSymbolFieldData, fieldtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteDbResponseSymbolFieldData, fieldstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteDbResponseSymbolFieldData, datatype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteDbResponseSymbolFieldData, databytepb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteDbResponseSymbolFieldData, databytearraypb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteDbResponseSymbolFieldData, datauinteger32pb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteDbResponseSymbolFieldData, datauinteger64pb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteDbResponseSymbolFieldData, datainteger32pb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteDbResponseSymbolFieldData, datainteger64pb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteDbResponseSymbolFieldData, datapricepb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteDbResponseSymbolFieldData, datastringpb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteDbResponseSymbolFieldData, dataunicodestringpb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteDbResponseSymbolFieldData, datadatetimepb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteDbResponseSymbolFieldData, datadoublepb_),
  };
  ATQuoteDbResponseSymbolFieldData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATQuoteDbResponseSymbolFieldData_descriptor_,
      ATQuoteDbResponseSymbolFieldData::default_instance_,
      ATQuoteDbResponseSymbolFieldData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteDbResponseSymbolFieldData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteDbResponseSymbolFieldData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATQuoteDbResponseSymbolFieldData));
  ATQuoteDbResponseSymbolFieldData_ATFieldStatus_descriptor_ = ATQuoteDbResponseSymbolFieldData_descriptor_->enum_type(0);
  ATQuoteDbResponseSymbolFieldData_ATDataType_descriptor_ = ATQuoteDbResponseSymbolFieldData_descriptor_->enum_type(1);
  ATQuoteDbResponseData_descriptor_ = file->message_type(17);
  static const int ATQuoteDbResponseData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteDbResponseData, symbolstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteDbResponseData, symbol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteDbResponseData, symbolfielddata_),
  };
  ATQuoteDbResponseData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATQuoteDbResponseData_descriptor_,
      ATQuoteDbResponseData::default_instance_,
      ATQuoteDbResponseData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteDbResponseData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteDbResponseData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATQuoteDbResponseData));
  ATQuoteDbResponse_descriptor_ = file->message_type(18);
  static const int ATQuoteDbResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteDbResponse, responsetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteDbResponse, datum_),
  };
  ATQuoteDbResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ATQuoteDbResponse_descriptor_,
      ATQuoteDbResponse::default_instance_,
      ATQuoteDbResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteDbResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ATQuoteDbResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ATQuoteDbResponse));
  ATQuoteDbResponse_ATQuoteDbResponseType_descriptor_ = ATQuoteDbResponse_descriptor_->enum_type(0);
  ATConstituentRequestTypes_descriptor_ = file->enum_type(0);
  ATStreamRequestTypes_descriptor_ = file->enum_type(1);
  ATBarHistoryTypes_descriptor_ = file->enum_type(2);
  ATStreamResponseType_descriptor_ = file->enum_type(3);
  ATSymbolStatus_descriptor_ = file->enum_type(4);
  ATQuoteFieldType_descriptor_ = file->enum_type(5);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATLoginResponse_descriptor_, &ATLoginResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATConstituentResponse_descriptor_, &ATConstituentResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATQuoteStreamResponse_descriptor_, &ATQuoteStreamResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATQuoteStreamResponseItem_descriptor_, &ATQuoteStreamResponseItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATTime_descriptor_, &ATTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATQuoteStreamTradeUpdate_descriptor_, &ATQuoteStreamTradeUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATQuoteStreamQuoteUpdate_descriptor_, &ATQuoteStreamQuoteUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATQuoteStreamRefreshUpdate_descriptor_, &ATQuoteStreamRefreshUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATMarketMoversStreamUpdate_descriptor_, &ATMarketMoversStreamUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATMarketMoversRecord_descriptor_, &ATMarketMoversRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATMarketMoversItem_descriptor_, &ATMarketMoversItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATSymbol_descriptor_, &ATSymbol::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATPrice_descriptor_, &ATPrice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATQuote_descriptor_, &ATQuote::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATBarHistoryValue_descriptor_, &ATBarHistoryValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATBarHistoryDbResponse_descriptor_, &ATBarHistoryDbResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATQuoteDbResponseSymbolFieldData_descriptor_, &ATQuoteDbResponseSymbolFieldData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATQuoteDbResponseData_descriptor_, &ATQuoteDbResponseData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ATQuoteDbResponse_descriptor_, &ATQuoteDbResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_2eproto() {
  delete ATLoginResponse::default_instance_;
  delete ATLoginResponse_reflection_;
  delete ATConstituentResponse::default_instance_;
  delete ATConstituentResponse_reflection_;
  delete ATQuoteStreamResponse::default_instance_;
  delete ATQuoteStreamResponse_reflection_;
  delete ATQuoteStreamResponseItem::default_instance_;
  delete ATQuoteStreamResponseItem_reflection_;
  delete ATTime::default_instance_;
  delete ATTime_reflection_;
  delete ATQuoteStreamTradeUpdate::default_instance_;
  delete ATQuoteStreamTradeUpdate_reflection_;
  delete ATQuoteStreamQuoteUpdate::default_instance_;
  delete ATQuoteStreamQuoteUpdate_reflection_;
  delete ATQuoteStreamRefreshUpdate::default_instance_;
  delete ATQuoteStreamRefreshUpdate_reflection_;
  delete ATMarketMoversStreamUpdate::default_instance_;
  delete ATMarketMoversStreamUpdate_reflection_;
  delete ATMarketMoversRecord::default_instance_;
  delete ATMarketMoversRecord_reflection_;
  delete ATMarketMoversItem::default_instance_;
  delete ATMarketMoversItem_reflection_;
  delete ATSymbol::default_instance_;
  delete ATSymbol_reflection_;
  delete ATPrice::default_instance_;
  delete ATPrice_reflection_;
  delete ATQuote::default_instance_;
  delete ATQuote_reflection_;
  delete ATBarHistoryValue::default_instance_;
  delete ATBarHistoryValue_reflection_;
  delete ATBarHistoryDbResponse::default_instance_;
  delete ATBarHistoryDbResponse_reflection_;
  delete ATQuoteDbResponseSymbolFieldData::default_instance_;
  delete ATQuoteDbResponseSymbolFieldData_reflection_;
  delete ATQuoteDbResponseData::default_instance_;
  delete ATQuoteDbResponseData_reflection_;
  delete ATQuoteDbResponse::default_instance_;
  delete ATQuoteDbResponse_reflection_;
}

void protobuf_AddDesc_messages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016messages.proto\022\023NodeActiveTickProto\"I\n"
    "\017ATLoginResponse\022\031\n\021loginResponseType\030\001 "
    "\002(\005\022\033\n\023loginResponseString\030\002 \002(\t\"G\n\025ATCo"
    "nstituentResponse\022.\n\007symbols\030\001 \003(\0132\035.Nod"
    "eActiveTickProto.ATSymbol\"\276\001\n\025ATQuoteStr"
    "eamResponse\022\?\n\014responseType\030\001 \001(\0162).Node"
    "ActiveTickProto.ATStreamResponseType\022\032\n\022"
    "quoteResponseCount\030\002 \001(\005\022H\n\020quoteStreamI"
    "tems\030\003 \003(\0132..NodeActiveTickProto.ATQuote"
    "StreamResponseItem\"\306\001\n\031ATQuoteStreamResp"
    "onseItem\022\?\n\014responseType\030\001 \001(\0162).NodeAct"
    "iveTickProto.ATStreamResponseType\022-\n\006sym"
    "bol\030\002 \001(\0132\035.NodeActiveTickProto.ATSymbol"
    "\0229\n\014symbolStatus\030\003 \001(\0162#.NodeActiveTickP"
    "roto.ATSymbolStatus\"\211\001\n\006ATTime\022\014\n\004year\030\001"
    " \001(\005\022\r\n\005month\030\002 \001(\005\022\021\n\tdayOfWeek\030\003 \001(\005\022\013"
    "\n\003day\030\004 \001(\005\022\014\n\004hour\030\005 \001(\005\022\016\n\006minute\030\006 \001("
    "\005\022\016\n\006second\030\007 \001(\005\022\024\n\014milliseconds\030\010 \001(\005\""
    "\221\002\n\030ATQuoteStreamTradeUpdate\0222\n\013tradeSym"
    "bol\030\001 \001(\0132\035.NodeActiveTickProto.ATSymbol"
    "\022\031\n\021tradeMessageFlags\030\002 \001(\005\022\032\n\022tradeCond"
    "itionType\030\003 \003(\t\022\025\n\rtradeExchange\030\004 \001(\t\0220"
    "\n\ntradePrice\030\005 \001(\0132\034.NodeActiveTickProto"
    ".ATPrice\022\021\n\ttradeSize\030\006 \001(\005\022.\n\ttradeTime"
    "\030\007 \001(\0132\033.NodeActiveTickProto.ATTime\"\340\002\n\030"
    "ATQuoteStreamQuoteUpdate\0222\n\013quoteSymbol\030"
    "\001 \001(\0132\035.NodeActiveTickProto.ATSymbol\022\026\n\016"
    "quoteCondition\030\002 \001(\t\022\030\n\020quoteBidExchange"
    "\030\003 \001(\t\022\030\n\020quoteAskExchange\030\004 \001(\t\0223\n\rquot"
    "eBidPrice\030\005 \001(\0132\034.NodeActiveTickProto.AT"
    "Price\0223\n\rquoteAskPrice\030\006 \001(\0132\034.NodeActiv"
    "eTickProto.ATPrice\022\024\n\014quoteBidSize\030\007 \001(\005"
    "\022\024\n\014quoteAskSize\030\010 \001(\005\022.\n\tquoteTime\030\t \001("
    "\0132\033.NodeActiveTickProto.ATTime\"\327\004\n\032ATQuo"
    "teStreamRefreshUpdate\022-\n\006symbol\030\001 \001(\0132\035."
    "NodeActiveTickProto.ATSymbol\022/\n\tlastPric"
    "e\030\002 \001(\0132\034.NodeActiveTickProto.ATPrice\022/\n"
    "\topenPrice\030\003 \001(\0132\034.NodeActiveTickProto.A"
    "TPrice\022/\n\thighPrice\030\004 \001(\0132\034.NodeActiveTi"
    "ckProto.ATPrice\022.\n\010lowPrice\030\005 \001(\0132\034.Node"
    "ActiveTickProto.ATPrice\0220\n\nclosePrice\030\006 "
    "\001(\0132\034.NodeActiveTickProto.ATPrice\0224\n\016pre"
    "vClosePrice\030\007 \001(\0132\034.NodeActiveTickProto."
    "ATPrice\022;\n\025afterMarketClosePrice\030\010 \001(\0132\034"
    ".NodeActiveTickProto.ATPrice\022.\n\010bidPrice"
    "\030\t \001(\0132\034.NodeActiveTickProto.ATPrice\022.\n\010"
    "askPrice\030\n \001(\0132\034.NodeActiveTickProto.ATP"
    "rice\022\017\n\007bidSize\030\013 \001(\005\022\017\n\007askSize\030\014 \001(\005\022\020"
    "\n\010lastSize\030\r \001(\005\022\016\n\006volume\030\016 \001(\003\"\223\001\n\032ATM"
    "arketMoversStreamUpdate\022\?\n\014marketMovers\030"
    "\001 \001(\0132).NodeActiveTickProto.ATMarketMove"
    "rsRecord\0224\n\017lastUpdatedTime\030\002 \001(\0132\033.Node"
    "ActiveTickProto.ATTime\"\214\001\n\024ATMarketMover"
    "sRecord\022-\n\006symbol\030\001 \001(\0132\035.NodeActiveTick"
    "Proto.ATSymbol\022\016\n\006status\030\002 \001(\t\0225\n\004item\030\003"
    " \003(\0132\'.NodeActiveTickProto.ATMarketMover"
    "sItem\"\367\001\n\022ATMarketMoversItem\022-\n\006symbol\030\001"
    " \001(\0132\035.NodeActiveTickProto.ATSymbol\022\014\n\004n"
    "ame\030\002 \001(\t\022/\n\tlastPrice\030\003 \001(\0132\034.NodeActiv"
    "eTickProto.ATPrice\0220\n\nclosePrice\030\004 \001(\0132\034"
    ".NodeActiveTickProto.ATPrice\022\016\n\006volume\030\005"
    " \001(\005\0221\n\014lastDateTime\030\006 \001(\0132\033.NodeActiveT"
    "ickProto.ATTime\"Y\n\010ATSymbol\022\016\n\006symbol\030\001 "
    "\001(\t\022\022\n\nsymbolType\030\002 \001(\005\022\024\n\014exchangeType\030"
    "\003 \001(\005\022\023\n\013countryType\030\004 \001(\005\"+\n\007ATPrice\022\r\n"
    "\005price\030\001 \002(\001\022\021\n\tprecision\030\002 \002(\005\"\263\002\n\007ATQu"
    "ote\022-\n\006symbol\030\001 \002(\0132\035.NodeActiveTickProt"
    "o.ATSymbol\022.\n\010bidPrice\030\002 \002(\0132\034.NodeActiv"
    "eTickProto.ATPrice\022.\n\010askPrice\030\003 \002(\0132\034.N"
    "odeActiveTickProto.ATPrice\022\017\n\007bidSize\030\004 "
    "\001(\005\022\017\n\007askSize\030\005 \001(\005\022\030\n\020quoteConditionId"
    "\030\006 \001(\005\022/\n\nserverTime\030\007 \001(\0132\033.NodeActiveT"
    "ickProto.ATTime\022\025\n\rbidExchangeId\030\010 \001(\005\022\025"
    "\n\raskExchangeId\030\t \001(\005\"\342\002\n\021ATBarHistoryVa"
    "lue\022*\n\004open\030\001 \001(\0132\034.NodeActiveTickProto."
    "ATPrice\022*\n\004high\030\002 \001(\0132\034.NodeActiveTickPr"
    "oto.ATPrice\022)\n\003low\030\003 \001(\0132\034.NodeActiveTic"
    "kProto.ATPrice\022+\n\005close\030\004 \001(\0132\034.NodeActi"
    "veTickProto.ATPrice\022\016\n\006volume\030\005 \001(\003\022)\n\004t"
    "ime\030\006 \001(\0132\033.NodeActiveTickProto.ATTime\022-"
    "\n\006symbol\030\007 \001(\0132\035.NodeActiveTickProto.ATS"
    "ymbol\0223\n\006status\030\010 \001(\0162#.NodeActiveTickPr"
    "oto.ATSymbolStatus\"O\n\026ATBarHistoryDbResp"
    "onse\0225\n\005value\030\001 \003(\0132&.NodeActiveTickProt"
    "o.ATBarHistoryValue\"\230\007\n ATQuoteDbRespons"
    "eSymbolFieldData\0228\n\tfieldType\030\001 \001(\0162%.No"
    "deActiveTickProto.ATQuoteFieldType\022X\n\013fi"
    "eldStatus\030\002 \001(\0162C.NodeActiveTickProto.AT"
    "QuoteDbResponseSymbolFieldData.ATFieldSt"
    "atus\022R\n\010dataType\030\003 \001(\0162@.NodeActiveTickP"
    "roto.ATQuoteDbResponseSymbolFieldData.AT"
    "DataType\022\022\n\nDataBytePB\030\004 \001(\t\022\027\n\017DataByte"
    "ArrayPB\030\005 \001(\t\022\030\n\020DataUInteger32PB\030\006 \001(\r\022"
    "\030\n\020DataUInteger64PB\030\007 \001(\004\022\027\n\017DataInteger"
    "32PB\030\010 \001(\005\022\027\n\017DataInteger64PB\030\t \001(\003\0221\n\013D"
    "ataPricePB\030\n \001(\0132\034.NodeActiveTickProto.A"
    "TPrice\022\024\n\014DataStringPB\030\013 \001(\t\022\033\n\023DataUnic"
    "odeStringPB\030\014 \001(\t\0223\n\016DataDateTimePB\030\r \001("
    "\0132\033.NodeActiveTickProto.ATTime\022\024\n\014DataDo"
    "ublePB\030\016 \001(\001\"r\n\rATFieldStatus\022\026\n\022FieldSt"
    "atusSuccess\020\001\022\026\n\022FieldStatusInvalid\020\002\022\032\n"
    "\026FieldStatusUnavailable\020\003\022\025\n\021FieldStatus"
    "Denied\020\004\"\323\001\n\nATDataType\022\014\n\010DataByte\020\001\022\021\n"
    "\rDataByteArray\020\002\022\022\n\016DataUInteger32\020\003\022\022\n\016"
    "DataUInteger64\020\004\022\021\n\rDataInteger32\020\005\022\021\n\rD"
    "ataInteger64\020\006\022\r\n\tDataPrice\020\007\022\016\n\nDataStr"
    "ing\020\010\022\025\n\021DataUnicodeString\020\t\022\020\n\014DataDate"
    "Time\020\n\022\016\n\nDataDouble\020\013\"\321\001\n\025ATQuoteDbResp"
    "onseData\0229\n\014symbolStatus\030\001 \001(\0162#.NodeAct"
    "iveTickProto.ATSymbolStatus\022-\n\006symbol\030\002 "
    "\001(\0132\035.NodeActiveTickProto.ATSymbol\022N\n\017sy"
    "mbolFieldData\030\003 \003(\01325.NodeActiveTickProt"
    "o.ATQuoteDbResponseSymbolFieldData\"\266\002\n\021A"
    "TQuoteDbResponse\022R\n\014responseType\030\001 \001(\0162<"
    ".NodeActiveTickProto.ATQuoteDbResponse.A"
    "TQuoteDbResponseType\0229\n\005datum\030\002 \003(\0132*.No"
    "deActiveTickProto.ATQuoteDbResponseData\""
    "\221\001\n\025ATQuoteDbResponseType\022\032\n\026QuoteDbResp"
    "onseSuccess\020\001\022!\n\035QuoteDbResponseInvalidR"
    "equest\020\002\022\031\n\025QuoteDbResponseDenied\020\003\022\036\n\032Q"
    "uoteDbResponseUnavailable\020\004*v\n\031ATConstit"
    "uentRequestTypes\022\032\n\026ATConstituentListInd"
    "ex\020\001\022\033\n\027ATConstituentListSector\020\002\022 \n\034ATC"
    "onstituentListOptionChain\020\003*\354\001\n\024ATStream"
    "RequestTypes\022\032\n\026StreamRequestSubscribe\020\001"
    "\022\034\n\030StreamRequestUnsubscribe\020\002\022$\n Stream"
    "RequestSubscribeQuotesOnly\020\003\022&\n\"StreamRe"
    "questUnsubscribeQuotesOnly\020\004\022$\n StreamRe"
    "questSubscribeTradesOnly\020\005\022&\n\"StreamRequ"
    "estUnsubscribeTradesOnly\020\006*V\n\021ATBarHisto"
    "ryTypes\022\026\n\022BarHistoryIntraday\020\001\022\023\n\017BarHi"
    "storyDaily\020\002\022\024\n\020BarHistoryWeekly\020\003*m\n\024AT"
    "StreamResponseType\022\031\n\025StreamResponseSucc"
    "ess\020\001\022 \n\034StreamResponseInvalidRequest\020\002\022"
    "\030\n\024StreamResponseDenied\020\003*}\n\016ATSymbolSta"
    "tus\022\027\n\023SymbolStatusSuccess\020\001\022\027\n\023SymbolSt"
    "atusInvalid\020\002\022\033\n\027SymbolStatusUnavailable"
    "\020\003\022\034\n\030SymbolStatusNoPermission\020\004*\347\221\001\n\020AT"
    "QuoteFieldType\022\024\n\020QuoteFieldSymbol\020\001\022\027\n\023"
    "QuoteFieldOpenPrice\020\002\022 \n\034QuoteFieldPrevi"
    "ousClosePrice\020\003\022\030\n\024QuoteFieldClosePrice\020"
    "\004\022\027\n\023QuoteFieldLastPrice\020\005\022\026\n\022QuoteField"
    "BidPrice\020\006\022\026\n\022QuoteFieldAskPrice\020\007\022\027\n\023Qu"
    "oteFieldHighPrice\020\010\022\026\n\022QuoteFieldLowPric"
    "e\020\t\022\032\n\026QuoteFieldDayHighPrice\020\n\022\031\n\025Quote"
    "FieldDayLowPrice\020\013\022 \n\034QuoteFieldPreMarke"
    "tOpenPrice\020\014\022$\n QuoteFieldExtendedHoursL"
    "astPrice\020\r\022#\n\037QuoteFieldAfterMarketClose"
    "Price\020\016\022\031\n\025QuoteFieldBidExchange\020\017\022\031\n\025Qu"
    "oteFieldAskExchange\020\020\022\032\n\026QuoteFieldLastE"
    "xchange\020\021\022\033\n\027QuoteFieldLastCondition\020\022\022\034"
    "\n\030QuoteFieldQuoteCondition\020\023\022\037\n\033QuoteFie"
    "ldLastTradeDateTime\020\024\022\037\n\033QuoteFieldLastQ"
    "uoteDateTime\020\025\022\035\n\031QuoteFieldDayHighDateT"
    "ime\020\026\022\034\n\030QuoteFieldDayLowDateTime\020\027\022\026\n\022Q"
    "uoteFieldLastSize\020\030\022\025\n\021QuoteFieldBidSize"
    "\020\031\022\025\n\021QuoteFieldAskSize\020\032\022\024\n\020QuoteFieldV"
    "olume\020\033\022\035\n\031QuoteFieldPreMarketVolume\020\034\022\037"
    "\n\033QuoteFieldAfterMarketVolume\020\035\022\030\n\024Quote"
    "FieldTradeCount\020\036\022!\n\035QuoteFieldPreMarket"
    "TradeCount\020\037\022#\n\037QuoteFieldAfterMarketTra"
    "deCount\020 \022\036\n\032QuoteFieldProfileShortName\020"
    "!\022$\n QuoteFieldProfilePrimaryExchange\020\"\022"
    "\035\n\031QuoteFieldProfileLongName\020#\022\033\n\027QuoteF"
    "ieldProfileSector\020$\022\035\n\031QuoteFieldProfile"
    "Industry\020%\022 \n\034QuoteFieldOptionOpenIntere"
    "st\020d\022\037\n\033QuoteFieldOptionStrikePrice\020e\022>\n"
    "9QuoteFieldIncomeStatementBasicEPSFromCo"
    "ntinuingOperations\020\310\001\022@\n;QuoteFieldIncom"
    "eStatementBasicEPSFromDiscontinuedOperat"
    "ions\020\311\001\0229\n4QuoteFieldIncomeStatementBasi"
    "cEPSFromTotalOperations\020\312\001\022=\n8QuoteField"
    "IncomeStatementBasicEPSFromExtraordinary"
    "Income\020\313\001\022E\n@QuoteFieldIncomeStatementBa"
    "sicEPSFromCumEffectOfAccountingChange\020\314\001"
    "\0224\n/QuoteFieldIncomeStatementBasicEPSFro"
    "mOtherGains\020\315\001\022+\n&QuoteFieldIncomeStatem"
    "entBasicEPSTotal\020\316\001\022>\n9QuoteFieldIncomeS"
    "tatementBasicNormalizedNetIncomePerShare"
    "\020\317\001\022@\n;QuoteFieldIncomeStatementDilutedE"
    "PSFromContinuingOperations\020\320\001\022B\n=QuoteFi"
    "eldIncomeStatementDilutedEPSFromDisconti"
    "nuedOperations\020\321\001\022;\n6QuoteFieldIncomeSta"
    "tementDilutedEPSFromTotalOperations\020\322\001\022\?"
    "\n:QuoteFieldIncomeStatementDilutedEPSFro"
    "mExtraordinaryIncome\020\323\001\0226\n1QuoteFieldInc"
    "omeStatementDilutedEPSFromOtherGains\020\324\001\022"
    "-\n(QuoteFieldIncomeStatementDilutedEPSTo"
    "tal\020\325\001\022@\n;QuoteFieldIncomeStatementDilut"
    "edNormalizedNetIncomePerShare\020\326\001\0223\n.Quot"
    "eFieldIncomeStatementDividendsPaidPerSha"
    "re\020\327\001\0227\n2QuoteFieldIncomeStatementIncome"
    "AcquiredInProcessRD\020\330\001\0221\n,QuoteFieldInco"
    "meStatementOtherSpecialCharges\020\331\001\022)\n$Quo"
    "teFieldIncomeStatementIncomeTaxes\020\332\001\022.\n)"
    "QuoteFieldIncomeStatementMinorityInteres"
    "t\020\333\001\022\?\n:QuoteFieldIncomeStatementNetInco"
    "meFromContinuingOperations\020\334\001\022A\n<QuoteFi"
    "eldIncomeStatementNetIncomeFromDiscontin"
    "uedOperations\020\335\001\022:\n5QuoteFieldIncomeStat"
    "ementNetIncomeFromTotalOperations\020\336\001\022;\n6"
    "QuoteFieldIncomeStatementIncomeFromTaxLo"
    "ssCarryforward\020\337\001\022.\n)QuoteFieldIncomeSta"
    "tementOtherGainsLosses\020\340\001\022,\n\'QuoteFieldI"
    "ncomeStatementTotalNetIncome\020\341\001\022.\n)Quote"
    "FieldIncomeStatementNormalizedIncome\020\342\001\022"
    "9\n4QuoteFieldIncomeStatementNetIncomeAva"
    "ilableForCommon\020\343\001\0220\n+QuoteFieldIncomeSt"
    "atementPreferredDividends\020\344\001\0226\n1QuoteFie"
    "ldIncomeStatementStandardOperatingRevenu"
    "e\020\345\001\0222\n-QuoteFieldIncomeStatementStandar"
    "dTotalRevenue\020\346\001\0229\n4QuoteFieldIncomeStat"
    "ementStandardAdjustmentToRevenue\020\347\001\0221\n,Q"
    "uoteFieldIncomeStatementStandardCostOfSa"
    "les\020\350\001\022A\n<QuoteFieldIncomeStatementStand"
    "ardCostOfSalesWithDepreciation\020\351\001\0221\n,Quo"
    "teFieldIncomeStatementStandardGrossMargi"
    "n\020\352\001\022:\n5QuoteFieldIncomeStatementStandar"
    "dGrossOperatingProfit\020\353\001\022<\n7QuoteFieldIn"
    "comeStatementStandardResearchAndDevelopm"
    "ent\020\354\001\022C\n>QuoteFieldIncomeStatementStand"
    "ardSellingGeneralAndAdminExpense\020\355\001\0221\n,Q"
    "uoteFieldIncomeStatementStandardAdvertis"
    "ing\020\356\001\0225\n0QuoteFieldIncomeStatementStand"
    "ardOperatingProfit\020\357\001\022G\nBQuoteFieldIncom"
    "eStatementStandardOperatingProfitBeforeD"
    "epreciation\020\360\001\0222\n-QuoteFieldIncomeStatem"
    "entStandardDepreciation\020\361\001\022>\n9QuoteField"
    "IncomeStatementStandardDepreciationUnrec"
    "onciled\020\362\001\0222\n-QuoteFieldIncomeStatementS"
    "tandardAmortization\020\363\001\022\?\n:QuoteFieldInco"
    "meStatementStandardAmortizationOfIntangi"
    "bles\020\364\001\022F\nAQuoteFieldIncomeStatementStan"
    "dardOperatingIncomeAfterDepreciation\020\365\001\022"
    "4\n/QuoteFieldIncomeStatementStandardInte"
    "restIncome\020\366\001\022@\n;QuoteFieldIncomeStateme"
    "ntStandardEarningsFromEquityInterest\020\367\001\022"
    "4\n/QuoteFieldIncomeStatementStandardOthe"
    "rIncomeNet\020\370\001\022@\n;QuoteFieldIncomeStateme"
    "ntStandardInterestRestructuringAndMA\020\371\001\022"
    "H\nCQuoteFieldIncomeStatementStandardTota"
    "lIncomeAvailForInterestExpense\020\372\001\0225\n0Quo"
    "teFieldIncomeStatementStandardInterestEx"
    "pense\020\373\001\0225\n0QuoteFieldIncomeStatementSta"
    "ndardIncomeBeforeTax\020\374\001\022J\nEQuoteFieldInc"
    "omeStatementStandardPreferredSecuritiesO"
    "fSubsidiaryTrust\020\375\001\022A\n<QuoteFieldIncomeS"
    "tatementStandardExtraordinaryIncomeOrLos"
    "ses\020\376\001\022H\nCQuoteFieldIncomeStatementStand"
    "ardIncomeFromCumEffectOfAccountChange\020\377\001"
    "\0221\n,QuoteFieldIncomeStatementStandardExc"
    "iseTaxes\020\200\002\022,\n\'QuoteFieldIncomeStatement"
    "FinancialLoans\020\201\002\022;\n6QuoteFieldIncomeSta"
    "tementFinancialInvestmentSecurities\020\202\002\022;"
    "\n6QuoteFieldIncomeStatementFinancialLeas"
    "eFinancingIncome\020\203\002\022:\n5QuoteFieldIncomeS"
    "tatementFinancialOtherInterestIncome\020\204\002\022"
    "<\n7QuoteFieldIncomeStatementFinancialFed"
    "FundsSoldPurchased\020\205\002\022>\n9QuoteFieldIncom"
    "eStatementFinancialInterestBearingDeposi"
    "ts\020\206\002\0229\n4QuoteFieldIncomeStatementFinanc"
    "ialLoansHeldForResale\020\207\002\022\?\n:QuoteFieldIn"
    "comeStatementFinancialTradingAccountSecu"
    "rities\020\210\002\0229\n4QuoteFieldIncomeStatementFi"
    "nancialTimeDepositsPlaced\020\211\002\022B\n=QuoteFie"
    "ldIncomeStatementFinancialOtherMoneyMark"
    "etInvestments\020\212\002\022B\n=QuoteFieldIncomeStat"
    "ementFinancialTotalMoneyMarketInvestment"
    "s\020\213\002\022:\n5QuoteFieldIncomeStatementFinanci"
    "alTotalInterestIncome\020\214\002\022/\n*QuoteFieldIn"
    "comeStatementFinancialDeposits\020\215\002\022\?\n:Quo"
    "teFieldIncomeStatementFinancialFedFundsP"
    "urchasedSecSold\020\216\002\022B\n=QuoteFieldIncomeSt"
    "atementFinancialCapitalizedLeaseObligati"
    "ons\020\217\002\022;\n6QuoteFieldIncomeStatementFinan"
    "cialOtherInterestExpense\020\220\002\022;\n6QuoteFiel"
    "dIncomeStatementFinancialTotalInterestEx"
    "pense\020\221\002\022\?\n:QuoteFieldIncomeStatementFin"
    "ancialNetInterestIncomeExpense\020\222\002\022;\n6Quo"
    "teFieldIncomeStatementFinancialProvision"
    "ForLoanLoss\020\223\002\022=\n8QuoteFieldIncomeStatem"
    "entFinancialTrustFeesByCommissions\020\224\002\022E\n"
    "@QuoteFieldIncomeStatementFinancialServi"
    "ceChargeOnDepositAccounts\020\225\002\022:\n5QuoteFie"
    "ldIncomeStatementFinancialOtherServiceCh"
    "arges\020\226\002\022;\n6QuoteFieldIncomeStatementFin"
    "ancialSecurityTransactions\020\227\002\0225\n0QuoteFi"
    "eldIncomeStatementFinancialPremiumsEarne"
    "d\020\230\002\022>\n9QuoteFieldIncomeStatementFinanci"
    "alNetRealizedCapitalGains\020\231\002\022>\n9QuoteFie"
    "ldIncomeStatementFinancialInvestmentBank"
    "ingProfit\020\232\002\022=\n8QuoteFieldIncomeStatemen"
    "tFinancialOtherNonInterestIncome\020\233\002\022=\n8Q"
    "uoteFieldIncomeStatementFinancialTotalNo"
    "nInterestIncome\020\234\002\022B\n=QuoteFieldIncomeSt"
    "atementFinancialSalariesAndEmployeeBenef"
    "its\020\235\002\022:\n5QuoteFieldIncomeStatementFinan"
    "cialNetOccupancyExpense\020\236\002\022\?\n:QuoteField"
    "IncomeStatementFinancialPromotionsAndAdv"
    "ertising\020\237\002\022>\n9QuoteFieldIncomeStatement"
    "FinancialPropLiabInsuranceClaims\020\240\002\022=\n8Q"
    "uoteFieldIncomeStatementFinancialPolicyA"
    "cquisitionCosts\020\241\002\022<\n7QuoteFieldIncomeSt"
    "atementFinancialAmortDefPolicyAcqCost\020\242\002"
    "\022\?\n:QuoteFieldIncomeStatementFinancialCu"
    "rrentAndFutureBenefits\020\243\002\022>\n9QuoteFieldI"
    "ncomeStatementFinancialOtherNonInterestE"
    "xpense\020\244\002\022>\n9QuoteFieldIncomeStatementFi"
    "nancialTotalNonInterestExpense\020\245\002\0227\n2Quo"
    "teFieldIncomeStatementFinancialPremiumTa"
    "xCredit\020\246\002\022\?\n:QuoteFieldIncomeStatementF"
    "inancialIncomeRestructuringAndMA\020\247\002\022;\n6Q"
    "uoteFieldIncomeStatementFinancialSpecial"
    "IncomeCharges\020\250\002\022@\n;QuoteFieldIncomeStat"
    "ementFinancialExtraordinaryIncomeLosses\020"
    "\251\002\022C\n>QuoteFieldIncomeStatementFinancial"
    "IncomeFromCumEffectOfAcctChg\020\252\002\022\"\n\035Quote"
    "FieldIncomeStatementDate\020\253\002\0220\n+QuoteFiel"
    "dBalanceSheetsAssetsRestrictedCash\020\364\003\0221\n"
    ",QuoteFieldBalanceSheetsAssetsOtherRecei"
    "vable\020\365\003\022-\n(QuoteFieldBalanceSheetsAsset"
    "sTotalAssets\020\366\003\0224\n/QuoteFieldBalanceShee"
    "tsLiabilitiesShortTermDebt\020\367\003\0223\n.QuoteFi"
    "eldBalanceSheetsLiabilitiesLongTermDebt\020"
    "\370\003\022>\n9QuoteFieldBalanceSheetsLiabilities"
    "CapitalLeaseObligations\020\371\003\0227\n2QuoteField"
    "BalanceSheetsLiabilitiesMinorityInterest"
    "\020\372\003\0227\n2QuoteFieldBalanceSheetsLiabilitie"
    "sTotalLiabilities\020\373\003\022E\n@QuoteFieldBalanc"
    "eSheetsShareDataSharesOutstandingCommonC"
    "lassOnly\020\374\003\0224\n/QuoteFieldBalanceSheetsSh"
    "areDataPreferredShares\020\375\003\0228\n3QuoteFieldB"
    "alanceSheetsShareDataTotalOrdinaryShares"
    "\020\376\003\022A\n<QuoteFieldBalanceSheetsShareDataT"
    "otalCommonSharesOutstanding\020\377\003\0223\n.QuoteF"
    "ieldBalanceSheetsShareDataTreasuryShares"
    "\020\200\004\0226\n1QuoteFieldBalanceSheetsEquityPref"
    "erredStockEquity\020\201\004\0223\n.QuoteFieldBalance"
    "SheetsEquityCommonStockEquity\020\202\004\022+\n&Quot"
    "eFieldBalanceSheetsEquityCommonPar\020\203\004\0229\n"
    "4QuoteFieldBalanceSheetsEquityAdditional"
    "PaidInCapital\020\204\004\022A\n<QuoteFieldBalanceShe"
    "etsEquityCumulativeTranslationAdjustment"
    "\020\205\004\0222\n-QuoteFieldBalanceSheetsEquityReta"
    "inedEarnings\020\206\004\022/\n*QuoteFieldBalanceShee"
    "tsEquityTreasuryStock\020\207\004\0228\n3QuoteFieldBa"
    "lanceSheetsEquityOtherEquityAdjustments\020"
    "\210\004\022-\n(QuoteFieldBalanceSheetsEquityTotal"
    "Equity\020\211\004\0225\n0QuoteFieldBalanceSheetsEqui"
    "tyTotalCapitalization\020\212\004\022@\n;QuoteFieldBa"
    "lanceSheetsEquityTotalLiabilitiesAndStoc"
    "kEquity\020\213\004\022-\n(QuoteFieldBalanceSheetsNum"
    "berOfEmployees\020\214\004\0225\n0QuoteFieldBalanceSh"
    "eetsNumberOfPartTimeEmployees\020\215\004\022<\n7Quot"
    "eFieldBalanceSheetsStandardAssetsCashAnd"
    "Equivalents\020\216\004\022>\n9QuoteFieldBalanceSheet"
    "sStandardAssetsMarketableSecurities\020\217\004\022<"
    "\n7QuoteFieldBalanceSheetsStandardAssetsA"
    "ccountsReceivable\020\220\004\0229\n4QuoteFieldBalanc"
    "eSheetsStandardAssetsLoansReceivable\020\221\004\022"
    "5\n0QuoteFieldBalanceSheetsStandardAssets"
    "Receivables\020\222\004\0226\n1QuoteFieldBalanceSheet"
    "sStandardAssetsRawMaterials\020\223\004\0228\n3QuoteF"
    "ieldBalanceSheetsStandardAssetsWorkInPro"
    "gress\020\224\004\022=\n8QuoteFieldBalanceSheetsStand"
    "ardAssetsPurchasedComponents\020\225\004\0227\n2Quote"
    "FieldBalanceSheetsStandardAssetsFinished"
    "Goods\020\226\004\022:\n5QuoteFieldBalanceSheetsStand"
    "ardAssetsOtherInventories\020\227\004\022B\n=QuoteFie"
    "ldBalanceSheetsStandardAssetsInventories"
    "AdjAllowances\020\230\004\0225\n0QuoteFieldBalanceShe"
    "etsStandardAssetsInventories\020\231\004\0229\n4Quote"
    "FieldBalanceSheetsStandardAssetsPrepaidE"
    "xpenses\020\232\004\022D\n\?QuoteFieldBalanceSheetsSta"
    "ndardAssetsCurrentDeferredIncomeTaxes\020\233\004"
    "\022<\n7QuoteFieldBalanceSheetsStandardAsset"
    "sOtherCurrentAssets\020\234\004\022<\n7QuoteFieldBala"
    "nceSheetsStandardAssetsTotalCurrentAsset"
    "s\020\235\004\022:\n5QuoteFieldBalanceSheetsStandardA"
    "ssetsGrossFixedAssets\020\236\004\022M\nHQuoteFieldBa"
    "lanceSheetsStandardAssetsAccumulatedDepr"
    "eciationAndDepletion\020\237\004\0228\n3QuoteFieldBal"
    "anceSheetsStandardAssetsNetFixedAssets\020\240"
    "\004\0225\n0QuoteFieldBalanceSheetsStandardAsse"
    "tsIntangibles\020\241\004\0226\n1QuoteFieldBalanceShe"
    "etsStandardAssetsCostInExcess\020\242\004\022G\nBQuot"
    "eFieldBalanceSheetsStandardAssetsNonCurr"
    "entDeferredIncomeTaxes\020\243\004\022\?\n:QuoteFieldB"
    "alanceSheetsStandardAssetsOtherNonCurren"
    "tAssets\020\244\004\022\?\n:QuoteFieldBalanceSheetsSta"
    "ndardAssetsTotalNonCurrentAssets\020\245\004\022>\n9Q"
    "uoteFieldBalanceSheetsStandardLiabilitie"
    "sAccountsPayable\020\246\004\022;\n6QuoteFieldBalance"
    "SheetsStandardLiabilitiesNotesPayable\020\247\004"
    "\022>\n9QuoteFieldBalanceSheetsStandardLiabi"
    "litiesAccruedExpenses\020\250\004\022A\n<QuoteFieldBa"
    "lanceSheetsStandardLiabilitiesAccruedLia"
    "bilities\020\251\004\022\?\n:QuoteFieldBalanceSheetsSt"
    "andardLiabilitiesDeferredRevenues\020\252\004\022I\nD"
    "QuoteFieldBalanceSheetsStandardLiabiliti"
    "esCurrentDeferredIncomeTaxes\020\253\004\022F\nAQuote"
    "FieldBalanceSheetsStandardLiabilitiesOth"
    "erCurrentLiabilities\020\254\004\022F\nAQuoteFieldBal"
    "anceSheetsStandardLiabilitiesTotalCurren"
    "tLiabilities\020\255\004\022B\n=QuoteFieldBalanceShee"
    "tsStandardLiabilitiesDeferredIncomeTaxes"
    "\020\256\004\022I\nDQuoteFieldBalanceSheetsStandardLi"
    "abilitiesOtherNonCurrentLiabilities\020\257\004\022S"
    "\nNQuoteFieldBalanceSheetsStandardLiabili"
    "tiesPreferredSecuritiesOfSubsidiaryTrust"
    "\020\260\004\022P\nKQuoteFieldBalanceSheetsStandardLi"
    "abilitiesPreferredEquityOutsideStockEqui"
    "ty\020\261\004\022I\nDQuoteFieldBalanceSheetsStandard"
    "LiabilitiesTotalNonCurrentLiabilities\020\262\004"
    "\022,\n\'QuoteFieldBalanceSheetsStandardCashF"
    "low\020\263\004\0222\n-QuoteFieldBalanceSheetsStandar"
    "dWorkingCapital\020\264\004\0220\n+QuoteFieldBalanceS"
    "heetsStandardFreeCashFlow\020\265\004\0223\n.QuoteFie"
    "ldBalanceSheetsStandardInvestedCapital\020\266"
    "\004\022>\n9QuoteFieldBalanceSheetsFinancialAss"
    "etsCashAndDueFromBanks\020\267\004\022J\nEQuoteFieldB"
    "alanceSheetsFinancialAssetsFedFundsSoldS"
    "ecuritiesPurchased\020\270\004\022I\nDQuoteFieldBalan"
    "ceSheetsFinancialAssetsInterestBearingDe"
    "pAtOtherBanks\020\271\004\022B\n=QuoteFieldBalanceShe"
    "etsFinancialAssetsInvestmentSecuritiesNe"
    "t\020\272\004\0220\n+QuoteFieldBalanceSheetsFinancial"
    "AssetsLoans\020\273\004\022;\n6QuoteFieldBalanceSheet"
    "sFinancialAssetsUnearnedPremiums\020\274\004\022J\nEQ"
    "uoteFieldBalanceSheetsFinancialAssetsAll"
    "owanceForLoansAndLeaseLosses\020\275\004\0223\n.Quote"
    "FieldBalanceSheetsFinancialAssetsNetLoan"
    "s\020\276\004\022\?\n:QuoteFieldBalanceSheetsFinancial"
    "AssetsPremisesAndEquipment\020\277\004\022E\n@QuoteFi"
    "eldBalanceSheetsFinancialAssetsDueFromCu"
    "stomersAcceptance\020\300\004\022C\n>QuoteFieldBalanc"
    "eSheetsFinancialAssetsTradingAccountSecu"
    "rities\020\301\004\022:\n5QuoteFieldBalanceSheetsFina"
    "ncialAssetsAccruedInterest\020\302\004\022B\n=QuoteFi"
    "eldBalanceSheetsFinancialAssetsDeferredA"
    "cquisitionCost\020\303\004\022B\n=QuoteFieldBalanceSh"
    "eetsFinancialAssetsAccruedInvestmentInco"
    "me\020\304\004\022B\n=QuoteFieldBalanceSheetsFinancia"
    "lAssetsSeparateAccountBusiness\020\305\004\022=\n8Quo"
    "teFieldBalanceSheetsFinancialAssetsTimeD"
    "epositsPlaced\020\306\004\022;\n6QuoteFieldBalanceShe"
    "etsFinancialAssetsIntangibleAssets\020\307\004\0226\n"
    "1QuoteFieldBalanceSheetsFinancialAssetsO"
    "therAssets\020\310\004\022J\nEQuoteFieldBalanceSheets"
    "FinancialLiabilitiesNonInterestBearingDe"
    "posits\020\311\004\022G\nBQuoteFieldBalanceSheetsFina"
    "ncialLiabilitiesInterestBearingDeposits\020"
    "\312\004\022@\n;QuoteFieldBalanceSheetsFinancialLi"
    "abilitiesOtherLiabilities\020\313\004\022L\nGQuoteFie"
    "ldBalanceSheetsFinancialLiabilitiesBanke"
    "rsAcceptanceOutstanding\020\314\004\022O\nJQuoteField"
    "BalanceSheetsFinancialLiabilitiesFedFund"
    "sPurchasedSecuritiesSold\020\315\004\022<\n7QuoteFiel"
    "dBalanceSheetsFinancialLiabilitiesAccrue"
    "dTaxes\020\316\004\022G\nBQuoteFieldBalanceSheetsFina"
    "ncialLiabilitiesAccruedInterestPayables\020"
    "\317\004\022=\n8QuoteFieldBalanceSheetsFinancialLi"
    "abilitiesOtherPayables\020\320\004\022E\n@QuoteFieldB"
    "alanceSheetsFinancialLiabilitiesClaimsAn"
    "dClaimExpense\020\321\004\022D\n\?QuoteFieldBalanceShe"
    "etsFinancialLiabilitiesFuturePolicyBenef"
    "its\020\322\004\022@\n;QuoteFieldBalanceSheetsFinanci"
    "alLiabilitiesUnearnedPremiums\020\323\004\022A\n<Quot"
    "eFieldBalanceSheetsFinancialLiabilitiesP"
    "olicyHolderFunds\020\324\004\022O\nJQuoteFieldBalance"
    "SheetsFinancialLiabilitiesParticipatingP"
    "olicyholderEquity\020\325\004\022H\nCQuoteFieldBalanc"
    "eSheetsFinancialLiabilitiesSeparateAccou"
    "ntsBusiness\020\326\004\022E\n@QuoteFieldBalanceSheet"
    "sFinancialEquityForeignCurrencyAdjustmen"
    "ts\020\327\004\022M\nHQuoteFieldBalanceSheetsFinancia"
    "lEquityNetUnrealizedLossGainOnInvestment"
    "s\020\330\004\022Q\nLQuoteFieldBalanceSheetsFinancial"
    "EquityNetUnrealizedLossGainOnForeignCurr"
    "ency\020\331\004\022F\nAQuoteFieldBalanceSheetsFinanc"
    "ialEquityNetOtherUnearnedLossesGains\020\332\004\022"
    " \n\033QuoteFieldBalanceSheetsDate\020\333\004\0229\n4Quo"
    "teFieldCashFlowOperatingActivitiesNetInc"
    "omeOrLoss\020\241\006\022=\n8QuoteFieldCashFlowOperat"
    "ingActivitiesDeferredIncomeTaxes\020\242\006\022;\n6Q"
    "uoteFieldCashFlowOperatingActivitiesOthe"
    "rNonCashItems\020\243\006\0226\n1QuoteFieldCashFlowIn"
    "vestingActivitiesAcquisitions\020\244\006\022B\n=Quot"
    "eFieldCashFlowInvestingActivitiesOtherIn"
    "vestingChangesNet\020\245\006\022H\nCQuoteFieldCashFl"
    "owInvestingActivitiesNetCashFromInvestin"
    "gActivities\020\246\006\022H\nCQuoteFieldCashFlowFina"
    "ncingActivitiesNetCashFromFinancingActiv"
    "ities\020\247\006\022E\n@QuoteFieldCashFlowFinancingA"
    "ctivitiesEffectOfExchangeRateChanges\020\250\006\022"
    "A\n<QuoteFieldCashFlowFinancingActivities"
    "CashAtBeginningOfPeriod\020\251\006\022;\n6QuoteField"
    "CashFlowFinancingActivitiesCashAtEndOfPe"
    "riod\020\252\006\022>\n9QuoteFieldCashFlowStandardOpe"
    "ratingActivitiesDepreciation\020\253\006\022>\n9Quote"
    "FieldCashFlowStandardOperatingActivities"
    "Amortization\020\254\006\022K\nFQuoteFieldCashFlowSta"
    "ndardOperatingActivitiesAmortizationOfIn"
    "tangibles\020\255\006\022H\nCQuoteFieldCashFlowStanda"
    "rdOperatingActivitiesOperatingGainsOrLos"
    "ses\020\256\006\022L\nGQuoteFieldCashFlowStandardOper"
    "atingActivitiesExtraordinaryGainsOrLosse"
    "s\020\257\006\022Q\nLQuoteFieldCashFlowStandardOperat"
    "ingActivitiesIncreaseOrDecreaseInReceiva"
    "bles\020\260\006\022Q\nLQuoteFieldCashFlowStandardOpe"
    "ratingActivitiesIncreaseOrDecreaseInInve"
    "ntories\020\261\006\022U\nPQuoteFieldCashFlowStandard"
    "OperatingActivitiesIncreaseOrDecreaseInP"
    "repaidExpenses\020\262\006\022X\nSQuoteFieldCashFlowS"
    "tandardOperatingActivitiesIncreaseOrDecr"
    "easeInOtherCurrentAssets\020\263\006\022N\nIQuoteFiel"
    "dCashFlowStandardOperatingActivitiesIncr"
    "easeOrDecreaseInPayables\020\264\006\022Z\nUQuoteFiel"
    "dCashFlowStandardOperatingActivitiesIncr"
    "easeOrDecreaseInOtherCurrLiabilities\020\265\006\022"
    "Y\nTQuoteFieldCashFlowStandardOperatingAc"
    "tivitiesIncreaseOrDecreaseInOtherWorking"
    "Capital\020\266\006\022Q\nLQuoteFieldCashFlowStandard"
    "OperatingActivitiesNetCashFromContinuing"
    "Operations\020\267\006\022S\nNQuoteFieldCashFlowStand"
    "ardOperatingActivitiesNetCashFromDiscont"
    "inuedOperations\020\270\006\022P\nKQuoteFieldCashFlow"
    "StandardOperatingActivitiesNetCashFromOp"
    "eratingActivities\020\271\006\022N\nIQuoteFieldCashFl"
    "owStandardInvestingActivitiesSaleOfPrope"
    "rtyPlantEquipment\020\272\006\022K\nFQuoteFieldCashFl"
    "owStandardInvestingActivitiesSaleOfLongT"
    "ermInvestments\020\273\006\022L\nGQuoteFieldCashFlowS"
    "tandardInvestingActivitiesSaleOfShortTer"
    "mInvestments\020\274\006\022R\nMQuoteFieldCashFlowSta"
    "ndardInvestingActivitiesPurchaseOfProper"
    "tyPlantEquipment\020\275\006\022O\nJQuoteFieldCashFlo"
    "wStandardInvestingActivitiesPurchaseOfLo"
    "ngTermInvestments\020\276\006\022P\nKQuoteFieldCashFl"
    "owStandardInvestingActivitiesPurchaseOfS"
    "hortTermInvestments\020\277\006\022Q\nLQuoteFieldCash"
    "FlowStandardInvestingActivitiesCashFromD"
    "iscInvestingActivities\020\300\006\022@\n;QuoteFieldC"
    "ashFlowStandardFinancingActivitiesIssuan"
    "ceOfDebt\020\301\006\022H\nCQuoteFieldCashFlowStandar"
    "dFinancingActivitiesIssuanceOfCapitalSto"
    "ck\020\302\006\022A\n<QuoteFieldCashFlowStandardFinan"
    "cingActivitiesRepaymentOfDebt\020\303\006\022J\nEQuot"
    "eFieldCashFlowStandardFinancingActivitie"
    "sRepurchaseOfCapitalStock\020\304\006\022H\nCQuoteFie"
    "ldCashFlowStandardFinancingActivitiesPay"
    "mentOfCashDividends\020\305\006\022J\nEQuoteFieldCash"
    "FlowStandardFinancingActivitiesOtherFina"
    "ncingChargesNet\020\306\006\022Q\nLQuoteFieldCashFlow"
    "StandardFinancingActivitiesCashFromDiscF"
    "inancingActivities\020\307\006\022S\nNQuoteFieldCashF"
    "lowStandardFinancingActivitiesNetChangeI"
    "nCashAndCashEquivalents\020\310\006\022I\nDQuoteField"
    "CashFlowFinancialOperatingActivitiesProv"
    "isionForLoanLosses\020\311\006\022N\nIQuoteFieldCashF"
    "lowFinancialOperatingActivitiesDepreciat"
    "ionandAmortization\020\312\006\022L\nGQuoteFieldCashF"
    "lowFinancialOperatingActivitiesChangeInA"
    "ssetsReceivables\020\313\006\022N\nIQuoteFieldCashFlo"
    "wFinancialOperatingActivitiesChangeInLia"
    "bilitiesPayables\020\314\006\022K\nFQuoteFieldCashFlo"
    "wFinancialOperatingActivitiesInvestmentS"
    "ecuritiesGain\020\315\006\022L\nGQuoteFieldCashFlowFi"
    "nancialOperatingActivitiesNetPolicyAcqui"
    "sitionCosts\020\316\006\022J\nEQuoteFieldCashFlowFina"
    "ncialOperatingActivitiesRealizedInvestme"
    "ntGains\020\317\006\022I\nDQuoteFieldCashFlowFinancia"
    "lOperatingActivitiesNetPremiumsReceivabl"
    "es\020\320\006\022F\nAQuoteFieldCashFlowFinancialOper"
    "atingActivitiesChangeInIncomeTaxes\020\321\006\022Q\n"
    "LQuoteFieldCashFlowFinancialOperatingAct"
    "ivitiesNetCashFromOperatingActivities\020\322\006"
    "\022I\nDQuoteFieldCashFlowFinancialInvesting"
    "ActivitiesProceedsFromSaleMatInv\020\323\006\022Q\nLQ"
    "uoteFieldCashFlowFinancialInvestingActiv"
    "itiesPurchaseOfInvestmentSecurities\020\324\006\022J"
    "\nEQuoteFieldCashFlowFinancialInvestingAc"
    "tivitiesNetIncreaseFedFundsSold\020\325\006\022Q\nLQu"
    "oteFieldCashFlowFinancialInvestingActivi"
    "tiesPurchaseOfPropertyAndEquipment\020\326\006\022F\n"
    "AQuoteFieldCashFlowFinancialFinancingAct"
    "ivitiesNetChangeInDeposits\020\327\006\022D\n\?QuoteFi"
    "eldCashFlowFinancialFinancingActivitiesC"
    "ashDividendsPaid\020\330\006\022J\nEQuoteFieldCashFlo"
    "wFinancialFinancingActivitiesRepaymentOf"
    "LongTermDebt\020\331\006\022H\nCQuoteFieldCashFlowFin"
    "ancialFinancingActivitiesChangeOfShortTe"
    "rmDebt\020\332\006\022I\nDQuoteFieldCashFlowFinancial"
    "FinancingActivitiesIssuanceOfLongTermDeb"
    "t\020\333\006\022K\nFQuoteFieldCashFlowFinancialFinan"
    "cingActivitiesIssuanceOfPreferredStock\020\334"
    "\006\022H\nCQuoteFieldCashFlowFinancialFinancin"
    "gActivitiesIssuanceOfCommonStock\020\335\006\022J\nEQ"
    "uoteFieldCashFlowFinancialFinancingActiv"
    "itiesPurchaseOfTreasuryStock\020\336\006\022K\nFQuote"
    "FieldCashFlowFinancialFinancingActivitie"
    "sOtherFinancingActivities\020\337\006\022P\nKQuoteFie"
    "ldCashFlowFinancialFinancingActivitiesNe"
    "tChangeInCashAndEquivalents\020\340\006\022\033\n\026QuoteF"
    "ieldCashFlowDate\020\341\006", 24179);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages.proto", &protobuf_RegisterTypes);
  ATLoginResponse::default_instance_ = new ATLoginResponse();
  ATConstituentResponse::default_instance_ = new ATConstituentResponse();
  ATQuoteStreamResponse::default_instance_ = new ATQuoteStreamResponse();
  ATQuoteStreamResponseItem::default_instance_ = new ATQuoteStreamResponseItem();
  ATTime::default_instance_ = new ATTime();
  ATQuoteStreamTradeUpdate::default_instance_ = new ATQuoteStreamTradeUpdate();
  ATQuoteStreamQuoteUpdate::default_instance_ = new ATQuoteStreamQuoteUpdate();
  ATQuoteStreamRefreshUpdate::default_instance_ = new ATQuoteStreamRefreshUpdate();
  ATMarketMoversStreamUpdate::default_instance_ = new ATMarketMoversStreamUpdate();
  ATMarketMoversRecord::default_instance_ = new ATMarketMoversRecord();
  ATMarketMoversItem::default_instance_ = new ATMarketMoversItem();
  ATSymbol::default_instance_ = new ATSymbol();
  ATPrice::default_instance_ = new ATPrice();
  ATQuote::default_instance_ = new ATQuote();
  ATBarHistoryValue::default_instance_ = new ATBarHistoryValue();
  ATBarHistoryDbResponse::default_instance_ = new ATBarHistoryDbResponse();
  ATQuoteDbResponseSymbolFieldData::default_instance_ = new ATQuoteDbResponseSymbolFieldData();
  ATQuoteDbResponseData::default_instance_ = new ATQuoteDbResponseData();
  ATQuoteDbResponse::default_instance_ = new ATQuoteDbResponse();
  ATLoginResponse::default_instance_->InitAsDefaultInstance();
  ATConstituentResponse::default_instance_->InitAsDefaultInstance();
  ATQuoteStreamResponse::default_instance_->InitAsDefaultInstance();
  ATQuoteStreamResponseItem::default_instance_->InitAsDefaultInstance();
  ATTime::default_instance_->InitAsDefaultInstance();
  ATQuoteStreamTradeUpdate::default_instance_->InitAsDefaultInstance();
  ATQuoteStreamQuoteUpdate::default_instance_->InitAsDefaultInstance();
  ATQuoteStreamRefreshUpdate::default_instance_->InitAsDefaultInstance();
  ATMarketMoversStreamUpdate::default_instance_->InitAsDefaultInstance();
  ATMarketMoversRecord::default_instance_->InitAsDefaultInstance();
  ATMarketMoversItem::default_instance_->InitAsDefaultInstance();
  ATSymbol::default_instance_->InitAsDefaultInstance();
  ATPrice::default_instance_->InitAsDefaultInstance();
  ATQuote::default_instance_->InitAsDefaultInstance();
  ATBarHistoryValue::default_instance_->InitAsDefaultInstance();
  ATBarHistoryDbResponse::default_instance_->InitAsDefaultInstance();
  ATQuoteDbResponseSymbolFieldData::default_instance_->InitAsDefaultInstance();
  ATQuoteDbResponseData::default_instance_->InitAsDefaultInstance();
  ATQuoteDbResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_2eproto {
  StaticDescriptorInitializer_messages_2eproto() {
    protobuf_AddDesc_messages_2eproto();
  }
} static_descriptor_initializer_messages_2eproto_;
const ::google::protobuf::EnumDescriptor* ATConstituentRequestTypes_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATConstituentRequestTypes_descriptor_;
}
bool ATConstituentRequestTypes_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ATStreamRequestTypes_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATStreamRequestTypes_descriptor_;
}
bool ATStreamRequestTypes_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ATBarHistoryTypes_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATBarHistoryTypes_descriptor_;
}
bool ATBarHistoryTypes_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ATStreamResponseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATStreamResponseType_descriptor_;
}
bool ATStreamResponseType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ATSymbolStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATSymbolStatus_descriptor_;
}
bool ATSymbolStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ATQuoteFieldType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATQuoteFieldType_descriptor_;
}
bool ATQuoteFieldType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 100:
    case 101:
    case 200:
    case 201:
    case 202:
    case 203:
    case 204:
    case 205:
    case 206:
    case 207:
    case 208:
    case 209:
    case 210:
    case 211:
    case 212:
    case 213:
    case 214:
    case 215:
    case 216:
    case 217:
    case 218:
    case 219:
    case 220:
    case 221:
    case 222:
    case 223:
    case 224:
    case 225:
    case 226:
    case 227:
    case 228:
    case 229:
    case 230:
    case 231:
    case 232:
    case 233:
    case 234:
    case 235:
    case 236:
    case 237:
    case 238:
    case 239:
    case 240:
    case 241:
    case 242:
    case 243:
    case 244:
    case 245:
    case 246:
    case 247:
    case 248:
    case 249:
    case 250:
    case 251:
    case 252:
    case 253:
    case 254:
    case 255:
    case 256:
    case 257:
    case 258:
    case 259:
    case 260:
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
    case 267:
    case 268:
    case 269:
    case 270:
    case 271:
    case 272:
    case 273:
    case 274:
    case 275:
    case 276:
    case 277:
    case 278:
    case 279:
    case 280:
    case 281:
    case 282:
    case 283:
    case 284:
    case 285:
    case 286:
    case 287:
    case 288:
    case 289:
    case 290:
    case 291:
    case 292:
    case 293:
    case 294:
    case 295:
    case 296:
    case 297:
    case 298:
    case 299:
    case 500:
    case 501:
    case 502:
    case 503:
    case 504:
    case 505:
    case 506:
    case 507:
    case 508:
    case 509:
    case 510:
    case 511:
    case 512:
    case 513:
    case 514:
    case 515:
    case 516:
    case 517:
    case 518:
    case 519:
    case 520:
    case 521:
    case 522:
    case 523:
    case 524:
    case 525:
    case 526:
    case 527:
    case 528:
    case 529:
    case 530:
    case 531:
    case 532:
    case 533:
    case 534:
    case 535:
    case 536:
    case 537:
    case 538:
    case 539:
    case 540:
    case 541:
    case 542:
    case 543:
    case 544:
    case 545:
    case 546:
    case 547:
    case 548:
    case 549:
    case 550:
    case 551:
    case 552:
    case 553:
    case 554:
    case 555:
    case 556:
    case 557:
    case 558:
    case 559:
    case 560:
    case 561:
    case 562:
    case 563:
    case 564:
    case 565:
    case 566:
    case 567:
    case 568:
    case 569:
    case 570:
    case 571:
    case 572:
    case 573:
    case 574:
    case 575:
    case 576:
    case 577:
    case 578:
    case 579:
    case 580:
    case 581:
    case 582:
    case 583:
    case 584:
    case 585:
    case 586:
    case 587:
    case 588:
    case 589:
    case 590:
    case 591:
    case 592:
    case 593:
    case 594:
    case 595:
    case 596:
    case 597:
    case 598:
    case 599:
    case 600:
    case 601:
    case 602:
    case 603:
    case 801:
    case 802:
    case 803:
    case 804:
    case 805:
    case 806:
    case 807:
    case 808:
    case 809:
    case 810:
    case 811:
    case 812:
    case 813:
    case 814:
    case 815:
    case 816:
    case 817:
    case 818:
    case 819:
    case 820:
    case 821:
    case 822:
    case 823:
    case 824:
    case 825:
    case 826:
    case 827:
    case 828:
    case 829:
    case 830:
    case 831:
    case 832:
    case 833:
    case 834:
    case 835:
    case 836:
    case 837:
    case 838:
    case 839:
    case 840:
    case 841:
    case 842:
    case 843:
    case 844:
    case 845:
    case 846:
    case 847:
    case 848:
    case 849:
    case 850:
    case 851:
    case 852:
    case 853:
    case 854:
    case 855:
    case 856:
    case 857:
    case 858:
    case 859:
    case 860:
    case 861:
    case 862:
    case 863:
    case 864:
    case 865:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ATLoginResponse::kLoginResponseTypeFieldNumber;
const int ATLoginResponse::kLoginResponseStringFieldNumber;
#endif  // !_MSC_VER

ATLoginResponse::ATLoginResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ATLoginResponse::InitAsDefaultInstance() {
}

ATLoginResponse::ATLoginResponse(const ATLoginResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ATLoginResponse::SharedCtor() {
  _cached_size_ = 0;
  loginresponsetype_ = 0;
  loginresponsestring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATLoginResponse::~ATLoginResponse() {
  SharedDtor();
}

void ATLoginResponse::SharedDtor() {
  if (loginresponsestring_ != &::google::protobuf::internal::kEmptyString) {
    delete loginresponsestring_;
  }
  if (this != default_instance_) {
  }
}

void ATLoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATLoginResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATLoginResponse_descriptor_;
}

const ATLoginResponse& ATLoginResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATLoginResponse* ATLoginResponse::default_instance_ = NULL;

ATLoginResponse* ATLoginResponse::New() const {
  return new ATLoginResponse;
}

void ATLoginResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    loginresponsetype_ = 0;
    if (has_loginresponsestring()) {
      if (loginresponsestring_ != &::google::protobuf::internal::kEmptyString) {
        loginresponsestring_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATLoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 loginResponseType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &loginresponsetype_)));
          set_has_loginresponsetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_loginResponseString;
        break;
      }

      // required string loginResponseString = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loginResponseString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_loginresponsestring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->loginresponsestring().data(), this->loginresponsestring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ATLoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 loginResponseType = 1;
  if (has_loginresponsetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->loginresponsetype(), output);
  }

  // required string loginResponseString = 2;
  if (has_loginresponsestring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loginresponsestring().data(), this->loginresponsestring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->loginresponsestring(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ATLoginResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 loginResponseType = 1;
  if (has_loginresponsetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->loginresponsetype(), target);
  }

  // required string loginResponseString = 2;
  if (has_loginresponsestring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->loginresponsestring().data(), this->loginresponsestring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->loginresponsestring(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ATLoginResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 loginResponseType = 1;
    if (has_loginresponsetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->loginresponsetype());
    }

    // required string loginResponseString = 2;
    if (has_loginresponsestring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->loginresponsestring());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATLoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATLoginResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATLoginResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATLoginResponse::MergeFrom(const ATLoginResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_loginresponsetype()) {
      set_loginresponsetype(from.loginresponsetype());
    }
    if (from.has_loginresponsestring()) {
      set_loginresponsestring(from.loginresponsestring());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATLoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATLoginResponse::CopyFrom(const ATLoginResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATLoginResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ATLoginResponse::Swap(ATLoginResponse* other) {
  if (other != this) {
    std::swap(loginresponsetype_, other->loginresponsetype_);
    std::swap(loginresponsestring_, other->loginresponsestring_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATLoginResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATLoginResponse_descriptor_;
  metadata.reflection = ATLoginResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATConstituentResponse::kSymbolsFieldNumber;
#endif  // !_MSC_VER

ATConstituentResponse::ATConstituentResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ATConstituentResponse::InitAsDefaultInstance() {
}

ATConstituentResponse::ATConstituentResponse(const ATConstituentResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ATConstituentResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATConstituentResponse::~ATConstituentResponse() {
  SharedDtor();
}

void ATConstituentResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ATConstituentResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATConstituentResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATConstituentResponse_descriptor_;
}

const ATConstituentResponse& ATConstituentResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATConstituentResponse* ATConstituentResponse::default_instance_ = NULL;

ATConstituentResponse* ATConstituentResponse::New() const {
  return new ATConstituentResponse;
}

void ATConstituentResponse::Clear() {
  symbols_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATConstituentResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NodeActiveTickProto.ATSymbol symbols = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_symbols()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_symbols;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ATConstituentResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NodeActiveTickProto.ATSymbol symbols = 1;
  for (int i = 0; i < this->symbols_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->symbols(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ATConstituentResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NodeActiveTickProto.ATSymbol symbols = 1;
  for (int i = 0; i < this->symbols_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->symbols(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ATConstituentResponse::ByteSize() const {
  int total_size = 0;

  // repeated .NodeActiveTickProto.ATSymbol symbols = 1;
  total_size += 1 * this->symbols_size();
  for (int i = 0; i < this->symbols_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->symbols(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATConstituentResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATConstituentResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATConstituentResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATConstituentResponse::MergeFrom(const ATConstituentResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  symbols_.MergeFrom(from.symbols_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATConstituentResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATConstituentResponse::CopyFrom(const ATConstituentResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATConstituentResponse::IsInitialized() const {

  return true;
}

void ATConstituentResponse::Swap(ATConstituentResponse* other) {
  if (other != this) {
    symbols_.Swap(&other->symbols_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATConstituentResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATConstituentResponse_descriptor_;
  metadata.reflection = ATConstituentResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATQuoteStreamResponse::kResponseTypeFieldNumber;
const int ATQuoteStreamResponse::kQuoteResponseCountFieldNumber;
const int ATQuoteStreamResponse::kQuoteStreamItemsFieldNumber;
#endif  // !_MSC_VER

ATQuoteStreamResponse::ATQuoteStreamResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ATQuoteStreamResponse::InitAsDefaultInstance() {
}

ATQuoteStreamResponse::ATQuoteStreamResponse(const ATQuoteStreamResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ATQuoteStreamResponse::SharedCtor() {
  _cached_size_ = 0;
  responsetype_ = 1;
  quoteresponsecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATQuoteStreamResponse::~ATQuoteStreamResponse() {
  SharedDtor();
}

void ATQuoteStreamResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ATQuoteStreamResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATQuoteStreamResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATQuoteStreamResponse_descriptor_;
}

const ATQuoteStreamResponse& ATQuoteStreamResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATQuoteStreamResponse* ATQuoteStreamResponse::default_instance_ = NULL;

ATQuoteStreamResponse* ATQuoteStreamResponse::New() const {
  return new ATQuoteStreamResponse;
}

void ATQuoteStreamResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responsetype_ = 1;
    quoteresponsecount_ = 0;
  }
  quotestreamitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATQuoteStreamResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NodeActiveTickProto.ATStreamResponseType responseType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NodeActiveTickProto::ATStreamResponseType_IsValid(value)) {
            set_responsetype(static_cast< ::NodeActiveTickProto::ATStreamResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quoteResponseCount;
        break;
      }

      // optional int32 quoteResponseCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quoteResponseCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quoteresponsecount_)));
          set_has_quoteresponsecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_quoteStreamItems;
        break;
      }

      // repeated .NodeActiveTickProto.ATQuoteStreamResponseItem quoteStreamItems = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quoteStreamItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quotestreamitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_quoteStreamItems;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ATQuoteStreamResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NodeActiveTickProto.ATStreamResponseType responseType = 1;
  if (has_responsetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->responsetype(), output);
  }

  // optional int32 quoteResponseCount = 2;
  if (has_quoteresponsecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quoteresponsecount(), output);
  }

  // repeated .NodeActiveTickProto.ATQuoteStreamResponseItem quoteStreamItems = 3;
  for (int i = 0; i < this->quotestreamitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->quotestreamitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ATQuoteStreamResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NodeActiveTickProto.ATStreamResponseType responseType = 1;
  if (has_responsetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->responsetype(), target);
  }

  // optional int32 quoteResponseCount = 2;
  if (has_quoteresponsecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quoteresponsecount(), target);
  }

  // repeated .NodeActiveTickProto.ATQuoteStreamResponseItem quoteStreamItems = 3;
  for (int i = 0; i < this->quotestreamitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->quotestreamitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ATQuoteStreamResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NodeActiveTickProto.ATStreamResponseType responseType = 1;
    if (has_responsetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->responsetype());
    }

    // optional int32 quoteResponseCount = 2;
    if (has_quoteresponsecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quoteresponsecount());
    }

  }
  // repeated .NodeActiveTickProto.ATQuoteStreamResponseItem quoteStreamItems = 3;
  total_size += 1 * this->quotestreamitems_size();
  for (int i = 0; i < this->quotestreamitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quotestreamitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATQuoteStreamResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATQuoteStreamResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATQuoteStreamResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATQuoteStreamResponse::MergeFrom(const ATQuoteStreamResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  quotestreamitems_.MergeFrom(from.quotestreamitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsetype()) {
      set_responsetype(from.responsetype());
    }
    if (from.has_quoteresponsecount()) {
      set_quoteresponsecount(from.quoteresponsecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATQuoteStreamResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATQuoteStreamResponse::CopyFrom(const ATQuoteStreamResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATQuoteStreamResponse::IsInitialized() const {

  return true;
}

void ATQuoteStreamResponse::Swap(ATQuoteStreamResponse* other) {
  if (other != this) {
    std::swap(responsetype_, other->responsetype_);
    std::swap(quoteresponsecount_, other->quoteresponsecount_);
    quotestreamitems_.Swap(&other->quotestreamitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATQuoteStreamResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATQuoteStreamResponse_descriptor_;
  metadata.reflection = ATQuoteStreamResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATQuoteStreamResponseItem::kResponseTypeFieldNumber;
const int ATQuoteStreamResponseItem::kSymbolFieldNumber;
const int ATQuoteStreamResponseItem::kSymbolStatusFieldNumber;
#endif  // !_MSC_VER

ATQuoteStreamResponseItem::ATQuoteStreamResponseItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ATQuoteStreamResponseItem::InitAsDefaultInstance() {
  symbol_ = const_cast< ::NodeActiveTickProto::ATSymbol*>(&::NodeActiveTickProto::ATSymbol::default_instance());
}

ATQuoteStreamResponseItem::ATQuoteStreamResponseItem(const ATQuoteStreamResponseItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ATQuoteStreamResponseItem::SharedCtor() {
  _cached_size_ = 0;
  responsetype_ = 1;
  symbol_ = NULL;
  symbolstatus_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATQuoteStreamResponseItem::~ATQuoteStreamResponseItem() {
  SharedDtor();
}

void ATQuoteStreamResponseItem::SharedDtor() {
  if (this != default_instance_) {
    delete symbol_;
  }
}

void ATQuoteStreamResponseItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATQuoteStreamResponseItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATQuoteStreamResponseItem_descriptor_;
}

const ATQuoteStreamResponseItem& ATQuoteStreamResponseItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATQuoteStreamResponseItem* ATQuoteStreamResponseItem::default_instance_ = NULL;

ATQuoteStreamResponseItem* ATQuoteStreamResponseItem::New() const {
  return new ATQuoteStreamResponseItem;
}

void ATQuoteStreamResponseItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responsetype_ = 1;
    if (has_symbol()) {
      if (symbol_ != NULL) symbol_->::NodeActiveTickProto::ATSymbol::Clear();
    }
    symbolstatus_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATQuoteStreamResponseItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NodeActiveTickProto.ATStreamResponseType responseType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NodeActiveTickProto::ATStreamResponseType_IsValid(value)) {
            set_responsetype(static_cast< ::NodeActiveTickProto::ATStreamResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_symbol;
        break;
      }

      // optional .NodeActiveTickProto.ATSymbol symbol = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_symbol()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_symbolStatus;
        break;
      }

      // optional .NodeActiveTickProto.ATSymbolStatus symbolStatus = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_symbolStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NodeActiveTickProto::ATSymbolStatus_IsValid(value)) {
            set_symbolstatus(static_cast< ::NodeActiveTickProto::ATSymbolStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ATQuoteStreamResponseItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NodeActiveTickProto.ATStreamResponseType responseType = 1;
  if (has_responsetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->responsetype(), output);
  }

  // optional .NodeActiveTickProto.ATSymbol symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->symbol(), output);
  }

  // optional .NodeActiveTickProto.ATSymbolStatus symbolStatus = 3;
  if (has_symbolstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->symbolstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ATQuoteStreamResponseItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NodeActiveTickProto.ATStreamResponseType responseType = 1;
  if (has_responsetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->responsetype(), target);
  }

  // optional .NodeActiveTickProto.ATSymbol symbol = 2;
  if (has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->symbol(), target);
  }

  // optional .NodeActiveTickProto.ATSymbolStatus symbolStatus = 3;
  if (has_symbolstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->symbolstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ATQuoteStreamResponseItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NodeActiveTickProto.ATStreamResponseType responseType = 1;
    if (has_responsetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->responsetype());
    }

    // optional .NodeActiveTickProto.ATSymbol symbol = 2;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->symbol());
    }

    // optional .NodeActiveTickProto.ATSymbolStatus symbolStatus = 3;
    if (has_symbolstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->symbolstatus());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATQuoteStreamResponseItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATQuoteStreamResponseItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATQuoteStreamResponseItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATQuoteStreamResponseItem::MergeFrom(const ATQuoteStreamResponseItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsetype()) {
      set_responsetype(from.responsetype());
    }
    if (from.has_symbol()) {
      mutable_symbol()->::NodeActiveTickProto::ATSymbol::MergeFrom(from.symbol());
    }
    if (from.has_symbolstatus()) {
      set_symbolstatus(from.symbolstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATQuoteStreamResponseItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATQuoteStreamResponseItem::CopyFrom(const ATQuoteStreamResponseItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATQuoteStreamResponseItem::IsInitialized() const {

  return true;
}

void ATQuoteStreamResponseItem::Swap(ATQuoteStreamResponseItem* other) {
  if (other != this) {
    std::swap(responsetype_, other->responsetype_);
    std::swap(symbol_, other->symbol_);
    std::swap(symbolstatus_, other->symbolstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATQuoteStreamResponseItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATQuoteStreamResponseItem_descriptor_;
  metadata.reflection = ATQuoteStreamResponseItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATTime::kYearFieldNumber;
const int ATTime::kMonthFieldNumber;
const int ATTime::kDayOfWeekFieldNumber;
const int ATTime::kDayFieldNumber;
const int ATTime::kHourFieldNumber;
const int ATTime::kMinuteFieldNumber;
const int ATTime::kSecondFieldNumber;
const int ATTime::kMillisecondsFieldNumber;
#endif  // !_MSC_VER

ATTime::ATTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ATTime::InitAsDefaultInstance() {
}

ATTime::ATTime(const ATTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ATTime::SharedCtor() {
  _cached_size_ = 0;
  year_ = 0;
  month_ = 0;
  dayofweek_ = 0;
  day_ = 0;
  hour_ = 0;
  minute_ = 0;
  second_ = 0;
  milliseconds_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATTime::~ATTime() {
  SharedDtor();
}

void ATTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ATTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATTime_descriptor_;
}

const ATTime& ATTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATTime* ATTime::default_instance_ = NULL;

ATTime* ATTime::New() const {
  return new ATTime;
}

void ATTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    year_ = 0;
    month_ = 0;
    dayofweek_ = 0;
    day_ = 0;
    hour_ = 0;
    minute_ = 0;
    second_ = 0;
    milliseconds_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 year = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_month;
        break;
      }

      // optional int32 month = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dayOfWeek;
        break;
      }

      // optional int32 dayOfWeek = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dayOfWeek:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dayofweek_)));
          set_has_dayofweek();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_day;
        break;
      }

      // optional int32 day = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hour;
        break;
      }

      // optional int32 hour = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hour_)));
          set_has_hour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_minute;
        break;
      }

      // optional int32 minute = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_minute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minute_)));
          set_has_minute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_second;
        break;
      }

      // optional int32 second = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_)));
          set_has_second();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_milliseconds;
        break;
      }

      // optional int32 milliseconds = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_milliseconds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &milliseconds_)));
          set_has_milliseconds();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ATTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 year = 1;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->year(), output);
  }

  // optional int32 month = 2;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->month(), output);
  }

  // optional int32 dayOfWeek = 3;
  if (has_dayofweek()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dayofweek(), output);
  }

  // optional int32 day = 4;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->day(), output);
  }

  // optional int32 hour = 5;
  if (has_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hour(), output);
  }

  // optional int32 minute = 6;
  if (has_minute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->minute(), output);
  }

  // optional int32 second = 7;
  if (has_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->second(), output);
  }

  // optional int32 milliseconds = 8;
  if (has_milliseconds()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->milliseconds(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ATTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 year = 1;
  if (has_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->year(), target);
  }

  // optional int32 month = 2;
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->month(), target);
  }

  // optional int32 dayOfWeek = 3;
  if (has_dayofweek()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dayofweek(), target);
  }

  // optional int32 day = 4;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->day(), target);
  }

  // optional int32 hour = 5;
  if (has_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hour(), target);
  }

  // optional int32 minute = 6;
  if (has_minute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->minute(), target);
  }

  // optional int32 second = 7;
  if (has_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->second(), target);
  }

  // optional int32 milliseconds = 8;
  if (has_milliseconds()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->milliseconds(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ATTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 year = 1;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year());
    }

    // optional int32 month = 2;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->month());
    }

    // optional int32 dayOfWeek = 3;
    if (has_dayofweek()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dayofweek());
    }

    // optional int32 day = 4;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // optional int32 hour = 5;
    if (has_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hour());
    }

    // optional int32 minute = 6;
    if (has_minute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minute());
    }

    // optional int32 second = 7;
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->second());
    }

    // optional int32 milliseconds = 8;
    if (has_milliseconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->milliseconds());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATTime::MergeFrom(const ATTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_dayofweek()) {
      set_dayofweek(from.dayofweek());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_hour()) {
      set_hour(from.hour());
    }
    if (from.has_minute()) {
      set_minute(from.minute());
    }
    if (from.has_second()) {
      set_second(from.second());
    }
    if (from.has_milliseconds()) {
      set_milliseconds(from.milliseconds());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATTime::CopyFrom(const ATTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATTime::IsInitialized() const {

  return true;
}

void ATTime::Swap(ATTime* other) {
  if (other != this) {
    std::swap(year_, other->year_);
    std::swap(month_, other->month_);
    std::swap(dayofweek_, other->dayofweek_);
    std::swap(day_, other->day_);
    std::swap(hour_, other->hour_);
    std::swap(minute_, other->minute_);
    std::swap(second_, other->second_);
    std::swap(milliseconds_, other->milliseconds_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATTime_descriptor_;
  metadata.reflection = ATTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATQuoteStreamTradeUpdate::kTradeSymbolFieldNumber;
const int ATQuoteStreamTradeUpdate::kTradeMessageFlagsFieldNumber;
const int ATQuoteStreamTradeUpdate::kTradeConditionTypeFieldNumber;
const int ATQuoteStreamTradeUpdate::kTradeExchangeFieldNumber;
const int ATQuoteStreamTradeUpdate::kTradePriceFieldNumber;
const int ATQuoteStreamTradeUpdate::kTradeSizeFieldNumber;
const int ATQuoteStreamTradeUpdate::kTradeTimeFieldNumber;
#endif  // !_MSC_VER

ATQuoteStreamTradeUpdate::ATQuoteStreamTradeUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ATQuoteStreamTradeUpdate::InitAsDefaultInstance() {
  tradesymbol_ = const_cast< ::NodeActiveTickProto::ATSymbol*>(&::NodeActiveTickProto::ATSymbol::default_instance());
  tradeprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  tradetime_ = const_cast< ::NodeActiveTickProto::ATTime*>(&::NodeActiveTickProto::ATTime::default_instance());
}

ATQuoteStreamTradeUpdate::ATQuoteStreamTradeUpdate(const ATQuoteStreamTradeUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ATQuoteStreamTradeUpdate::SharedCtor() {
  _cached_size_ = 0;
  tradesymbol_ = NULL;
  trademessageflags_ = 0;
  tradeexchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tradeprice_ = NULL;
  tradesize_ = 0;
  tradetime_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATQuoteStreamTradeUpdate::~ATQuoteStreamTradeUpdate() {
  SharedDtor();
}

void ATQuoteStreamTradeUpdate::SharedDtor() {
  if (tradeexchange_ != &::google::protobuf::internal::kEmptyString) {
    delete tradeexchange_;
  }
  if (this != default_instance_) {
    delete tradesymbol_;
    delete tradeprice_;
    delete tradetime_;
  }
}

void ATQuoteStreamTradeUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATQuoteStreamTradeUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATQuoteStreamTradeUpdate_descriptor_;
}

const ATQuoteStreamTradeUpdate& ATQuoteStreamTradeUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATQuoteStreamTradeUpdate* ATQuoteStreamTradeUpdate::default_instance_ = NULL;

ATQuoteStreamTradeUpdate* ATQuoteStreamTradeUpdate::New() const {
  return new ATQuoteStreamTradeUpdate;
}

void ATQuoteStreamTradeUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_tradesymbol()) {
      if (tradesymbol_ != NULL) tradesymbol_->::NodeActiveTickProto::ATSymbol::Clear();
    }
    trademessageflags_ = 0;
    if (has_tradeexchange()) {
      if (tradeexchange_ != &::google::protobuf::internal::kEmptyString) {
        tradeexchange_->clear();
      }
    }
    if (has_tradeprice()) {
      if (tradeprice_ != NULL) tradeprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
    tradesize_ = 0;
    if (has_tradetime()) {
      if (tradetime_ != NULL) tradetime_->::NodeActiveTickProto::ATTime::Clear();
    }
  }
  tradeconditiontype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATQuoteStreamTradeUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NodeActiveTickProto.ATSymbol tradeSymbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tradesymbol()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_tradeMessageFlags;
        break;
      }

      // optional int32 tradeMessageFlags = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tradeMessageFlags:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trademessageflags_)));
          set_has_trademessageflags();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tradeConditionType;
        break;
      }

      // repeated string tradeConditionType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tradeConditionType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tradeconditiontype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradeconditiontype(this->tradeconditiontype_size() - 1).data(),
            this->tradeconditiontype(this->tradeconditiontype_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tradeConditionType;
        if (input->ExpectTag(34)) goto parse_tradeExchange;
        break;
      }

      // optional string tradeExchange = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tradeExchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tradeexchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tradeexchange().data(), this->tradeexchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_tradePrice;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice tradePrice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tradePrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tradeprice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_tradeSize;
        break;
      }

      // optional int32 tradeSize = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tradeSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tradesize_)));
          set_has_tradesize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_tradeTime;
        break;
      }

      // optional .NodeActiveTickProto.ATTime tradeTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tradeTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tradetime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ATQuoteStreamTradeUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NodeActiveTickProto.ATSymbol tradeSymbol = 1;
  if (has_tradesymbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tradesymbol(), output);
  }

  // optional int32 tradeMessageFlags = 2;
  if (has_trademessageflags()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->trademessageflags(), output);
  }

  // repeated string tradeConditionType = 3;
  for (int i = 0; i < this->tradeconditiontype_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->tradeconditiontype(i).data(), this->tradeconditiontype(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->tradeconditiontype(i), output);
  }

  // optional string tradeExchange = 4;
  if (has_tradeexchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradeexchange().data(), this->tradeexchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->tradeexchange(), output);
  }

  // optional .NodeActiveTickProto.ATPrice tradePrice = 5;
  if (has_tradeprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->tradeprice(), output);
  }

  // optional int32 tradeSize = 6;
  if (has_tradesize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tradesize(), output);
  }

  // optional .NodeActiveTickProto.ATTime tradeTime = 7;
  if (has_tradetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->tradetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ATQuoteStreamTradeUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NodeActiveTickProto.ATSymbol tradeSymbol = 1;
  if (has_tradesymbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tradesymbol(), target);
  }

  // optional int32 tradeMessageFlags = 2;
  if (has_trademessageflags()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->trademessageflags(), target);
  }

  // repeated string tradeConditionType = 3;
  for (int i = 0; i < this->tradeconditiontype_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradeconditiontype(i).data(), this->tradeconditiontype(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->tradeconditiontype(i), target);
  }

  // optional string tradeExchange = 4;
  if (has_tradeexchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tradeexchange().data(), this->tradeexchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tradeexchange(), target);
  }

  // optional .NodeActiveTickProto.ATPrice tradePrice = 5;
  if (has_tradeprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->tradeprice(), target);
  }

  // optional int32 tradeSize = 6;
  if (has_tradesize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tradesize(), target);
  }

  // optional .NodeActiveTickProto.ATTime tradeTime = 7;
  if (has_tradetime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->tradetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ATQuoteStreamTradeUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NodeActiveTickProto.ATSymbol tradeSymbol = 1;
    if (has_tradesymbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tradesymbol());
    }

    // optional int32 tradeMessageFlags = 2;
    if (has_trademessageflags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->trademessageflags());
    }

    // optional string tradeExchange = 4;
    if (has_tradeexchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tradeexchange());
    }

    // optional .NodeActiveTickProto.ATPrice tradePrice = 5;
    if (has_tradeprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tradeprice());
    }

    // optional int32 tradeSize = 6;
    if (has_tradesize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tradesize());
    }

    // optional .NodeActiveTickProto.ATTime tradeTime = 7;
    if (has_tradetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tradetime());
    }

  }
  // repeated string tradeConditionType = 3;
  total_size += 1 * this->tradeconditiontype_size();
  for (int i = 0; i < this->tradeconditiontype_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tradeconditiontype(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATQuoteStreamTradeUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATQuoteStreamTradeUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATQuoteStreamTradeUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATQuoteStreamTradeUpdate::MergeFrom(const ATQuoteStreamTradeUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  tradeconditiontype_.MergeFrom(from.tradeconditiontype_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tradesymbol()) {
      mutable_tradesymbol()->::NodeActiveTickProto::ATSymbol::MergeFrom(from.tradesymbol());
    }
    if (from.has_trademessageflags()) {
      set_trademessageflags(from.trademessageflags());
    }
    if (from.has_tradeexchange()) {
      set_tradeexchange(from.tradeexchange());
    }
    if (from.has_tradeprice()) {
      mutable_tradeprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.tradeprice());
    }
    if (from.has_tradesize()) {
      set_tradesize(from.tradesize());
    }
    if (from.has_tradetime()) {
      mutable_tradetime()->::NodeActiveTickProto::ATTime::MergeFrom(from.tradetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATQuoteStreamTradeUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATQuoteStreamTradeUpdate::CopyFrom(const ATQuoteStreamTradeUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATQuoteStreamTradeUpdate::IsInitialized() const {

  if (has_tradeprice()) {
    if (!this->tradeprice().IsInitialized()) return false;
  }
  return true;
}

void ATQuoteStreamTradeUpdate::Swap(ATQuoteStreamTradeUpdate* other) {
  if (other != this) {
    std::swap(tradesymbol_, other->tradesymbol_);
    std::swap(trademessageflags_, other->trademessageflags_);
    tradeconditiontype_.Swap(&other->tradeconditiontype_);
    std::swap(tradeexchange_, other->tradeexchange_);
    std::swap(tradeprice_, other->tradeprice_);
    std::swap(tradesize_, other->tradesize_);
    std::swap(tradetime_, other->tradetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATQuoteStreamTradeUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATQuoteStreamTradeUpdate_descriptor_;
  metadata.reflection = ATQuoteStreamTradeUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATQuoteStreamQuoteUpdate::kQuoteSymbolFieldNumber;
const int ATQuoteStreamQuoteUpdate::kQuoteConditionFieldNumber;
const int ATQuoteStreamQuoteUpdate::kQuoteBidExchangeFieldNumber;
const int ATQuoteStreamQuoteUpdate::kQuoteAskExchangeFieldNumber;
const int ATQuoteStreamQuoteUpdate::kQuoteBidPriceFieldNumber;
const int ATQuoteStreamQuoteUpdate::kQuoteAskPriceFieldNumber;
const int ATQuoteStreamQuoteUpdate::kQuoteBidSizeFieldNumber;
const int ATQuoteStreamQuoteUpdate::kQuoteAskSizeFieldNumber;
const int ATQuoteStreamQuoteUpdate::kQuoteTimeFieldNumber;
#endif  // !_MSC_VER

ATQuoteStreamQuoteUpdate::ATQuoteStreamQuoteUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ATQuoteStreamQuoteUpdate::InitAsDefaultInstance() {
  quotesymbol_ = const_cast< ::NodeActiveTickProto::ATSymbol*>(&::NodeActiveTickProto::ATSymbol::default_instance());
  quotebidprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  quoteaskprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  quotetime_ = const_cast< ::NodeActiveTickProto::ATTime*>(&::NodeActiveTickProto::ATTime::default_instance());
}

ATQuoteStreamQuoteUpdate::ATQuoteStreamQuoteUpdate(const ATQuoteStreamQuoteUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ATQuoteStreamQuoteUpdate::SharedCtor() {
  _cached_size_ = 0;
  quotesymbol_ = NULL;
  quotecondition_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quotebidexchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quoteaskexchange_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  quotebidprice_ = NULL;
  quoteaskprice_ = NULL;
  quotebidsize_ = 0;
  quoteasksize_ = 0;
  quotetime_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATQuoteStreamQuoteUpdate::~ATQuoteStreamQuoteUpdate() {
  SharedDtor();
}

void ATQuoteStreamQuoteUpdate::SharedDtor() {
  if (quotecondition_ != &::google::protobuf::internal::kEmptyString) {
    delete quotecondition_;
  }
  if (quotebidexchange_ != &::google::protobuf::internal::kEmptyString) {
    delete quotebidexchange_;
  }
  if (quoteaskexchange_ != &::google::protobuf::internal::kEmptyString) {
    delete quoteaskexchange_;
  }
  if (this != default_instance_) {
    delete quotesymbol_;
    delete quotebidprice_;
    delete quoteaskprice_;
    delete quotetime_;
  }
}

void ATQuoteStreamQuoteUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATQuoteStreamQuoteUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATQuoteStreamQuoteUpdate_descriptor_;
}

const ATQuoteStreamQuoteUpdate& ATQuoteStreamQuoteUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATQuoteStreamQuoteUpdate* ATQuoteStreamQuoteUpdate::default_instance_ = NULL;

ATQuoteStreamQuoteUpdate* ATQuoteStreamQuoteUpdate::New() const {
  return new ATQuoteStreamQuoteUpdate;
}

void ATQuoteStreamQuoteUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_quotesymbol()) {
      if (quotesymbol_ != NULL) quotesymbol_->::NodeActiveTickProto::ATSymbol::Clear();
    }
    if (has_quotecondition()) {
      if (quotecondition_ != &::google::protobuf::internal::kEmptyString) {
        quotecondition_->clear();
      }
    }
    if (has_quotebidexchange()) {
      if (quotebidexchange_ != &::google::protobuf::internal::kEmptyString) {
        quotebidexchange_->clear();
      }
    }
    if (has_quoteaskexchange()) {
      if (quoteaskexchange_ != &::google::protobuf::internal::kEmptyString) {
        quoteaskexchange_->clear();
      }
    }
    if (has_quotebidprice()) {
      if (quotebidprice_ != NULL) quotebidprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
    if (has_quoteaskprice()) {
      if (quoteaskprice_ != NULL) quoteaskprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
    quotebidsize_ = 0;
    quoteasksize_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_quotetime()) {
      if (quotetime_ != NULL) quotetime_->::NodeActiveTickProto::ATTime::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATQuoteStreamQuoteUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NodeActiveTickProto.ATSymbol quoteSymbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quotesymbol()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_quoteCondition;
        break;
      }

      // optional string quoteCondition = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quoteCondition:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quotecondition()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->quotecondition().data(), this->quotecondition().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_quoteBidExchange;
        break;
      }

      // optional string quoteBidExchange = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quoteBidExchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quotebidexchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->quotebidexchange().data(), this->quotebidexchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_quoteAskExchange;
        break;
      }

      // optional string quoteAskExchange = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quoteAskExchange:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_quoteaskexchange()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->quoteaskexchange().data(), this->quoteaskexchange().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_quoteBidPrice;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice quoteBidPrice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quoteBidPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quotebidprice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_quoteAskPrice;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice quoteAskPrice = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quoteAskPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quoteaskprice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_quoteBidSize;
        break;
      }

      // optional int32 quoteBidSize = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quoteBidSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quotebidsize_)));
          set_has_quotebidsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_quoteAskSize;
        break;
      }

      // optional int32 quoteAskSize = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quoteAskSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quoteasksize_)));
          set_has_quoteasksize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_quoteTime;
        break;
      }

      // optional .NodeActiveTickProto.ATTime quoteTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quoteTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quotetime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ATQuoteStreamQuoteUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NodeActiveTickProto.ATSymbol quoteSymbol = 1;
  if (has_quotesymbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->quotesymbol(), output);
  }

  // optional string quoteCondition = 2;
  if (has_quotecondition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quotecondition().data(), this->quotecondition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->quotecondition(), output);
  }

  // optional string quoteBidExchange = 3;
  if (has_quotebidexchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quotebidexchange().data(), this->quotebidexchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->quotebidexchange(), output);
  }

  // optional string quoteAskExchange = 4;
  if (has_quoteaskexchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quoteaskexchange().data(), this->quoteaskexchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->quoteaskexchange(), output);
  }

  // optional .NodeActiveTickProto.ATPrice quoteBidPrice = 5;
  if (has_quotebidprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->quotebidprice(), output);
  }

  // optional .NodeActiveTickProto.ATPrice quoteAskPrice = 6;
  if (has_quoteaskprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->quoteaskprice(), output);
  }

  // optional int32 quoteBidSize = 7;
  if (has_quotebidsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->quotebidsize(), output);
  }

  // optional int32 quoteAskSize = 8;
  if (has_quoteasksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->quoteasksize(), output);
  }

  // optional .NodeActiveTickProto.ATTime quoteTime = 9;
  if (has_quotetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->quotetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ATQuoteStreamQuoteUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NodeActiveTickProto.ATSymbol quoteSymbol = 1;
  if (has_quotesymbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->quotesymbol(), target);
  }

  // optional string quoteCondition = 2;
  if (has_quotecondition()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quotecondition().data(), this->quotecondition().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->quotecondition(), target);
  }

  // optional string quoteBidExchange = 3;
  if (has_quotebidexchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quotebidexchange().data(), this->quotebidexchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->quotebidexchange(), target);
  }

  // optional string quoteAskExchange = 4;
  if (has_quoteaskexchange()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->quoteaskexchange().data(), this->quoteaskexchange().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->quoteaskexchange(), target);
  }

  // optional .NodeActiveTickProto.ATPrice quoteBidPrice = 5;
  if (has_quotebidprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->quotebidprice(), target);
  }

  // optional .NodeActiveTickProto.ATPrice quoteAskPrice = 6;
  if (has_quoteaskprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->quoteaskprice(), target);
  }

  // optional int32 quoteBidSize = 7;
  if (has_quotebidsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->quotebidsize(), target);
  }

  // optional int32 quoteAskSize = 8;
  if (has_quoteasksize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->quoteasksize(), target);
  }

  // optional .NodeActiveTickProto.ATTime quoteTime = 9;
  if (has_quotetime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->quotetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ATQuoteStreamQuoteUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NodeActiveTickProto.ATSymbol quoteSymbol = 1;
    if (has_quotesymbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quotesymbol());
    }

    // optional string quoteCondition = 2;
    if (has_quotecondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quotecondition());
    }

    // optional string quoteBidExchange = 3;
    if (has_quotebidexchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quotebidexchange());
    }

    // optional string quoteAskExchange = 4;
    if (has_quoteaskexchange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->quoteaskexchange());
    }

    // optional .NodeActiveTickProto.ATPrice quoteBidPrice = 5;
    if (has_quotebidprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quotebidprice());
    }

    // optional .NodeActiveTickProto.ATPrice quoteAskPrice = 6;
    if (has_quoteaskprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quoteaskprice());
    }

    // optional int32 quoteBidSize = 7;
    if (has_quotebidsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quotebidsize());
    }

    // optional int32 quoteAskSize = 8;
    if (has_quoteasksize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quoteasksize());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .NodeActiveTickProto.ATTime quoteTime = 9;
    if (has_quotetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->quotetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATQuoteStreamQuoteUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATQuoteStreamQuoteUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATQuoteStreamQuoteUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATQuoteStreamQuoteUpdate::MergeFrom(const ATQuoteStreamQuoteUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_quotesymbol()) {
      mutable_quotesymbol()->::NodeActiveTickProto::ATSymbol::MergeFrom(from.quotesymbol());
    }
    if (from.has_quotecondition()) {
      set_quotecondition(from.quotecondition());
    }
    if (from.has_quotebidexchange()) {
      set_quotebidexchange(from.quotebidexchange());
    }
    if (from.has_quoteaskexchange()) {
      set_quoteaskexchange(from.quoteaskexchange());
    }
    if (from.has_quotebidprice()) {
      mutable_quotebidprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.quotebidprice());
    }
    if (from.has_quoteaskprice()) {
      mutable_quoteaskprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.quoteaskprice());
    }
    if (from.has_quotebidsize()) {
      set_quotebidsize(from.quotebidsize());
    }
    if (from.has_quoteasksize()) {
      set_quoteasksize(from.quoteasksize());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_quotetime()) {
      mutable_quotetime()->::NodeActiveTickProto::ATTime::MergeFrom(from.quotetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATQuoteStreamQuoteUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATQuoteStreamQuoteUpdate::CopyFrom(const ATQuoteStreamQuoteUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATQuoteStreamQuoteUpdate::IsInitialized() const {

  if (has_quotebidprice()) {
    if (!this->quotebidprice().IsInitialized()) return false;
  }
  if (has_quoteaskprice()) {
    if (!this->quoteaskprice().IsInitialized()) return false;
  }
  return true;
}

void ATQuoteStreamQuoteUpdate::Swap(ATQuoteStreamQuoteUpdate* other) {
  if (other != this) {
    std::swap(quotesymbol_, other->quotesymbol_);
    std::swap(quotecondition_, other->quotecondition_);
    std::swap(quotebidexchange_, other->quotebidexchange_);
    std::swap(quoteaskexchange_, other->quoteaskexchange_);
    std::swap(quotebidprice_, other->quotebidprice_);
    std::swap(quoteaskprice_, other->quoteaskprice_);
    std::swap(quotebidsize_, other->quotebidsize_);
    std::swap(quoteasksize_, other->quoteasksize_);
    std::swap(quotetime_, other->quotetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATQuoteStreamQuoteUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATQuoteStreamQuoteUpdate_descriptor_;
  metadata.reflection = ATQuoteStreamQuoteUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATQuoteStreamRefreshUpdate::kSymbolFieldNumber;
const int ATQuoteStreamRefreshUpdate::kLastPriceFieldNumber;
const int ATQuoteStreamRefreshUpdate::kOpenPriceFieldNumber;
const int ATQuoteStreamRefreshUpdate::kHighPriceFieldNumber;
const int ATQuoteStreamRefreshUpdate::kLowPriceFieldNumber;
const int ATQuoteStreamRefreshUpdate::kClosePriceFieldNumber;
const int ATQuoteStreamRefreshUpdate::kPrevClosePriceFieldNumber;
const int ATQuoteStreamRefreshUpdate::kAfterMarketClosePriceFieldNumber;
const int ATQuoteStreamRefreshUpdate::kBidPriceFieldNumber;
const int ATQuoteStreamRefreshUpdate::kAskPriceFieldNumber;
const int ATQuoteStreamRefreshUpdate::kBidSizeFieldNumber;
const int ATQuoteStreamRefreshUpdate::kAskSizeFieldNumber;
const int ATQuoteStreamRefreshUpdate::kLastSizeFieldNumber;
const int ATQuoteStreamRefreshUpdate::kVolumeFieldNumber;
#endif  // !_MSC_VER

ATQuoteStreamRefreshUpdate::ATQuoteStreamRefreshUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ATQuoteStreamRefreshUpdate::InitAsDefaultInstance() {
  symbol_ = const_cast< ::NodeActiveTickProto::ATSymbol*>(&::NodeActiveTickProto::ATSymbol::default_instance());
  lastprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  openprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  highprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  lowprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  closeprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  prevcloseprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  aftermarketcloseprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  bidprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  askprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
}

ATQuoteStreamRefreshUpdate::ATQuoteStreamRefreshUpdate(const ATQuoteStreamRefreshUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ATQuoteStreamRefreshUpdate::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = NULL;
  lastprice_ = NULL;
  openprice_ = NULL;
  highprice_ = NULL;
  lowprice_ = NULL;
  closeprice_ = NULL;
  prevcloseprice_ = NULL;
  aftermarketcloseprice_ = NULL;
  bidprice_ = NULL;
  askprice_ = NULL;
  bidsize_ = 0;
  asksize_ = 0;
  lastsize_ = 0;
  volume_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATQuoteStreamRefreshUpdate::~ATQuoteStreamRefreshUpdate() {
  SharedDtor();
}

void ATQuoteStreamRefreshUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete symbol_;
    delete lastprice_;
    delete openprice_;
    delete highprice_;
    delete lowprice_;
    delete closeprice_;
    delete prevcloseprice_;
    delete aftermarketcloseprice_;
    delete bidprice_;
    delete askprice_;
  }
}

void ATQuoteStreamRefreshUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATQuoteStreamRefreshUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATQuoteStreamRefreshUpdate_descriptor_;
}

const ATQuoteStreamRefreshUpdate& ATQuoteStreamRefreshUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATQuoteStreamRefreshUpdate* ATQuoteStreamRefreshUpdate::default_instance_ = NULL;

ATQuoteStreamRefreshUpdate* ATQuoteStreamRefreshUpdate::New() const {
  return new ATQuoteStreamRefreshUpdate;
}

void ATQuoteStreamRefreshUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != NULL) symbol_->::NodeActiveTickProto::ATSymbol::Clear();
    }
    if (has_lastprice()) {
      if (lastprice_ != NULL) lastprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
    if (has_openprice()) {
      if (openprice_ != NULL) openprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
    if (has_highprice()) {
      if (highprice_ != NULL) highprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
    if (has_lowprice()) {
      if (lowprice_ != NULL) lowprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
    if (has_closeprice()) {
      if (closeprice_ != NULL) closeprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
    if (has_prevcloseprice()) {
      if (prevcloseprice_ != NULL) prevcloseprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
    if (has_aftermarketcloseprice()) {
      if (aftermarketcloseprice_ != NULL) aftermarketcloseprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_bidprice()) {
      if (bidprice_ != NULL) bidprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
    if (has_askprice()) {
      if (askprice_ != NULL) askprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
    bidsize_ = 0;
    asksize_ = 0;
    lastsize_ = 0;
    volume_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATQuoteStreamRefreshUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NodeActiveTickProto.ATSymbol symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_symbol()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lastPrice;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice lastPrice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lastprice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_openPrice;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice openPrice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_openprice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_highPrice;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice highPrice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_highPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_highprice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_lowPrice;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice lowPrice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lowPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lowprice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_closePrice;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice closePrice = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_closePrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_closeprice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_prevClosePrice;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice prevClosePrice = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prevClosePrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prevcloseprice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_afterMarketClosePrice;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice afterMarketClosePrice = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_afterMarketClosePrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aftermarketcloseprice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_bidPrice;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice bidPrice = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bidPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bidprice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_askPrice;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice askPrice = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_askPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_askprice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_bidSize;
        break;
      }

      // optional int32 bidSize = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bidSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidsize_)));
          set_has_bidsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_askSize;
        break;
      }

      // optional int32 askSize = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_askSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &asksize_)));
          set_has_asksize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_lastSize;
        break;
      }

      // optional int32 lastSize = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastsize_)));
          set_has_lastsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_volume;
        break;
      }

      // optional int64 volume = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ATQuoteStreamRefreshUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NodeActiveTickProto.ATSymbol symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->symbol(), output);
  }

  // optional .NodeActiveTickProto.ATPrice lastPrice = 2;
  if (has_lastprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lastprice(), output);
  }

  // optional .NodeActiveTickProto.ATPrice openPrice = 3;
  if (has_openprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->openprice(), output);
  }

  // optional .NodeActiveTickProto.ATPrice highPrice = 4;
  if (has_highprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->highprice(), output);
  }

  // optional .NodeActiveTickProto.ATPrice lowPrice = 5;
  if (has_lowprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->lowprice(), output);
  }

  // optional .NodeActiveTickProto.ATPrice closePrice = 6;
  if (has_closeprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->closeprice(), output);
  }

  // optional .NodeActiveTickProto.ATPrice prevClosePrice = 7;
  if (has_prevcloseprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->prevcloseprice(), output);
  }

  // optional .NodeActiveTickProto.ATPrice afterMarketClosePrice = 8;
  if (has_aftermarketcloseprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->aftermarketcloseprice(), output);
  }

  // optional .NodeActiveTickProto.ATPrice bidPrice = 9;
  if (has_bidprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->bidprice(), output);
  }

  // optional .NodeActiveTickProto.ATPrice askPrice = 10;
  if (has_askprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->askprice(), output);
  }

  // optional int32 bidSize = 11;
  if (has_bidsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->bidsize(), output);
  }

  // optional int32 askSize = 12;
  if (has_asksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->asksize(), output);
  }

  // optional int32 lastSize = 13;
  if (has_lastsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->lastsize(), output);
  }

  // optional int64 volume = 14;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->volume(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ATQuoteStreamRefreshUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NodeActiveTickProto.ATSymbol symbol = 1;
  if (has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->symbol(), target);
  }

  // optional .NodeActiveTickProto.ATPrice lastPrice = 2;
  if (has_lastprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lastprice(), target);
  }

  // optional .NodeActiveTickProto.ATPrice openPrice = 3;
  if (has_openprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->openprice(), target);
  }

  // optional .NodeActiveTickProto.ATPrice highPrice = 4;
  if (has_highprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->highprice(), target);
  }

  // optional .NodeActiveTickProto.ATPrice lowPrice = 5;
  if (has_lowprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->lowprice(), target);
  }

  // optional .NodeActiveTickProto.ATPrice closePrice = 6;
  if (has_closeprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->closeprice(), target);
  }

  // optional .NodeActiveTickProto.ATPrice prevClosePrice = 7;
  if (has_prevcloseprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->prevcloseprice(), target);
  }

  // optional .NodeActiveTickProto.ATPrice afterMarketClosePrice = 8;
  if (has_aftermarketcloseprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->aftermarketcloseprice(), target);
  }

  // optional .NodeActiveTickProto.ATPrice bidPrice = 9;
  if (has_bidprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->bidprice(), target);
  }

  // optional .NodeActiveTickProto.ATPrice askPrice = 10;
  if (has_askprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->askprice(), target);
  }

  // optional int32 bidSize = 11;
  if (has_bidsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->bidsize(), target);
  }

  // optional int32 askSize = 12;
  if (has_asksize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->asksize(), target);
  }

  // optional int32 lastSize = 13;
  if (has_lastsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->lastsize(), target);
  }

  // optional int64 volume = 14;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->volume(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ATQuoteStreamRefreshUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NodeActiveTickProto.ATSymbol symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->symbol());
    }

    // optional .NodeActiveTickProto.ATPrice lastPrice = 2;
    if (has_lastprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lastprice());
    }

    // optional .NodeActiveTickProto.ATPrice openPrice = 3;
    if (has_openprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->openprice());
    }

    // optional .NodeActiveTickProto.ATPrice highPrice = 4;
    if (has_highprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->highprice());
    }

    // optional .NodeActiveTickProto.ATPrice lowPrice = 5;
    if (has_lowprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lowprice());
    }

    // optional .NodeActiveTickProto.ATPrice closePrice = 6;
    if (has_closeprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->closeprice());
    }

    // optional .NodeActiveTickProto.ATPrice prevClosePrice = 7;
    if (has_prevcloseprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prevcloseprice());
    }

    // optional .NodeActiveTickProto.ATPrice afterMarketClosePrice = 8;
    if (has_aftermarketcloseprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aftermarketcloseprice());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .NodeActiveTickProto.ATPrice bidPrice = 9;
    if (has_bidprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bidprice());
    }

    // optional .NodeActiveTickProto.ATPrice askPrice = 10;
    if (has_askprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->askprice());
    }

    // optional int32 bidSize = 11;
    if (has_bidsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidsize());
    }

    // optional int32 askSize = 12;
    if (has_asksize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->asksize());
    }

    // optional int32 lastSize = 13;
    if (has_lastsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastsize());
    }

    // optional int64 volume = 14;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->volume());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATQuoteStreamRefreshUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATQuoteStreamRefreshUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATQuoteStreamRefreshUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATQuoteStreamRefreshUpdate::MergeFrom(const ATQuoteStreamRefreshUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      mutable_symbol()->::NodeActiveTickProto::ATSymbol::MergeFrom(from.symbol());
    }
    if (from.has_lastprice()) {
      mutable_lastprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.lastprice());
    }
    if (from.has_openprice()) {
      mutable_openprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.openprice());
    }
    if (from.has_highprice()) {
      mutable_highprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.highprice());
    }
    if (from.has_lowprice()) {
      mutable_lowprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.lowprice());
    }
    if (from.has_closeprice()) {
      mutable_closeprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.closeprice());
    }
    if (from.has_prevcloseprice()) {
      mutable_prevcloseprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.prevcloseprice());
    }
    if (from.has_aftermarketcloseprice()) {
      mutable_aftermarketcloseprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.aftermarketcloseprice());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bidprice()) {
      mutable_bidprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.bidprice());
    }
    if (from.has_askprice()) {
      mutable_askprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.askprice());
    }
    if (from.has_bidsize()) {
      set_bidsize(from.bidsize());
    }
    if (from.has_asksize()) {
      set_asksize(from.asksize());
    }
    if (from.has_lastsize()) {
      set_lastsize(from.lastsize());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATQuoteStreamRefreshUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATQuoteStreamRefreshUpdate::CopyFrom(const ATQuoteStreamRefreshUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATQuoteStreamRefreshUpdate::IsInitialized() const {

  if (has_lastprice()) {
    if (!this->lastprice().IsInitialized()) return false;
  }
  if (has_openprice()) {
    if (!this->openprice().IsInitialized()) return false;
  }
  if (has_highprice()) {
    if (!this->highprice().IsInitialized()) return false;
  }
  if (has_lowprice()) {
    if (!this->lowprice().IsInitialized()) return false;
  }
  if (has_closeprice()) {
    if (!this->closeprice().IsInitialized()) return false;
  }
  if (has_prevcloseprice()) {
    if (!this->prevcloseprice().IsInitialized()) return false;
  }
  if (has_aftermarketcloseprice()) {
    if (!this->aftermarketcloseprice().IsInitialized()) return false;
  }
  if (has_bidprice()) {
    if (!this->bidprice().IsInitialized()) return false;
  }
  if (has_askprice()) {
    if (!this->askprice().IsInitialized()) return false;
  }
  return true;
}

void ATQuoteStreamRefreshUpdate::Swap(ATQuoteStreamRefreshUpdate* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(lastprice_, other->lastprice_);
    std::swap(openprice_, other->openprice_);
    std::swap(highprice_, other->highprice_);
    std::swap(lowprice_, other->lowprice_);
    std::swap(closeprice_, other->closeprice_);
    std::swap(prevcloseprice_, other->prevcloseprice_);
    std::swap(aftermarketcloseprice_, other->aftermarketcloseprice_);
    std::swap(bidprice_, other->bidprice_);
    std::swap(askprice_, other->askprice_);
    std::swap(bidsize_, other->bidsize_);
    std::swap(asksize_, other->asksize_);
    std::swap(lastsize_, other->lastsize_);
    std::swap(volume_, other->volume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATQuoteStreamRefreshUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATQuoteStreamRefreshUpdate_descriptor_;
  metadata.reflection = ATQuoteStreamRefreshUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATMarketMoversStreamUpdate::kMarketMoversFieldNumber;
const int ATMarketMoversStreamUpdate::kLastUpdatedTimeFieldNumber;
#endif  // !_MSC_VER

ATMarketMoversStreamUpdate::ATMarketMoversStreamUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ATMarketMoversStreamUpdate::InitAsDefaultInstance() {
  marketmovers_ = const_cast< ::NodeActiveTickProto::ATMarketMoversRecord*>(&::NodeActiveTickProto::ATMarketMoversRecord::default_instance());
  lastupdatedtime_ = const_cast< ::NodeActiveTickProto::ATTime*>(&::NodeActiveTickProto::ATTime::default_instance());
}

ATMarketMoversStreamUpdate::ATMarketMoversStreamUpdate(const ATMarketMoversStreamUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ATMarketMoversStreamUpdate::SharedCtor() {
  _cached_size_ = 0;
  marketmovers_ = NULL;
  lastupdatedtime_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATMarketMoversStreamUpdate::~ATMarketMoversStreamUpdate() {
  SharedDtor();
}

void ATMarketMoversStreamUpdate::SharedDtor() {
  if (this != default_instance_) {
    delete marketmovers_;
    delete lastupdatedtime_;
  }
}

void ATMarketMoversStreamUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATMarketMoversStreamUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATMarketMoversStreamUpdate_descriptor_;
}

const ATMarketMoversStreamUpdate& ATMarketMoversStreamUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATMarketMoversStreamUpdate* ATMarketMoversStreamUpdate::default_instance_ = NULL;

ATMarketMoversStreamUpdate* ATMarketMoversStreamUpdate::New() const {
  return new ATMarketMoversStreamUpdate;
}

void ATMarketMoversStreamUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_marketmovers()) {
      if (marketmovers_ != NULL) marketmovers_->::NodeActiveTickProto::ATMarketMoversRecord::Clear();
    }
    if (has_lastupdatedtime()) {
      if (lastupdatedtime_ != NULL) lastupdatedtime_->::NodeActiveTickProto::ATTime::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATMarketMoversStreamUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NodeActiveTickProto.ATMarketMoversRecord marketMovers = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_marketmovers()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lastUpdatedTime;
        break;
      }

      // optional .NodeActiveTickProto.ATTime lastUpdatedTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastUpdatedTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lastupdatedtime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ATMarketMoversStreamUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NodeActiveTickProto.ATMarketMoversRecord marketMovers = 1;
  if (has_marketmovers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->marketmovers(), output);
  }

  // optional .NodeActiveTickProto.ATTime lastUpdatedTime = 2;
  if (has_lastupdatedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lastupdatedtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ATMarketMoversStreamUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NodeActiveTickProto.ATMarketMoversRecord marketMovers = 1;
  if (has_marketmovers()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->marketmovers(), target);
  }

  // optional .NodeActiveTickProto.ATTime lastUpdatedTime = 2;
  if (has_lastupdatedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lastupdatedtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ATMarketMoversStreamUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NodeActiveTickProto.ATMarketMoversRecord marketMovers = 1;
    if (has_marketmovers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->marketmovers());
    }

    // optional .NodeActiveTickProto.ATTime lastUpdatedTime = 2;
    if (has_lastupdatedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lastupdatedtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATMarketMoversStreamUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATMarketMoversStreamUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATMarketMoversStreamUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATMarketMoversStreamUpdate::MergeFrom(const ATMarketMoversStreamUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marketmovers()) {
      mutable_marketmovers()->::NodeActiveTickProto::ATMarketMoversRecord::MergeFrom(from.marketmovers());
    }
    if (from.has_lastupdatedtime()) {
      mutable_lastupdatedtime()->::NodeActiveTickProto::ATTime::MergeFrom(from.lastupdatedtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATMarketMoversStreamUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATMarketMoversStreamUpdate::CopyFrom(const ATMarketMoversStreamUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATMarketMoversStreamUpdate::IsInitialized() const {

  if (has_marketmovers()) {
    if (!this->marketmovers().IsInitialized()) return false;
  }
  return true;
}

void ATMarketMoversStreamUpdate::Swap(ATMarketMoversStreamUpdate* other) {
  if (other != this) {
    std::swap(marketmovers_, other->marketmovers_);
    std::swap(lastupdatedtime_, other->lastupdatedtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATMarketMoversStreamUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATMarketMoversStreamUpdate_descriptor_;
  metadata.reflection = ATMarketMoversStreamUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATMarketMoversRecord::kSymbolFieldNumber;
const int ATMarketMoversRecord::kStatusFieldNumber;
const int ATMarketMoversRecord::kItemFieldNumber;
#endif  // !_MSC_VER

ATMarketMoversRecord::ATMarketMoversRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ATMarketMoversRecord::InitAsDefaultInstance() {
  symbol_ = const_cast< ::NodeActiveTickProto::ATSymbol*>(&::NodeActiveTickProto::ATSymbol::default_instance());
}

ATMarketMoversRecord::ATMarketMoversRecord(const ATMarketMoversRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ATMarketMoversRecord::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = NULL;
  status_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATMarketMoversRecord::~ATMarketMoversRecord() {
  SharedDtor();
}

void ATMarketMoversRecord::SharedDtor() {
  if (status_ != &::google::protobuf::internal::kEmptyString) {
    delete status_;
  }
  if (this != default_instance_) {
    delete symbol_;
  }
}

void ATMarketMoversRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATMarketMoversRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATMarketMoversRecord_descriptor_;
}

const ATMarketMoversRecord& ATMarketMoversRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATMarketMoversRecord* ATMarketMoversRecord::default_instance_ = NULL;

ATMarketMoversRecord* ATMarketMoversRecord::New() const {
  return new ATMarketMoversRecord;
}

void ATMarketMoversRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != NULL) symbol_->::NodeActiveTickProto::ATSymbol::Clear();
    }
    if (has_status()) {
      if (status_ != &::google::protobuf::internal::kEmptyString) {
        status_->clear();
      }
    }
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATMarketMoversRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NodeActiveTickProto.ATSymbol symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_symbol()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_status;
        break;
      }

      // optional string status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->status().data(), this->status().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // repeated .NodeActiveTickProto.ATMarketMoversItem item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ATMarketMoversRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NodeActiveTickProto.ATSymbol symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->symbol(), output);
  }

  // optional string status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->status(), output);
  }

  // repeated .NodeActiveTickProto.ATMarketMoversItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ATMarketMoversRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NodeActiveTickProto.ATSymbol symbol = 1;
  if (has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->symbol(), target);
  }

  // optional string status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->status().data(), this->status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->status(), target);
  }

  // repeated .NodeActiveTickProto.ATMarketMoversItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ATMarketMoversRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NodeActiveTickProto.ATSymbol symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->symbol());
    }

    // optional string status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->status());
    }

  }
  // repeated .NodeActiveTickProto.ATMarketMoversItem item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATMarketMoversRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATMarketMoversRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATMarketMoversRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATMarketMoversRecord::MergeFrom(const ATMarketMoversRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      mutable_symbol()->::NodeActiveTickProto::ATSymbol::MergeFrom(from.symbol());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATMarketMoversRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATMarketMoversRecord::CopyFrom(const ATMarketMoversRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATMarketMoversRecord::IsInitialized() const {

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void ATMarketMoversRecord::Swap(ATMarketMoversRecord* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(status_, other->status_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATMarketMoversRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATMarketMoversRecord_descriptor_;
  metadata.reflection = ATMarketMoversRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATMarketMoversItem::kSymbolFieldNumber;
const int ATMarketMoversItem::kNameFieldNumber;
const int ATMarketMoversItem::kLastPriceFieldNumber;
const int ATMarketMoversItem::kClosePriceFieldNumber;
const int ATMarketMoversItem::kVolumeFieldNumber;
const int ATMarketMoversItem::kLastDateTimeFieldNumber;
#endif  // !_MSC_VER

ATMarketMoversItem::ATMarketMoversItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ATMarketMoversItem::InitAsDefaultInstance() {
  symbol_ = const_cast< ::NodeActiveTickProto::ATSymbol*>(&::NodeActiveTickProto::ATSymbol::default_instance());
  lastprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  closeprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  lastdatetime_ = const_cast< ::NodeActiveTickProto::ATTime*>(&::NodeActiveTickProto::ATTime::default_instance());
}

ATMarketMoversItem::ATMarketMoversItem(const ATMarketMoversItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ATMarketMoversItem::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = NULL;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lastprice_ = NULL;
  closeprice_ = NULL;
  volume_ = 0;
  lastdatetime_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATMarketMoversItem::~ATMarketMoversItem() {
  SharedDtor();
}

void ATMarketMoversItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete symbol_;
    delete lastprice_;
    delete closeprice_;
    delete lastdatetime_;
  }
}

void ATMarketMoversItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATMarketMoversItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATMarketMoversItem_descriptor_;
}

const ATMarketMoversItem& ATMarketMoversItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATMarketMoversItem* ATMarketMoversItem::default_instance_ = NULL;

ATMarketMoversItem* ATMarketMoversItem::New() const {
  return new ATMarketMoversItem;
}

void ATMarketMoversItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != NULL) symbol_->::NodeActiveTickProto::ATSymbol::Clear();
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_lastprice()) {
      if (lastprice_ != NULL) lastprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
    if (has_closeprice()) {
      if (closeprice_ != NULL) closeprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
    volume_ = 0;
    if (has_lastdatetime()) {
      if (lastdatetime_ != NULL) lastdatetime_->::NodeActiveTickProto::ATTime::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATMarketMoversItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NodeActiveTickProto.ATSymbol symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_symbol()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_lastPrice;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice lastPrice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lastprice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_closePrice;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice closePrice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_closePrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_closeprice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_volume;
        break;
      }

      // optional int32 volume = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_lastDateTime;
        break;
      }

      // optional .NodeActiveTickProto.ATTime lastDateTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastDateTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lastdatetime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ATMarketMoversItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NodeActiveTickProto.ATSymbol symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->symbol(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional .NodeActiveTickProto.ATPrice lastPrice = 3;
  if (has_lastprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lastprice(), output);
  }

  // optional .NodeActiveTickProto.ATPrice closePrice = 4;
  if (has_closeprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->closeprice(), output);
  }

  // optional int32 volume = 5;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->volume(), output);
  }

  // optional .NodeActiveTickProto.ATTime lastDateTime = 6;
  if (has_lastdatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->lastdatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ATMarketMoversItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NodeActiveTickProto.ATSymbol symbol = 1;
  if (has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->symbol(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .NodeActiveTickProto.ATPrice lastPrice = 3;
  if (has_lastprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->lastprice(), target);
  }

  // optional .NodeActiveTickProto.ATPrice closePrice = 4;
  if (has_closeprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->closeprice(), target);
  }

  // optional int32 volume = 5;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->volume(), target);
  }

  // optional .NodeActiveTickProto.ATTime lastDateTime = 6;
  if (has_lastdatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->lastdatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ATMarketMoversItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NodeActiveTickProto.ATSymbol symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->symbol());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .NodeActiveTickProto.ATPrice lastPrice = 3;
    if (has_lastprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lastprice());
    }

    // optional .NodeActiveTickProto.ATPrice closePrice = 4;
    if (has_closeprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->closeprice());
    }

    // optional int32 volume = 5;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->volume());
    }

    // optional .NodeActiveTickProto.ATTime lastDateTime = 6;
    if (has_lastdatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lastdatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATMarketMoversItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATMarketMoversItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATMarketMoversItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATMarketMoversItem::MergeFrom(const ATMarketMoversItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      mutable_symbol()->::NodeActiveTickProto::ATSymbol::MergeFrom(from.symbol());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_lastprice()) {
      mutable_lastprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.lastprice());
    }
    if (from.has_closeprice()) {
      mutable_closeprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.closeprice());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_lastdatetime()) {
      mutable_lastdatetime()->::NodeActiveTickProto::ATTime::MergeFrom(from.lastdatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATMarketMoversItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATMarketMoversItem::CopyFrom(const ATMarketMoversItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATMarketMoversItem::IsInitialized() const {

  if (has_lastprice()) {
    if (!this->lastprice().IsInitialized()) return false;
  }
  if (has_closeprice()) {
    if (!this->closeprice().IsInitialized()) return false;
  }
  return true;
}

void ATMarketMoversItem::Swap(ATMarketMoversItem* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(name_, other->name_);
    std::swap(lastprice_, other->lastprice_);
    std::swap(closeprice_, other->closeprice_);
    std::swap(volume_, other->volume_);
    std::swap(lastdatetime_, other->lastdatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATMarketMoversItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATMarketMoversItem_descriptor_;
  metadata.reflection = ATMarketMoversItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATSymbol::kSymbolFieldNumber;
const int ATSymbol::kSymbolTypeFieldNumber;
const int ATSymbol::kExchangeTypeFieldNumber;
const int ATSymbol::kCountryTypeFieldNumber;
#endif  // !_MSC_VER

ATSymbol::ATSymbol()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ATSymbol::InitAsDefaultInstance() {
}

ATSymbol::ATSymbol(const ATSymbol& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ATSymbol::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  symboltype_ = 0;
  exchangetype_ = 0;
  countrytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATSymbol::~ATSymbol() {
  SharedDtor();
}

void ATSymbol::SharedDtor() {
  if (symbol_ != &::google::protobuf::internal::kEmptyString) {
    delete symbol_;
  }
  if (this != default_instance_) {
  }
}

void ATSymbol::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATSymbol::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATSymbol_descriptor_;
}

const ATSymbol& ATSymbol::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATSymbol* ATSymbol::default_instance_ = NULL;

ATSymbol* ATSymbol::New() const {
  return new ATSymbol;
}

void ATSymbol::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != &::google::protobuf::internal::kEmptyString) {
        symbol_->clear();
      }
    }
    symboltype_ = 0;
    exchangetype_ = 0;
    countrytype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATSymbol::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_symbol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->symbol().data(), this->symbol().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_symbolType;
        break;
      }

      // optional int32 symbolType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_symbolType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &symboltype_)));
          set_has_symboltype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exchangeType;
        break;
      }

      // optional int32 exchangeType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exchangeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exchangetype_)));
          set_has_exchangetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_countryType;
        break;
      }

      // optional int32 countryType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countryType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countrytype_)));
          set_has_countrytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ATSymbol::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->symbol(), output);
  }

  // optional int32 symbolType = 2;
  if (has_symboltype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->symboltype(), output);
  }

  // optional int32 exchangeType = 3;
  if (has_exchangetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exchangetype(), output);
  }

  // optional int32 countryType = 4;
  if (has_countrytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->countrytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ATSymbol::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->symbol().data(), this->symbol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->symbol(), target);
  }

  // optional int32 symbolType = 2;
  if (has_symboltype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->symboltype(), target);
  }

  // optional int32 exchangeType = 3;
  if (has_exchangetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exchangetype(), target);
  }

  // optional int32 countryType = 4;
  if (has_countrytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->countrytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ATSymbol::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->symbol());
    }

    // optional int32 symbolType = 2;
    if (has_symboltype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->symboltype());
    }

    // optional int32 exchangeType = 3;
    if (has_exchangetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exchangetype());
    }

    // optional int32 countryType = 4;
    if (has_countrytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countrytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATSymbol::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATSymbol* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATSymbol*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATSymbol::MergeFrom(const ATSymbol& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      set_symbol(from.symbol());
    }
    if (from.has_symboltype()) {
      set_symboltype(from.symboltype());
    }
    if (from.has_exchangetype()) {
      set_exchangetype(from.exchangetype());
    }
    if (from.has_countrytype()) {
      set_countrytype(from.countrytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATSymbol::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATSymbol::CopyFrom(const ATSymbol& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATSymbol::IsInitialized() const {

  return true;
}

void ATSymbol::Swap(ATSymbol* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(symboltype_, other->symboltype_);
    std::swap(exchangetype_, other->exchangetype_);
    std::swap(countrytype_, other->countrytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATSymbol::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATSymbol_descriptor_;
  metadata.reflection = ATSymbol_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATPrice::kPriceFieldNumber;
const int ATPrice::kPrecisionFieldNumber;
#endif  // !_MSC_VER

ATPrice::ATPrice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ATPrice::InitAsDefaultInstance() {
}

ATPrice::ATPrice(const ATPrice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ATPrice::SharedCtor() {
  _cached_size_ = 0;
  price_ = 0;
  precision_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATPrice::~ATPrice() {
  SharedDtor();
}

void ATPrice::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ATPrice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATPrice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATPrice_descriptor_;
}

const ATPrice& ATPrice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATPrice* ATPrice::default_instance_ = NULL;

ATPrice* ATPrice::New() const {
  return new ATPrice;
}

void ATPrice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    price_ = 0;
    precision_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATPrice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double price = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_precision;
        break;
      }

      // required int32 precision = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precision_)));
          set_has_precision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ATPrice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required double price = 1;
  if (has_price()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->price(), output);
  }

  // required int32 precision = 2;
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->precision(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ATPrice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required double price = 1;
  if (has_price()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->price(), target);
  }

  // required int32 precision = 2;
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->precision(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ATPrice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double price = 1;
    if (has_price()) {
      total_size += 1 + 8;
    }

    // required int32 precision = 2;
    if (has_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->precision());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATPrice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATPrice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATPrice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATPrice::MergeFrom(const ATPrice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_precision()) {
      set_precision(from.precision());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATPrice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATPrice::CopyFrom(const ATPrice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATPrice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ATPrice::Swap(ATPrice* other) {
  if (other != this) {
    std::swap(price_, other->price_);
    std::swap(precision_, other->precision_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATPrice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATPrice_descriptor_;
  metadata.reflection = ATPrice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATQuote::kSymbolFieldNumber;
const int ATQuote::kBidPriceFieldNumber;
const int ATQuote::kAskPriceFieldNumber;
const int ATQuote::kBidSizeFieldNumber;
const int ATQuote::kAskSizeFieldNumber;
const int ATQuote::kQuoteConditionIdFieldNumber;
const int ATQuote::kServerTimeFieldNumber;
const int ATQuote::kBidExchangeIdFieldNumber;
const int ATQuote::kAskExchangeIdFieldNumber;
#endif  // !_MSC_VER

ATQuote::ATQuote()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ATQuote::InitAsDefaultInstance() {
  symbol_ = const_cast< ::NodeActiveTickProto::ATSymbol*>(&::NodeActiveTickProto::ATSymbol::default_instance());
  bidprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  askprice_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  servertime_ = const_cast< ::NodeActiveTickProto::ATTime*>(&::NodeActiveTickProto::ATTime::default_instance());
}

ATQuote::ATQuote(const ATQuote& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ATQuote::SharedCtor() {
  _cached_size_ = 0;
  symbol_ = NULL;
  bidprice_ = NULL;
  askprice_ = NULL;
  bidsize_ = 0;
  asksize_ = 0;
  quoteconditionid_ = 0;
  servertime_ = NULL;
  bidexchangeid_ = 0;
  askexchangeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATQuote::~ATQuote() {
  SharedDtor();
}

void ATQuote::SharedDtor() {
  if (this != default_instance_) {
    delete symbol_;
    delete bidprice_;
    delete askprice_;
    delete servertime_;
  }
}

void ATQuote::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATQuote::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATQuote_descriptor_;
}

const ATQuote& ATQuote::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATQuote* ATQuote::default_instance_ = NULL;

ATQuote* ATQuote::New() const {
  return new ATQuote;
}

void ATQuote::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_symbol()) {
      if (symbol_ != NULL) symbol_->::NodeActiveTickProto::ATSymbol::Clear();
    }
    if (has_bidprice()) {
      if (bidprice_ != NULL) bidprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
    if (has_askprice()) {
      if (askprice_ != NULL) askprice_->::NodeActiveTickProto::ATPrice::Clear();
    }
    bidsize_ = 0;
    asksize_ = 0;
    quoteconditionid_ = 0;
    if (has_servertime()) {
      if (servertime_ != NULL) servertime_->::NodeActiveTickProto::ATTime::Clear();
    }
    bidexchangeid_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    askexchangeid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATQuote::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .NodeActiveTickProto.ATSymbol symbol = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_symbol()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bidPrice;
        break;
      }

      // required .NodeActiveTickProto.ATPrice bidPrice = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bidPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bidprice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_askPrice;
        break;
      }

      // required .NodeActiveTickProto.ATPrice askPrice = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_askPrice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_askprice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_bidSize;
        break;
      }

      // optional int32 bidSize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bidSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidsize_)));
          set_has_bidsize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_askSize;
        break;
      }

      // optional int32 askSize = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_askSize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &asksize_)));
          set_has_asksize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_quoteConditionId;
        break;
      }

      // optional int32 quoteConditionId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quoteConditionId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quoteconditionid_)));
          set_has_quoteconditionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_serverTime;
        break;
      }

      // optional .NodeActiveTickProto.ATTime serverTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_serverTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_servertime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bidExchangeId;
        break;
      }

      // optional int32 bidExchangeId = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bidExchangeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bidexchangeid_)));
          set_has_bidexchangeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_askExchangeId;
        break;
      }

      // optional int32 askExchangeId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_askExchangeId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &askexchangeid_)));
          set_has_askexchangeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ATQuote::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .NodeActiveTickProto.ATSymbol symbol = 1;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->symbol(), output);
  }

  // required .NodeActiveTickProto.ATPrice bidPrice = 2;
  if (has_bidprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bidprice(), output);
  }

  // required .NodeActiveTickProto.ATPrice askPrice = 3;
  if (has_askprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->askprice(), output);
  }

  // optional int32 bidSize = 4;
  if (has_bidsize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bidsize(), output);
  }

  // optional int32 askSize = 5;
  if (has_asksize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->asksize(), output);
  }

  // optional int32 quoteConditionId = 6;
  if (has_quoteconditionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->quoteconditionid(), output);
  }

  // optional .NodeActiveTickProto.ATTime serverTime = 7;
  if (has_servertime()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->servertime(), output);
  }

  // optional int32 bidExchangeId = 8;
  if (has_bidexchangeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bidexchangeid(), output);
  }

  // optional int32 askExchangeId = 9;
  if (has_askexchangeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->askexchangeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ATQuote::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .NodeActiveTickProto.ATSymbol symbol = 1;
  if (has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->symbol(), target);
  }

  // required .NodeActiveTickProto.ATPrice bidPrice = 2;
  if (has_bidprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bidprice(), target);
  }

  // required .NodeActiveTickProto.ATPrice askPrice = 3;
  if (has_askprice()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->askprice(), target);
  }

  // optional int32 bidSize = 4;
  if (has_bidsize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->bidsize(), target);
  }

  // optional int32 askSize = 5;
  if (has_asksize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->asksize(), target);
  }

  // optional int32 quoteConditionId = 6;
  if (has_quoteconditionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->quoteconditionid(), target);
  }

  // optional .NodeActiveTickProto.ATTime serverTime = 7;
  if (has_servertime()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->servertime(), target);
  }

  // optional int32 bidExchangeId = 8;
  if (has_bidexchangeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bidexchangeid(), target);
  }

  // optional int32 askExchangeId = 9;
  if (has_askexchangeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->askexchangeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ATQuote::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .NodeActiveTickProto.ATSymbol symbol = 1;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->symbol());
    }

    // required .NodeActiveTickProto.ATPrice bidPrice = 2;
    if (has_bidprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bidprice());
    }

    // required .NodeActiveTickProto.ATPrice askPrice = 3;
    if (has_askprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->askprice());
    }

    // optional int32 bidSize = 4;
    if (has_bidsize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidsize());
    }

    // optional int32 askSize = 5;
    if (has_asksize()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->asksize());
    }

    // optional int32 quoteConditionId = 6;
    if (has_quoteconditionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quoteconditionid());
    }

    // optional .NodeActiveTickProto.ATTime serverTime = 7;
    if (has_servertime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->servertime());
    }

    // optional int32 bidExchangeId = 8;
    if (has_bidexchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bidexchangeid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 askExchangeId = 9;
    if (has_askexchangeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->askexchangeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATQuote::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATQuote* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATQuote*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATQuote::MergeFrom(const ATQuote& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbol()) {
      mutable_symbol()->::NodeActiveTickProto::ATSymbol::MergeFrom(from.symbol());
    }
    if (from.has_bidprice()) {
      mutable_bidprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.bidprice());
    }
    if (from.has_askprice()) {
      mutable_askprice()->::NodeActiveTickProto::ATPrice::MergeFrom(from.askprice());
    }
    if (from.has_bidsize()) {
      set_bidsize(from.bidsize());
    }
    if (from.has_asksize()) {
      set_asksize(from.asksize());
    }
    if (from.has_quoteconditionid()) {
      set_quoteconditionid(from.quoteconditionid());
    }
    if (from.has_servertime()) {
      mutable_servertime()->::NodeActiveTickProto::ATTime::MergeFrom(from.servertime());
    }
    if (from.has_bidexchangeid()) {
      set_bidexchangeid(from.bidexchangeid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_askexchangeid()) {
      set_askexchangeid(from.askexchangeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATQuote::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATQuote::CopyFrom(const ATQuote& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATQuote::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_bidprice()) {
    if (!this->bidprice().IsInitialized()) return false;
  }
  if (has_askprice()) {
    if (!this->askprice().IsInitialized()) return false;
  }
  return true;
}

void ATQuote::Swap(ATQuote* other) {
  if (other != this) {
    std::swap(symbol_, other->symbol_);
    std::swap(bidprice_, other->bidprice_);
    std::swap(askprice_, other->askprice_);
    std::swap(bidsize_, other->bidsize_);
    std::swap(asksize_, other->asksize_);
    std::swap(quoteconditionid_, other->quoteconditionid_);
    std::swap(servertime_, other->servertime_);
    std::swap(bidexchangeid_, other->bidexchangeid_);
    std::swap(askexchangeid_, other->askexchangeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATQuote::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATQuote_descriptor_;
  metadata.reflection = ATQuote_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATBarHistoryValue::kOpenFieldNumber;
const int ATBarHistoryValue::kHighFieldNumber;
const int ATBarHistoryValue::kLowFieldNumber;
const int ATBarHistoryValue::kCloseFieldNumber;
const int ATBarHistoryValue::kVolumeFieldNumber;
const int ATBarHistoryValue::kTimeFieldNumber;
const int ATBarHistoryValue::kSymbolFieldNumber;
const int ATBarHistoryValue::kStatusFieldNumber;
#endif  // !_MSC_VER

ATBarHistoryValue::ATBarHistoryValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ATBarHistoryValue::InitAsDefaultInstance() {
  open_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  high_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  low_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  close_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  time_ = const_cast< ::NodeActiveTickProto::ATTime*>(&::NodeActiveTickProto::ATTime::default_instance());
  symbol_ = const_cast< ::NodeActiveTickProto::ATSymbol*>(&::NodeActiveTickProto::ATSymbol::default_instance());
}

ATBarHistoryValue::ATBarHistoryValue(const ATBarHistoryValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ATBarHistoryValue::SharedCtor() {
  _cached_size_ = 0;
  open_ = NULL;
  high_ = NULL;
  low_ = NULL;
  close_ = NULL;
  volume_ = GOOGLE_LONGLONG(0);
  time_ = NULL;
  symbol_ = NULL;
  status_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATBarHistoryValue::~ATBarHistoryValue() {
  SharedDtor();
}

void ATBarHistoryValue::SharedDtor() {
  if (this != default_instance_) {
    delete open_;
    delete high_;
    delete low_;
    delete close_;
    delete time_;
    delete symbol_;
  }
}

void ATBarHistoryValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATBarHistoryValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATBarHistoryValue_descriptor_;
}

const ATBarHistoryValue& ATBarHistoryValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATBarHistoryValue* ATBarHistoryValue::default_instance_ = NULL;

ATBarHistoryValue* ATBarHistoryValue::New() const {
  return new ATBarHistoryValue;
}

void ATBarHistoryValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_open()) {
      if (open_ != NULL) open_->::NodeActiveTickProto::ATPrice::Clear();
    }
    if (has_high()) {
      if (high_ != NULL) high_->::NodeActiveTickProto::ATPrice::Clear();
    }
    if (has_low()) {
      if (low_ != NULL) low_->::NodeActiveTickProto::ATPrice::Clear();
    }
    if (has_close()) {
      if (close_ != NULL) close_->::NodeActiveTickProto::ATPrice::Clear();
    }
    volume_ = GOOGLE_LONGLONG(0);
    if (has_time()) {
      if (time_ != NULL) time_->::NodeActiveTickProto::ATTime::Clear();
    }
    if (has_symbol()) {
      if (symbol_ != NULL) symbol_->::NodeActiveTickProto::ATSymbol::Clear();
    }
    status_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATBarHistoryValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NodeActiveTickProto.ATPrice open = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_open()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_high;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice high = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_high:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_high()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_low;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice low = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_low:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_low()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_close;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice close = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_close:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_close()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_volume;
        break;
      }

      // optional int64 volume = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &volume_)));
          set_has_volume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_time;
        break;
      }

      // optional .NodeActiveTickProto.ATTime time = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_time()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_symbol;
        break;
      }

      // optional .NodeActiveTickProto.ATSymbol symbol = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_symbol()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_status;
        break;
      }

      // optional .NodeActiveTickProto.ATSymbolStatus status = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NodeActiveTickProto::ATSymbolStatus_IsValid(value)) {
            set_status(static_cast< ::NodeActiveTickProto::ATSymbolStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ATBarHistoryValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NodeActiveTickProto.ATPrice open = 1;
  if (has_open()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->open(), output);
  }

  // optional .NodeActiveTickProto.ATPrice high = 2;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->high(), output);
  }

  // optional .NodeActiveTickProto.ATPrice low = 3;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->low(), output);
  }

  // optional .NodeActiveTickProto.ATPrice close = 4;
  if (has_close()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->close(), output);
  }

  // optional int64 volume = 5;
  if (has_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->volume(), output);
  }

  // optional .NodeActiveTickProto.ATTime time = 6;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->time(), output);
  }

  // optional .NodeActiveTickProto.ATSymbol symbol = 7;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->symbol(), output);
  }

  // optional .NodeActiveTickProto.ATSymbolStatus status = 8;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ATBarHistoryValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NodeActiveTickProto.ATPrice open = 1;
  if (has_open()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->open(), target);
  }

  // optional .NodeActiveTickProto.ATPrice high = 2;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->high(), target);
  }

  // optional .NodeActiveTickProto.ATPrice low = 3;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->low(), target);
  }

  // optional .NodeActiveTickProto.ATPrice close = 4;
  if (has_close()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->close(), target);
  }

  // optional int64 volume = 5;
  if (has_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->volume(), target);
  }

  // optional .NodeActiveTickProto.ATTime time = 6;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->time(), target);
  }

  // optional .NodeActiveTickProto.ATSymbol symbol = 7;
  if (has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->symbol(), target);
  }

  // optional .NodeActiveTickProto.ATSymbolStatus status = 8;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ATBarHistoryValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NodeActiveTickProto.ATPrice open = 1;
    if (has_open()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->open());
    }

    // optional .NodeActiveTickProto.ATPrice high = 2;
    if (has_high()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->high());
    }

    // optional .NodeActiveTickProto.ATPrice low = 3;
    if (has_low()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->low());
    }

    // optional .NodeActiveTickProto.ATPrice close = 4;
    if (has_close()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->close());
    }

    // optional int64 volume = 5;
    if (has_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->volume());
    }

    // optional .NodeActiveTickProto.ATTime time = 6;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->time());
    }

    // optional .NodeActiveTickProto.ATSymbol symbol = 7;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->symbol());
    }

    // optional .NodeActiveTickProto.ATSymbolStatus status = 8;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATBarHistoryValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATBarHistoryValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATBarHistoryValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATBarHistoryValue::MergeFrom(const ATBarHistoryValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_open()) {
      mutable_open()->::NodeActiveTickProto::ATPrice::MergeFrom(from.open());
    }
    if (from.has_high()) {
      mutable_high()->::NodeActiveTickProto::ATPrice::MergeFrom(from.high());
    }
    if (from.has_low()) {
      mutable_low()->::NodeActiveTickProto::ATPrice::MergeFrom(from.low());
    }
    if (from.has_close()) {
      mutable_close()->::NodeActiveTickProto::ATPrice::MergeFrom(from.close());
    }
    if (from.has_volume()) {
      set_volume(from.volume());
    }
    if (from.has_time()) {
      mutable_time()->::NodeActiveTickProto::ATTime::MergeFrom(from.time());
    }
    if (from.has_symbol()) {
      mutable_symbol()->::NodeActiveTickProto::ATSymbol::MergeFrom(from.symbol());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATBarHistoryValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATBarHistoryValue::CopyFrom(const ATBarHistoryValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATBarHistoryValue::IsInitialized() const {

  if (has_open()) {
    if (!this->open().IsInitialized()) return false;
  }
  if (has_high()) {
    if (!this->high().IsInitialized()) return false;
  }
  if (has_low()) {
    if (!this->low().IsInitialized()) return false;
  }
  if (has_close()) {
    if (!this->close().IsInitialized()) return false;
  }
  return true;
}

void ATBarHistoryValue::Swap(ATBarHistoryValue* other) {
  if (other != this) {
    std::swap(open_, other->open_);
    std::swap(high_, other->high_);
    std::swap(low_, other->low_);
    std::swap(close_, other->close_);
    std::swap(volume_, other->volume_);
    std::swap(time_, other->time_);
    std::swap(symbol_, other->symbol_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATBarHistoryValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATBarHistoryValue_descriptor_;
  metadata.reflection = ATBarHistoryValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATBarHistoryDbResponse::kValueFieldNumber;
#endif  // !_MSC_VER

ATBarHistoryDbResponse::ATBarHistoryDbResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ATBarHistoryDbResponse::InitAsDefaultInstance() {
}

ATBarHistoryDbResponse::ATBarHistoryDbResponse(const ATBarHistoryDbResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ATBarHistoryDbResponse::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATBarHistoryDbResponse::~ATBarHistoryDbResponse() {
  SharedDtor();
}

void ATBarHistoryDbResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ATBarHistoryDbResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATBarHistoryDbResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATBarHistoryDbResponse_descriptor_;
}

const ATBarHistoryDbResponse& ATBarHistoryDbResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATBarHistoryDbResponse* ATBarHistoryDbResponse::default_instance_ = NULL;

ATBarHistoryDbResponse* ATBarHistoryDbResponse::New() const {
  return new ATBarHistoryDbResponse;
}

void ATBarHistoryDbResponse::Clear() {
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATBarHistoryDbResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .NodeActiveTickProto.ATBarHistoryValue value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ATBarHistoryDbResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .NodeActiveTickProto.ATBarHistoryValue value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ATBarHistoryDbResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .NodeActiveTickProto.ATBarHistoryValue value = 1;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ATBarHistoryDbResponse::ByteSize() const {
  int total_size = 0;

  // repeated .NodeActiveTickProto.ATBarHistoryValue value = 1;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATBarHistoryDbResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATBarHistoryDbResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATBarHistoryDbResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATBarHistoryDbResponse::MergeFrom(const ATBarHistoryDbResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATBarHistoryDbResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATBarHistoryDbResponse::CopyFrom(const ATBarHistoryDbResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATBarHistoryDbResponse::IsInitialized() const {

  for (int i = 0; i < value_size(); i++) {
    if (!this->value(i).IsInitialized()) return false;
  }
  return true;
}

void ATBarHistoryDbResponse::Swap(ATBarHistoryDbResponse* other) {
  if (other != this) {
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATBarHistoryDbResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATBarHistoryDbResponse_descriptor_;
  metadata.reflection = ATBarHistoryDbResponse_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ATQuoteDbResponseSymbolFieldData_ATFieldStatus_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATQuoteDbResponseSymbolFieldData_ATFieldStatus_descriptor_;
}
bool ATQuoteDbResponseSymbolFieldData_ATFieldStatus_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ATQuoteDbResponseSymbolFieldData_ATFieldStatus ATQuoteDbResponseSymbolFieldData::FieldStatusSuccess;
const ATQuoteDbResponseSymbolFieldData_ATFieldStatus ATQuoteDbResponseSymbolFieldData::FieldStatusInvalid;
const ATQuoteDbResponseSymbolFieldData_ATFieldStatus ATQuoteDbResponseSymbolFieldData::FieldStatusUnavailable;
const ATQuoteDbResponseSymbolFieldData_ATFieldStatus ATQuoteDbResponseSymbolFieldData::FieldStatusDenied;
const ATQuoteDbResponseSymbolFieldData_ATFieldStatus ATQuoteDbResponseSymbolFieldData::ATFieldStatus_MIN;
const ATQuoteDbResponseSymbolFieldData_ATFieldStatus ATQuoteDbResponseSymbolFieldData::ATFieldStatus_MAX;
const int ATQuoteDbResponseSymbolFieldData::ATFieldStatus_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* ATQuoteDbResponseSymbolFieldData_ATDataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATQuoteDbResponseSymbolFieldData_ATDataType_descriptor_;
}
bool ATQuoteDbResponseSymbolFieldData_ATDataType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ATQuoteDbResponseSymbolFieldData_ATDataType ATQuoteDbResponseSymbolFieldData::DataByte;
const ATQuoteDbResponseSymbolFieldData_ATDataType ATQuoteDbResponseSymbolFieldData::DataByteArray;
const ATQuoteDbResponseSymbolFieldData_ATDataType ATQuoteDbResponseSymbolFieldData::DataUInteger32;
const ATQuoteDbResponseSymbolFieldData_ATDataType ATQuoteDbResponseSymbolFieldData::DataUInteger64;
const ATQuoteDbResponseSymbolFieldData_ATDataType ATQuoteDbResponseSymbolFieldData::DataInteger32;
const ATQuoteDbResponseSymbolFieldData_ATDataType ATQuoteDbResponseSymbolFieldData::DataInteger64;
const ATQuoteDbResponseSymbolFieldData_ATDataType ATQuoteDbResponseSymbolFieldData::DataPrice;
const ATQuoteDbResponseSymbolFieldData_ATDataType ATQuoteDbResponseSymbolFieldData::DataString;
const ATQuoteDbResponseSymbolFieldData_ATDataType ATQuoteDbResponseSymbolFieldData::DataUnicodeString;
const ATQuoteDbResponseSymbolFieldData_ATDataType ATQuoteDbResponseSymbolFieldData::DataDateTime;
const ATQuoteDbResponseSymbolFieldData_ATDataType ATQuoteDbResponseSymbolFieldData::DataDouble;
const ATQuoteDbResponseSymbolFieldData_ATDataType ATQuoteDbResponseSymbolFieldData::ATDataType_MIN;
const ATQuoteDbResponseSymbolFieldData_ATDataType ATQuoteDbResponseSymbolFieldData::ATDataType_MAX;
const int ATQuoteDbResponseSymbolFieldData::ATDataType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ATQuoteDbResponseSymbolFieldData::kFieldTypeFieldNumber;
const int ATQuoteDbResponseSymbolFieldData::kFieldStatusFieldNumber;
const int ATQuoteDbResponseSymbolFieldData::kDataTypeFieldNumber;
const int ATQuoteDbResponseSymbolFieldData::kDataBytePBFieldNumber;
const int ATQuoteDbResponseSymbolFieldData::kDataByteArrayPBFieldNumber;
const int ATQuoteDbResponseSymbolFieldData::kDataUInteger32PBFieldNumber;
const int ATQuoteDbResponseSymbolFieldData::kDataUInteger64PBFieldNumber;
const int ATQuoteDbResponseSymbolFieldData::kDataInteger32PBFieldNumber;
const int ATQuoteDbResponseSymbolFieldData::kDataInteger64PBFieldNumber;
const int ATQuoteDbResponseSymbolFieldData::kDataPricePBFieldNumber;
const int ATQuoteDbResponseSymbolFieldData::kDataStringPBFieldNumber;
const int ATQuoteDbResponseSymbolFieldData::kDataUnicodeStringPBFieldNumber;
const int ATQuoteDbResponseSymbolFieldData::kDataDateTimePBFieldNumber;
const int ATQuoteDbResponseSymbolFieldData::kDataDoublePBFieldNumber;
#endif  // !_MSC_VER

ATQuoteDbResponseSymbolFieldData::ATQuoteDbResponseSymbolFieldData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ATQuoteDbResponseSymbolFieldData::InitAsDefaultInstance() {
  datapricepb_ = const_cast< ::NodeActiveTickProto::ATPrice*>(&::NodeActiveTickProto::ATPrice::default_instance());
  datadatetimepb_ = const_cast< ::NodeActiveTickProto::ATTime*>(&::NodeActiveTickProto::ATTime::default_instance());
}

ATQuoteDbResponseSymbolFieldData::ATQuoteDbResponseSymbolFieldData(const ATQuoteDbResponseSymbolFieldData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ATQuoteDbResponseSymbolFieldData::SharedCtor() {
  _cached_size_ = 0;
  fieldtype_ = 1;
  fieldstatus_ = 1;
  datatype_ = 1;
  databytepb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  databytearraypb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datauinteger32pb_ = 0u;
  datauinteger64pb_ = GOOGLE_ULONGLONG(0);
  datainteger32pb_ = 0;
  datainteger64pb_ = GOOGLE_LONGLONG(0);
  datapricepb_ = NULL;
  datastringpb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dataunicodestringpb_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  datadatetimepb_ = NULL;
  datadoublepb_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATQuoteDbResponseSymbolFieldData::~ATQuoteDbResponseSymbolFieldData() {
  SharedDtor();
}

void ATQuoteDbResponseSymbolFieldData::SharedDtor() {
  if (databytepb_ != &::google::protobuf::internal::kEmptyString) {
    delete databytepb_;
  }
  if (databytearraypb_ != &::google::protobuf::internal::kEmptyString) {
    delete databytearraypb_;
  }
  if (datastringpb_ != &::google::protobuf::internal::kEmptyString) {
    delete datastringpb_;
  }
  if (dataunicodestringpb_ != &::google::protobuf::internal::kEmptyString) {
    delete dataunicodestringpb_;
  }
  if (this != default_instance_) {
    delete datapricepb_;
    delete datadatetimepb_;
  }
}

void ATQuoteDbResponseSymbolFieldData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATQuoteDbResponseSymbolFieldData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATQuoteDbResponseSymbolFieldData_descriptor_;
}

const ATQuoteDbResponseSymbolFieldData& ATQuoteDbResponseSymbolFieldData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATQuoteDbResponseSymbolFieldData* ATQuoteDbResponseSymbolFieldData::default_instance_ = NULL;

ATQuoteDbResponseSymbolFieldData* ATQuoteDbResponseSymbolFieldData::New() const {
  return new ATQuoteDbResponseSymbolFieldData;
}

void ATQuoteDbResponseSymbolFieldData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fieldtype_ = 1;
    fieldstatus_ = 1;
    datatype_ = 1;
    if (has_databytepb()) {
      if (databytepb_ != &::google::protobuf::internal::kEmptyString) {
        databytepb_->clear();
      }
    }
    if (has_databytearraypb()) {
      if (databytearraypb_ != &::google::protobuf::internal::kEmptyString) {
        databytearraypb_->clear();
      }
    }
    datauinteger32pb_ = 0u;
    datauinteger64pb_ = GOOGLE_ULONGLONG(0);
    datainteger32pb_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    datainteger64pb_ = GOOGLE_LONGLONG(0);
    if (has_datapricepb()) {
      if (datapricepb_ != NULL) datapricepb_->::NodeActiveTickProto::ATPrice::Clear();
    }
    if (has_datastringpb()) {
      if (datastringpb_ != &::google::protobuf::internal::kEmptyString) {
        datastringpb_->clear();
      }
    }
    if (has_dataunicodestringpb()) {
      if (dataunicodestringpb_ != &::google::protobuf::internal::kEmptyString) {
        dataunicodestringpb_->clear();
      }
    }
    if (has_datadatetimepb()) {
      if (datadatetimepb_ != NULL) datadatetimepb_->::NodeActiveTickProto::ATTime::Clear();
    }
    datadoublepb_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATQuoteDbResponseSymbolFieldData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NodeActiveTickProto.ATQuoteFieldType fieldType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NodeActiveTickProto::ATQuoteFieldType_IsValid(value)) {
            set_fieldtype(static_cast< ::NodeActiveTickProto::ATQuoteFieldType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fieldStatus;
        break;
      }

      // optional .NodeActiveTickProto.ATQuoteDbResponseSymbolFieldData.ATFieldStatus fieldStatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fieldStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NodeActiveTickProto::ATQuoteDbResponseSymbolFieldData_ATFieldStatus_IsValid(value)) {
            set_fieldstatus(static_cast< ::NodeActiveTickProto::ATQuoteDbResponseSymbolFieldData_ATFieldStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dataType;
        break;
      }

      // optional .NodeActiveTickProto.ATQuoteDbResponseSymbolFieldData.ATDataType dataType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dataType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NodeActiveTickProto::ATQuoteDbResponseSymbolFieldData_ATDataType_IsValid(value)) {
            set_datatype(static_cast< ::NodeActiveTickProto::ATQuoteDbResponseSymbolFieldData_ATDataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_DataBytePB;
        break;
      }

      // optional string DataBytePB = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DataBytePB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_databytepb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->databytepb().data(), this->databytepb().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_DataByteArrayPB;
        break;
      }

      // optional string DataByteArrayPB = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DataByteArrayPB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_databytearraypb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->databytearraypb().data(), this->databytearraypb().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_DataUInteger32PB;
        break;
      }

      // optional uint32 DataUInteger32PB = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DataUInteger32PB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &datauinteger32pb_)));
          set_has_datauinteger32pb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_DataUInteger64PB;
        break;
      }

      // optional uint64 DataUInteger64PB = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DataUInteger64PB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &datauinteger64pb_)));
          set_has_datauinteger64pb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_DataInteger32PB;
        break;
      }

      // optional int32 DataInteger32PB = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DataInteger32PB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &datainteger32pb_)));
          set_has_datainteger32pb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_DataInteger64PB;
        break;
      }

      // optional int64 DataInteger64PB = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_DataInteger64PB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &datainteger64pb_)));
          set_has_datainteger64pb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_DataPricePB;
        break;
      }

      // optional .NodeActiveTickProto.ATPrice DataPricePB = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DataPricePB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_datapricepb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_DataStringPB;
        break;
      }

      // optional string DataStringPB = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DataStringPB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_datastringpb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->datastringpb().data(), this->datastringpb().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_DataUnicodeStringPB;
        break;
      }

      // optional string DataUnicodeStringPB = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DataUnicodeStringPB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dataunicodestringpb()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dataunicodestringpb().data(), this->dataunicodestringpb().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_DataDateTimePB;
        break;
      }

      // optional .NodeActiveTickProto.ATTime DataDateTimePB = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DataDateTimePB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_datadatetimepb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(113)) goto parse_DataDoublePB;
        break;
      }

      // optional double DataDoublePB = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_DataDoublePB:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &datadoublepb_)));
          set_has_datadoublepb();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ATQuoteDbResponseSymbolFieldData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NodeActiveTickProto.ATQuoteFieldType fieldType = 1;
  if (has_fieldtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->fieldtype(), output);
  }

  // optional .NodeActiveTickProto.ATQuoteDbResponseSymbolFieldData.ATFieldStatus fieldStatus = 2;
  if (has_fieldstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->fieldstatus(), output);
  }

  // optional .NodeActiveTickProto.ATQuoteDbResponseSymbolFieldData.ATDataType dataType = 3;
  if (has_datatype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->datatype(), output);
  }

  // optional string DataBytePB = 4;
  if (has_databytepb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->databytepb().data(), this->databytepb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->databytepb(), output);
  }

  // optional string DataByteArrayPB = 5;
  if (has_databytearraypb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->databytearraypb().data(), this->databytearraypb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->databytearraypb(), output);
  }

  // optional uint32 DataUInteger32PB = 6;
  if (has_datauinteger32pb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->datauinteger32pb(), output);
  }

  // optional uint64 DataUInteger64PB = 7;
  if (has_datauinteger64pb()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(7, this->datauinteger64pb(), output);
  }

  // optional int32 DataInteger32PB = 8;
  if (has_datainteger32pb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->datainteger32pb(), output);
  }

  // optional int64 DataInteger64PB = 9;
  if (has_datainteger64pb()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->datainteger64pb(), output);
  }

  // optional .NodeActiveTickProto.ATPrice DataPricePB = 10;
  if (has_datapricepb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->datapricepb(), output);
  }

  // optional string DataStringPB = 11;
  if (has_datastringpb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datastringpb().data(), this->datastringpb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->datastringpb(), output);
  }

  // optional string DataUnicodeStringPB = 12;
  if (has_dataunicodestringpb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dataunicodestringpb().data(), this->dataunicodestringpb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->dataunicodestringpb(), output);
  }

  // optional .NodeActiveTickProto.ATTime DataDateTimePB = 13;
  if (has_datadatetimepb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->datadatetimepb(), output);
  }

  // optional double DataDoublePB = 14;
  if (has_datadoublepb()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->datadoublepb(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ATQuoteDbResponseSymbolFieldData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NodeActiveTickProto.ATQuoteFieldType fieldType = 1;
  if (has_fieldtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->fieldtype(), target);
  }

  // optional .NodeActiveTickProto.ATQuoteDbResponseSymbolFieldData.ATFieldStatus fieldStatus = 2;
  if (has_fieldstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->fieldstatus(), target);
  }

  // optional .NodeActiveTickProto.ATQuoteDbResponseSymbolFieldData.ATDataType dataType = 3;
  if (has_datatype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->datatype(), target);
  }

  // optional string DataBytePB = 4;
  if (has_databytepb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->databytepb().data(), this->databytepb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->databytepb(), target);
  }

  // optional string DataByteArrayPB = 5;
  if (has_databytearraypb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->databytearraypb().data(), this->databytearraypb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->databytearraypb(), target);
  }

  // optional uint32 DataUInteger32PB = 6;
  if (has_datauinteger32pb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->datauinteger32pb(), target);
  }

  // optional uint64 DataUInteger64PB = 7;
  if (has_datauinteger64pb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(7, this->datauinteger64pb(), target);
  }

  // optional int32 DataInteger32PB = 8;
  if (has_datainteger32pb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->datainteger32pb(), target);
  }

  // optional int64 DataInteger64PB = 9;
  if (has_datainteger64pb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->datainteger64pb(), target);
  }

  // optional .NodeActiveTickProto.ATPrice DataPricePB = 10;
  if (has_datapricepb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->datapricepb(), target);
  }

  // optional string DataStringPB = 11;
  if (has_datastringpb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->datastringpb().data(), this->datastringpb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->datastringpb(), target);
  }

  // optional string DataUnicodeStringPB = 12;
  if (has_dataunicodestringpb()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dataunicodestringpb().data(), this->dataunicodestringpb().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->dataunicodestringpb(), target);
  }

  // optional .NodeActiveTickProto.ATTime DataDateTimePB = 13;
  if (has_datadatetimepb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->datadatetimepb(), target);
  }

  // optional double DataDoublePB = 14;
  if (has_datadoublepb()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->datadoublepb(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ATQuoteDbResponseSymbolFieldData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NodeActiveTickProto.ATQuoteFieldType fieldType = 1;
    if (has_fieldtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fieldtype());
    }

    // optional .NodeActiveTickProto.ATQuoteDbResponseSymbolFieldData.ATFieldStatus fieldStatus = 2;
    if (has_fieldstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fieldstatus());
    }

    // optional .NodeActiveTickProto.ATQuoteDbResponseSymbolFieldData.ATDataType dataType = 3;
    if (has_datatype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->datatype());
    }

    // optional string DataBytePB = 4;
    if (has_databytepb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->databytepb());
    }

    // optional string DataByteArrayPB = 5;
    if (has_databytearraypb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->databytearraypb());
    }

    // optional uint32 DataUInteger32PB = 6;
    if (has_datauinteger32pb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->datauinteger32pb());
    }

    // optional uint64 DataUInteger64PB = 7;
    if (has_datauinteger64pb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->datauinteger64pb());
    }

    // optional int32 DataInteger32PB = 8;
    if (has_datainteger32pb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->datainteger32pb());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 DataInteger64PB = 9;
    if (has_datainteger64pb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->datainteger64pb());
    }

    // optional .NodeActiveTickProto.ATPrice DataPricePB = 10;
    if (has_datapricepb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->datapricepb());
    }

    // optional string DataStringPB = 11;
    if (has_datastringpb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->datastringpb());
    }

    // optional string DataUnicodeStringPB = 12;
    if (has_dataunicodestringpb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dataunicodestringpb());
    }

    // optional .NodeActiveTickProto.ATTime DataDateTimePB = 13;
    if (has_datadatetimepb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->datadatetimepb());
    }

    // optional double DataDoublePB = 14;
    if (has_datadoublepb()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATQuoteDbResponseSymbolFieldData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATQuoteDbResponseSymbolFieldData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATQuoteDbResponseSymbolFieldData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATQuoteDbResponseSymbolFieldData::MergeFrom(const ATQuoteDbResponseSymbolFieldData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fieldtype()) {
      set_fieldtype(from.fieldtype());
    }
    if (from.has_fieldstatus()) {
      set_fieldstatus(from.fieldstatus());
    }
    if (from.has_datatype()) {
      set_datatype(from.datatype());
    }
    if (from.has_databytepb()) {
      set_databytepb(from.databytepb());
    }
    if (from.has_databytearraypb()) {
      set_databytearraypb(from.databytearraypb());
    }
    if (from.has_datauinteger32pb()) {
      set_datauinteger32pb(from.datauinteger32pb());
    }
    if (from.has_datauinteger64pb()) {
      set_datauinteger64pb(from.datauinteger64pb());
    }
    if (from.has_datainteger32pb()) {
      set_datainteger32pb(from.datainteger32pb());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_datainteger64pb()) {
      set_datainteger64pb(from.datainteger64pb());
    }
    if (from.has_datapricepb()) {
      mutable_datapricepb()->::NodeActiveTickProto::ATPrice::MergeFrom(from.datapricepb());
    }
    if (from.has_datastringpb()) {
      set_datastringpb(from.datastringpb());
    }
    if (from.has_dataunicodestringpb()) {
      set_dataunicodestringpb(from.dataunicodestringpb());
    }
    if (from.has_datadatetimepb()) {
      mutable_datadatetimepb()->::NodeActiveTickProto::ATTime::MergeFrom(from.datadatetimepb());
    }
    if (from.has_datadoublepb()) {
      set_datadoublepb(from.datadoublepb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATQuoteDbResponseSymbolFieldData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATQuoteDbResponseSymbolFieldData::CopyFrom(const ATQuoteDbResponseSymbolFieldData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATQuoteDbResponseSymbolFieldData::IsInitialized() const {

  if (has_datapricepb()) {
    if (!this->datapricepb().IsInitialized()) return false;
  }
  return true;
}

void ATQuoteDbResponseSymbolFieldData::Swap(ATQuoteDbResponseSymbolFieldData* other) {
  if (other != this) {
    std::swap(fieldtype_, other->fieldtype_);
    std::swap(fieldstatus_, other->fieldstatus_);
    std::swap(datatype_, other->datatype_);
    std::swap(databytepb_, other->databytepb_);
    std::swap(databytearraypb_, other->databytearraypb_);
    std::swap(datauinteger32pb_, other->datauinteger32pb_);
    std::swap(datauinteger64pb_, other->datauinteger64pb_);
    std::swap(datainteger32pb_, other->datainteger32pb_);
    std::swap(datainteger64pb_, other->datainteger64pb_);
    std::swap(datapricepb_, other->datapricepb_);
    std::swap(datastringpb_, other->datastringpb_);
    std::swap(dataunicodestringpb_, other->dataunicodestringpb_);
    std::swap(datadatetimepb_, other->datadatetimepb_);
    std::swap(datadoublepb_, other->datadoublepb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATQuoteDbResponseSymbolFieldData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATQuoteDbResponseSymbolFieldData_descriptor_;
  metadata.reflection = ATQuoteDbResponseSymbolFieldData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ATQuoteDbResponseData::kSymbolStatusFieldNumber;
const int ATQuoteDbResponseData::kSymbolFieldNumber;
const int ATQuoteDbResponseData::kSymbolFieldDataFieldNumber;
#endif  // !_MSC_VER

ATQuoteDbResponseData::ATQuoteDbResponseData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ATQuoteDbResponseData::InitAsDefaultInstance() {
  symbol_ = const_cast< ::NodeActiveTickProto::ATSymbol*>(&::NodeActiveTickProto::ATSymbol::default_instance());
}

ATQuoteDbResponseData::ATQuoteDbResponseData(const ATQuoteDbResponseData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ATQuoteDbResponseData::SharedCtor() {
  _cached_size_ = 0;
  symbolstatus_ = 1;
  symbol_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATQuoteDbResponseData::~ATQuoteDbResponseData() {
  SharedDtor();
}

void ATQuoteDbResponseData::SharedDtor() {
  if (this != default_instance_) {
    delete symbol_;
  }
}

void ATQuoteDbResponseData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATQuoteDbResponseData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATQuoteDbResponseData_descriptor_;
}

const ATQuoteDbResponseData& ATQuoteDbResponseData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATQuoteDbResponseData* ATQuoteDbResponseData::default_instance_ = NULL;

ATQuoteDbResponseData* ATQuoteDbResponseData::New() const {
  return new ATQuoteDbResponseData;
}

void ATQuoteDbResponseData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    symbolstatus_ = 1;
    if (has_symbol()) {
      if (symbol_ != NULL) symbol_->::NodeActiveTickProto::ATSymbol::Clear();
    }
  }
  symbolfielddata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATQuoteDbResponseData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NodeActiveTickProto.ATSymbolStatus symbolStatus = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NodeActiveTickProto::ATSymbolStatus_IsValid(value)) {
            set_symbolstatus(static_cast< ::NodeActiveTickProto::ATSymbolStatus >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_symbol;
        break;
      }

      // optional .NodeActiveTickProto.ATSymbol symbol = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbol:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_symbol()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_symbolFieldData;
        break;
      }

      // repeated .NodeActiveTickProto.ATQuoteDbResponseSymbolFieldData symbolFieldData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_symbolFieldData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_symbolfielddata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_symbolFieldData;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ATQuoteDbResponseData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NodeActiveTickProto.ATSymbolStatus symbolStatus = 1;
  if (has_symbolstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->symbolstatus(), output);
  }

  // optional .NodeActiveTickProto.ATSymbol symbol = 2;
  if (has_symbol()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->symbol(), output);
  }

  // repeated .NodeActiveTickProto.ATQuoteDbResponseSymbolFieldData symbolFieldData = 3;
  for (int i = 0; i < this->symbolfielddata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->symbolfielddata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ATQuoteDbResponseData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NodeActiveTickProto.ATSymbolStatus symbolStatus = 1;
  if (has_symbolstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->symbolstatus(), target);
  }

  // optional .NodeActiveTickProto.ATSymbol symbol = 2;
  if (has_symbol()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->symbol(), target);
  }

  // repeated .NodeActiveTickProto.ATQuoteDbResponseSymbolFieldData symbolFieldData = 3;
  for (int i = 0; i < this->symbolfielddata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->symbolfielddata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ATQuoteDbResponseData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NodeActiveTickProto.ATSymbolStatus symbolStatus = 1;
    if (has_symbolstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->symbolstatus());
    }

    // optional .NodeActiveTickProto.ATSymbol symbol = 2;
    if (has_symbol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->symbol());
    }

  }
  // repeated .NodeActiveTickProto.ATQuoteDbResponseSymbolFieldData symbolFieldData = 3;
  total_size += 1 * this->symbolfielddata_size();
  for (int i = 0; i < this->symbolfielddata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->symbolfielddata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATQuoteDbResponseData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATQuoteDbResponseData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATQuoteDbResponseData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATQuoteDbResponseData::MergeFrom(const ATQuoteDbResponseData& from) {
  GOOGLE_CHECK_NE(&from, this);
  symbolfielddata_.MergeFrom(from.symbolfielddata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_symbolstatus()) {
      set_symbolstatus(from.symbolstatus());
    }
    if (from.has_symbol()) {
      mutable_symbol()->::NodeActiveTickProto::ATSymbol::MergeFrom(from.symbol());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATQuoteDbResponseData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATQuoteDbResponseData::CopyFrom(const ATQuoteDbResponseData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATQuoteDbResponseData::IsInitialized() const {

  for (int i = 0; i < symbolfielddata_size(); i++) {
    if (!this->symbolfielddata(i).IsInitialized()) return false;
  }
  return true;
}

void ATQuoteDbResponseData::Swap(ATQuoteDbResponseData* other) {
  if (other != this) {
    std::swap(symbolstatus_, other->symbolstatus_);
    std::swap(symbol_, other->symbol_);
    symbolfielddata_.Swap(&other->symbolfielddata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATQuoteDbResponseData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATQuoteDbResponseData_descriptor_;
  metadata.reflection = ATQuoteDbResponseData_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* ATQuoteDbResponse_ATQuoteDbResponseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATQuoteDbResponse_ATQuoteDbResponseType_descriptor_;
}
bool ATQuoteDbResponse_ATQuoteDbResponseType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ATQuoteDbResponse_ATQuoteDbResponseType ATQuoteDbResponse::QuoteDbResponseSuccess;
const ATQuoteDbResponse_ATQuoteDbResponseType ATQuoteDbResponse::QuoteDbResponseInvalidRequest;
const ATQuoteDbResponse_ATQuoteDbResponseType ATQuoteDbResponse::QuoteDbResponseDenied;
const ATQuoteDbResponse_ATQuoteDbResponseType ATQuoteDbResponse::QuoteDbResponseUnavailable;
const ATQuoteDbResponse_ATQuoteDbResponseType ATQuoteDbResponse::ATQuoteDbResponseType_MIN;
const ATQuoteDbResponse_ATQuoteDbResponseType ATQuoteDbResponse::ATQuoteDbResponseType_MAX;
const int ATQuoteDbResponse::ATQuoteDbResponseType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ATQuoteDbResponse::kResponseTypeFieldNumber;
const int ATQuoteDbResponse::kDatumFieldNumber;
#endif  // !_MSC_VER

ATQuoteDbResponse::ATQuoteDbResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ATQuoteDbResponse::InitAsDefaultInstance() {
}

ATQuoteDbResponse::ATQuoteDbResponse(const ATQuoteDbResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ATQuoteDbResponse::SharedCtor() {
  _cached_size_ = 0;
  responsetype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ATQuoteDbResponse::~ATQuoteDbResponse() {
  SharedDtor();
}

void ATQuoteDbResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ATQuoteDbResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ATQuoteDbResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATQuoteDbResponse_descriptor_;
}

const ATQuoteDbResponse& ATQuoteDbResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2eproto();
  return *default_instance_;
}

ATQuoteDbResponse* ATQuoteDbResponse::default_instance_ = NULL;

ATQuoteDbResponse* ATQuoteDbResponse::New() const {
  return new ATQuoteDbResponse;
}

void ATQuoteDbResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    responsetype_ = 1;
  }
  datum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ATQuoteDbResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .NodeActiveTickProto.ATQuoteDbResponse.ATQuoteDbResponseType responseType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::NodeActiveTickProto::ATQuoteDbResponse_ATQuoteDbResponseType_IsValid(value)) {
            set_responsetype(static_cast< ::NodeActiveTickProto::ATQuoteDbResponse_ATQuoteDbResponseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_datum;
        break;
      }

      // repeated .NodeActiveTickProto.ATQuoteDbResponseData datum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_datum;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ATQuoteDbResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .NodeActiveTickProto.ATQuoteDbResponse.ATQuoteDbResponseType responseType = 1;
  if (has_responsetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->responsetype(), output);
  }

  // repeated .NodeActiveTickProto.ATQuoteDbResponseData datum = 2;
  for (int i = 0; i < this->datum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datum(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ATQuoteDbResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .NodeActiveTickProto.ATQuoteDbResponse.ATQuoteDbResponseType responseType = 1;
  if (has_responsetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->responsetype(), target);
  }

  // repeated .NodeActiveTickProto.ATQuoteDbResponseData datum = 2;
  for (int i = 0; i < this->datum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datum(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ATQuoteDbResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .NodeActiveTickProto.ATQuoteDbResponse.ATQuoteDbResponseType responseType = 1;
    if (has_responsetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->responsetype());
    }

  }
  // repeated .NodeActiveTickProto.ATQuoteDbResponseData datum = 2;
  total_size += 1 * this->datum_size();
  for (int i = 0; i < this->datum_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datum(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ATQuoteDbResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ATQuoteDbResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ATQuoteDbResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ATQuoteDbResponse::MergeFrom(const ATQuoteDbResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  datum_.MergeFrom(from.datum_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_responsetype()) {
      set_responsetype(from.responsetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ATQuoteDbResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ATQuoteDbResponse::CopyFrom(const ATQuoteDbResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ATQuoteDbResponse::IsInitialized() const {

  for (int i = 0; i < datum_size(); i++) {
    if (!this->datum(i).IsInitialized()) return false;
  }
  return true;
}

void ATQuoteDbResponse::Swap(ATQuoteDbResponse* other) {
  if (other != this) {
    std::swap(responsetype_, other->responsetype_);
    datum_.Swap(&other->datum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ATQuoteDbResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ATQuoteDbResponse_descriptor_;
  metadata.reflection = ATQuoteDbResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NodeActiveTickProto

// @@protoc_insertion_point(global_scope)
