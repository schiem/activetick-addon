// Generated by IcedCoffeeScript 1.8.0-e
(function() {
  var ATBarHistoryType, ATConstituentRequestTypes, ATStreamRequestTypes, ActiveTick, NodeActiveTick, ProtoBuf, async, noisy, path, standard_timeout, _, _ref,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  NodeActiveTick = require('./build/Debug/NodeActiveTickAddon').NodeActiveTick;

  async = require('async');

  _ = require('underscore');

  ProtoBuf = require('protobufjs');

  path = require('path');

  _ref = require('./ActiveTickDefines'), ATConstituentRequestTypes = _ref.ATConstituentRequestTypes, ATStreamRequestTypes = _ref.ATStreamRequestTypes, ATBarHistoryType = _ref.ATBarHistoryType;

  noisy = true;

  standard_timeout = 3000;

  ActiveTick = (function() {
    function ActiveTick(readyCb) {
      this.handleProtoMsg = __bind(this.handleProtoMsg, this);
      this.connect = __bind(this.connect, this);
      this.beginQuoteStream = __bind(this.beginQuoteStream, this);
      this.barHistoryDBRequest = __bind(this.barHistoryDBRequest, this);
      ProtoBuf.loadProtoFile(path.join(__dirname, "protobuf", "messages.proto"), (function(_this) {
        return function(err, builder) {
          if (err) {
            return console.error(err);
          }
          _this.api = new NodeActiveTick(_this.handleProtoMsg);
          _this.callbacks = {};
          _this.stream_callbacks = {};
          _this.messages_builder = builder;
          _this.ATLoginResponse = _this.messages_builder.build("NodeActiveTickProto.ATLoginResponse");
          _this.ATConstituentResponse = _this.messages_builder.build("NodeActiveTickProto.ATConstituentResponse");
          _this.ATQuote = _this.messages_builder.build("NodeActiveTickProto.ATQuote");
          _this.ATQuoteStreamResponse = _this.messages_builder.build("NodeActiveTickProto.ATQuoteStreamResponse");
          _this.ATQuoteStreamTradeUpdate = _this.messages_builder.build("NodeActiveTickProto.ATQuoteStreamTradeUpdate");
          return readyCb();
        };
      })(this));
    }

    ActiveTick.prototype.barHistoryDBRequest = function(symbol, barhistorytype, intradayminutecompression, startime, endtime, requestCb) {
      var request_id;
      request_id = this.api.barHistoryDBRequest(symbol, barhistorytype, intradayminutecompression, startime, endtime);
      if (requestCb != null) {
        return this.callbacks[request_id] = requestCb;
      }
    };

    ActiveTick.prototype.beginQuoteStream = function(symbols, ATStreamRequestTypeIndex, quoteCb, requestCb) {
      var request_id, sym, symbolCount, symbolParam, _i, _len;
      if (typeof symbols === 'object') {
        symbolParam = symbols.join(',');
        symbolCount = symbols.length;
      } else if (typeof symbols === 'string') {
        symbolParam = symbols;
        symbolCount = 1;
      }
      request_id = this.api.beginQuoteStream(symbolParam, symbolCount, ATStreamRequestTypeIndex);
      for (_i = 0, _len = symbols.length; _i < _len; _i++) {
        sym = symbols[_i];
        if (!this.stream_callbacks[sym]) {
          this.stream_callbacks[sym] = [];
        }
        this.stream_callbacks[sym].push(quoteCb);
      }
      if (requestCb != null) {
        return this.callbacks[request_id] = requestCb;
      }
    };

    ActiveTick.prototype.listRequest = function(listType, key, cb) {
      var request_id;
      request_id = this.api.listRequest(listType, key);
      return this.callbacks[request_id] = cb;
    };

    ActiveTick.prototype.connect = function(url, port, apiKey, username, password, cb) {
      var request_id;
      request_id = this.api.connect(url, port, apiKey, username, password);
      return this.callbacks[request_id] = cb;
    };

    ActiveTick.prototype.handleProtoMsg = function(msgType, msgID, msgData) {
      var c, f, funcs, msg, _i, _len;
      if (msgType === 'ATLoginResponse') {
        msg = this.ATLoginResponse.decode(msgData);
        if (msg.loginResponseString !== 'Success') {
          return console.error(msg);
        }
      } else if (msgType === 'ATConstituentResponse') {
        msg = this.ATConstituentResponse.decode(msgData);
      } else if (msgType === 'ATQuoteStreamResponse') {
        msg = this.ATQuoteStreamResponse.decode(msgData);
      } else if (msgType === 'ATQuoteStreamTradeUpdate') {
        msg = this.ATQuoteStreamTradeUpdate.decode(msgData);
        funcs = this.stream_callbacks[msg.tradeSymbol.symbol];
        for (_i = 0, _len = funcs.length; _i < _len; _i++) {
          f = funcs[_i];
          f(msg);
        }
      }
      if ((c = this.callbacks[msgID]) != null) {
        return c(msg);
      }
    };

    return ActiveTick;

  })();

  module.exports = {
    ActiveTick: ActiveTick
  };

}).call(this);
